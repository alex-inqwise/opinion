jQuery.fn.control = function () {
    if (arguments.length == 0) return [];
    var I = arguments[0] || {};
    var v = $(this);
    var s = null;
    var J = function (D) {
    	
        var E = $("<div class=\"theme-question ui-question-a\" data-theme=\"a\" data-form=\"ui-question-a\">" +
    			"<div><span class=\"label-status\"></span></div>" +
    			"<div class=\"theme-question-heading ui-question-heading-a\" data-theme=\"a\" data-form=\"ui-question-heading-a\">" +
    				"<span class=\"label-control-number\"></span>" +
    				"<span class=\"label-control-mandatory asterisk\" style=\"display: none;\">*&nbsp;</span>"+
    				"<span class=\"header-control-content\"></span>" + 
    			"</div>" +
    			"<div class=\"theme-question-content ui-question-content-a\" data-theme=\"a\" data-form=\"ui-question-content-a\">" +
	    			"<div class=\"container-embed-code\"></div>" +
					"<div class=\"label-control-note\" style=\"display: none;\"></div>" + 
					"<ul class=\"container-control-includes\"></ul>" + 
					"<div class=\"container-control-other\"></div>" +
					"<div class=\"container-control-comment\" style=\"display: none\">" + 
						"<div class=\"label-control-comment\"></div>" + 
						"<div class=\"row-textarea\">" + 
							"<textarea class=\"textarea-field textarea-control-comment\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" ></textarea>" + 
						"</div>" + 
					"</div>" + 
    			"</div>" +
    		"</div>");
        
        
        switch (D) {
        case 1:
            {
                break
            }
        case 2:
            {
                var c = E;
                var link = null;
                var g = c.find('.container-control-includes');
                var otherContainer = c.find(".container-control-other");
                var F = I.controlId;
                var G = function () {
                    for (var x = 0; x < survey.controls.list.length; x++) {
                        if (survey.controls.list[x].controlId == F) {
                        	
                        	
                        	// return i
                            I.complete(1);
                        	
                            var u = survey.controls.list[x];
                            c.find('.header-control-content').html(u.content.replace(/\n/g, "<br/>"));
                            if (u.isMandatory) {
                                c.find('.label-control-mandatory').show();
                                
                                // mandatory validation
                            	validateElements.elements.push({
                            		group : String(F),
                            		status : c.find('.label-status'),
                            		rules : [
                            		         { method : 'required', message : 'This question is required.' }
                 					]
                            	});
                            	
                                
                            }
                            
                            if(u.link) {
                            	link = u.link;
                            }
                            
                            if (u.isEnableNote) {
                            	if(u.note != null) {
                            		c.find('.label-control-note').html(u.note.replace(/\n/gi, "<br/>").replace(/%0A/gi, "<br/>")).show();
                            	}
                            }
                            if (u.isEnableComment) {
                                var e = c.find('.container-control-comment');
                                e.show();
                                var j = e.find('.label-control-comment').text(u.comment);
                                
                                if(guidTypeId == 1 && modeId == 1) {
                                	var f = e.find('.textarea-control-comment');
	                                if(u.answerComment != undefined) {
	                                	f.val(u.answerComment);
	                                }
	                                f.focusout(function () {
	                                    var a = {
	                                        controlId: F,
	                                        controlParentTypeId: u.parentTypeId,
	                                        controlParentId: u.parentId,
	                                        controlTypeId: u.controlTypeId,
	                                        inputTypeId: u.inputTypeId,
	                                        controlIndex : I.controlIndex,
	                                        controlContent: u.content,
	                                        comment: $.removeHTMLTags($(this).val()),
	                                        sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
	                                        sheetIndex: survey.sheets.lastSelected
	                                    };
	                                    //createResponse(responseType.control, true, a)
										createResponse({
											responseTypeId : responseType.control,
											async : true,
											responseData : a
										});
	                                });
                                }
                            }
                            switch (u.inputTypeId) {
                            case 0:
                                {
                                    if (u.options.list.length != 0) {
                                        var P = null;
                                        var j = 0;
                                    	for (var i = 0; i < u.options.list.length; i++) {
                                    		if(survey.controls.list[x].options.list[i].optionKindId == 0) {
	                                    		var k = $("<li class=\"row-choice\"><label><input type=\"radio\" class=\"radio-option\" id=\"" + u.options.list[i].optionId + "\" name=\"" + F + "\" optionindex=\"" + i + "\" optiontext=\"" + u.options.list[i].text + "\" optionkindid=\"" + u.options.list[i].optionKindId + "\" value=\"" + u.options.list[i].value + "\" />" + u.options.list[i].text + "</label></li>");
	                                        	if(u.options.list[i].selectTypeId != undefined) {
	                                        		k.find('input:radio').prop('checked', true);
	                                        	}
	                                        	k.appendTo(g);
	                                        	j++;
                                    		}
                                    		if(survey.controls.list[x].options.list[i].optionKindId == 1) {
                                    			P = survey.controls.list[x].options.list[i];
                                    		}
                                        }
                                    	
                                        if (guidTypeId == 1 && modeId == 1) {
                                            var f = g.find('input:radio');
                                            f.change(function () {
                                                var a = {
                                                    controlId: F,
                                                    controlParentTypeId: u.parentTypeId,
                                                    controlParentId: u.parentId,
                                                    controlTypeId: u.controlTypeId,
                                                    inputTypeId: u.inputTypeId,
                                                    controlIndex : I.controlIndex,
                                                    controlContent: u.content,
                                                    sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                    sheetIndex: survey.sheets.lastSelected,
                                                    optionId: parseInt($(this).attr('id')),
                                                    optionKindId : parseInt($(this).attr('optionkindid')),
                                                    optionIndex : parseInt($(this).attr('optionindex')),
                                                    answerText: $(this).attr('optiontext'),
                                                    answerValue: $(this).val()
                                                };
                                                //createResponse(responseType.option, true, a)
												createResponse({
													responseTypeId : responseType.option,
													async : true,
													responseData : a
												});
                                            })
                                        }
                                        
                                        if(P != null) {
                                    		var l = $("<div class=\"row-choice-other\"><div><label><input type=\"radio\" class=\"radio-other\" name=\"" + F + "\" optionid=\"" + P.optionId + "\" optionkindid=\"" + P.optionKindId +"\" optiontext=\"" + ((P.text != "" && P.text != null) ? P.text : contentDictionary.titles.title_Other) + "\" />" + ((P.text != "" && P.text != null) ? P.text : contentDictionary.titles.title_Other) + "</label></div><div><input type=\"text\" class=\"text-field input-control-other\" /></div></div>");
                                            l.appendTo(otherContainer);
                                            var m = l.find('.radio-other');
                                            var n = l.find('.input-control-other');
                                            
                                            m.unbind("change").change(function () {
                                                if ($(this).is(':checked')) {
                                                    n.focus()
                                                }
                                            });
                                            
                                            if (guidTypeId == 1 && modeId == 1) {
                                            	
                                            	if(P.selectTypeId != undefined) {
                                                	m.prop('checked', true);
                                                	n.val(P.answerValue);
                                                }
                                            	
                                                n.focusin(function () {
                                                    if (!m.is(':checked')) {
                                                        m.prop('checked', true);
                                                    	m.change();
                                                    }
                                                }).focusout(function () {
                                                    var a = {
                                                        controlId: F,
                                                        controlParentTypeId: u.parentTypeId,
                                                        controlParentId: u.parentId,
                                                        controlTypeId: u.controlTypeId,
                                                        inputTypeId: u.inputTypeId,
                                                        controlIndex : I.controlIndex,
                                                        controlContent: u.content,
                                                        sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                        sheetIndex: survey.sheets.lastSelected,
                                                        optionId: parseInt(m.attr('optionid')),
                                                        optionKindId : parseInt(m.attr('optionkindid')),
                                                        optionIndex : j,
                                                        answerText: m.attr('optiontext'),
                                                        answerValue: $.removeHTMLTags($(this).val())
                                                    };
                                                    //createResponse(responseType.option, true, a)
													createResponse({
														responseTypeId : responseType.option,
														async : true,
														responseData : a
													});
                                                })
                                            } else {
                                                n.focusin(function () {
                                                    if (!m.is(':checked')) {
                                                        m.prop('checked', true);
                                                    	m.change();
                                                    }
                                                })
                                            }
                                    	}
                                        
                                    }
                                    
                                    break
                                }
                            case 1:
                                {
                                    if (u.options.list.length != 0) {
                                        var o = $("<div><select class=\"dropdown-" + F + "\" name=\"" + F + "\"></select></div>");
                                        var p = o.find(".dropdown-" + F);
                                        var q = p[0].options;
                                        
                                        
                                        var L = null;
                                        var P = null;
                                        var R = null;
                                        var Y = [];
                                        var j = 0;
                                        for (var i = 0; i < u.options.list.length; i++) {
                                        	if(survey.controls.list[x].options.list[i].optionKindId == 2) {
                                        		R = survey.controls.list[x].options.list[i];
                                        	}
                                        	if(survey.controls.list[x].options.list[i].optionKindId == 0) {
	                                        	Y.push(survey.controls.list[x].options.list[i]);
	                                        	j++;
                                        	}
                                        	if(survey.controls.list[x].options.list[i].optionKindId == 1) {
                                    			P = survey.controls.list[x].options.list[i];
                                    		}
                                        }
                                        
                                        o.appendTo(otherContainer);
                                        
                                        if (guidTypeId == 1 && modeId == 1) {
                                            p.change(function () {
                                            	var a = $(this).find('option:selected');
                                            	var b = {
                                                    controlId: F,
                                                    controlParentTypeId: u.parentTypeId,
                                                    controlParentId: u.parentId,
                                                    controlTypeId: u.controlTypeId,
                                                    inputTypeId: u.inputTypeId,
                                                    controlIndex : I.controlIndex,
                                                    controlContent: u.content,
                                                    selectTypeId : 1,
                                                    isSelected : (parseInt(a.attr('optionindex')) != 0),
                                                    sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                    sheetIndex: survey.sheets.lastSelected,
                                                    optionId: parseInt(a.attr('optionid')),
                                                    optionKindId : parseInt(a.attr('optionkindid')),
                                                    optionIndex : parseInt(a.attr('optionindex')),
                                                    answerText: a.text(),
                                                    answerValue: a.attr('value')
                                                };
                                            	
												createResponse({
													responseTypeId : responseType.option,
													async : true,
													responseData : b
												});
                                            })
                                        }
                                        
                                        if(R != null) {
                                        	var t = new Option((R.text != null ? R.text : contentDictionary.titles.title_DefaultNoneSelectedOption), 0);
                                            t.setAttribute("optionid", R.optionId);
                                            t.setAttribute("optionindex", 0);
                                            t.setAttribute("optionkindid", 2);
                                            
                                            try {
                                                q.add(t)
                                            } catch (ex) {
                                                q.add(t, null)
                                            }
                                        }
                                        
                                        if(Y.length != 0) {
                                        	for(var z = 0; z < Y.length; z++) {
                                        		var k = new Option(Y[z].text, Y[z].value);
	                                        	k.setAttribute("optionid", Y[z].optionId);
	                                            k.setAttribute("optionindex", (z + 1));
	                                            k.setAttribute("optionkindid", Y[z].optionKindId);
	                                            
	                                        	if (guidTypeId == 1 && modeId == 1) {
		                                        	if(Y[z].selectTypeId != undefined) {
		                                            	L = (z + 1);
		                                            }
	                                        	}
	                                            
	                                            try {
	                                                q.add(k)
	                                            } catch (ex) {
	                                                q.add(k, null)
	                                            }
                                        	}
                                        }
                                        
                                        if(L != null) {
                                        	p[0].selectedIndex = L;
                                        }
                                        
                                        /*
                                        // need to remove other
                                        if(P != null) {
                                        	var l = $("<div class=\"row\"><div class=\"cell\">" + ((P.text != "" && P.text != null) ? P.text : contentDictionary.titles.title_Other) + "</div><div class=\"cell\"><input type=\"text\" class=\"text-field input-control-other\" optionid=\"" + P.optionId + "\" optionkindid=\"" + P.optionKindId + "\" optiontext=\"" + ((P.text != "" && P.text != null) ? P.text : contentDictionary.titles.title_Other) + "\" /></div></div>");
                                            l.appendTo(otherContainer);
                                            var n = l.find('.input-control-other');
                                            
                                            if (guidTypeId == 1 && modeId == 1) {
                                            	
                                            	if(P.selectTypeId != undefined) {
                                                	n.val(P.answerValue);
                                                }
                                            	
                                                n.focusout(function () {
                                                    var a = {
                                                        controlId: F,
                                                        controlParentTypeId: u.parentTypeId,
                                                        controlParentId: u.parentId,
                                                        controlTypeId: u.controlTypeId,
                                                        inputTypeId: u.inputTypeId,
                                                        controlIndex : I.controlIndex,
                                                        controlContent: u.content,
                                                        sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                        sheetIndex: survey.sheets.lastSelected,
                                                        optionId : parseInt($(this).attr('optionid')),
                                                        optionKindId : parseInt($(this).attr('optionkindid')),
                                                        optionIndex : (j + 1),
                                                        answerText: $(this).attr('optiontext'),
                                                        answerValue: $.removeHTMLTags($(this).val())
                                                    };
                                                    //createResponse(responseType.option, true, a)
													createResponse({
														responseTypeId : responseType.option,
														async : true,
														responseData : a
													});
                                                })
                                            }
                                        }
                                        */
                                        
                                        
                                        
                                    }
                                    
                                    break
                                }
                            case 2:
                                {
                                    if (u.options.list.length != 0) {
                                        var P = null;
                                        var j = 0;
                                    	for (var i = 0; i < u.options.list.length; i++) {
                                        	if(survey.controls.list[x].options.list[i].optionKindId == 0) {
	                                        	var k = $("<li class=\"row-choice\"><label><input type=\"checkbox\" class=\"checkbox-" + u.options.list[i].optionId + "\" id=\"" + u.options.list[i].optionId + "\" name=\"" + F + "\" optionindex=\"" + i + "\" optiontext=\"" + u.options.list[i].text + "\" value=\"" + u.options.list[i].value + "\" />" + u.options.list[i].text + "</label></li>");
	                                            if ((u.options.list[i].isEnableAdditionalDetails != null ? (u.options.list[i].isEnableAdditionalDetails ? true : false) : false)) {
	                                                var y = $("<div " + (u.options.list[i].selectTypeId == undefined ? "style=\"display: none;\"" : "" ) + " class=\"container-additional-details-or-comments container-additional-details-or-comments-" + u.options.list[i].optionId + "\"><div class=\"row-desc\">" + (u.options.list[i].additionalDetailsTitle != null ? u.options.list[i].additionalDetailsTitle : contentDictionary.titles.title_DefaultAdditionalDetails) + "</div><div class=\"row-details\"><input type=\"text\" class=\"text-field input-additional-details-or-comments\" " + (u.options.list[i].answerComment != undefined ? "value=\"" + u.options.list[i].answerComment + "\"" : "" ) + " optionid=\"" + u.options.list[i].optionId +"\" optionindex=\"" + i + "\" optiontext=\"" + u.options.list[i].text + "\" optionvalue=\"" + u.options.list[i].value + "\"  /></div></div>");
	                                                //var y = $("<div style=\"display: none;\"" class=\"container-additional-details-or-comments container-additional-details-or-comments-" + u.options.list[i].optionId + "\"><div class=\"row-desc\">" + (u.options.list[i].additionalDetailsTitle != null ? u.options.list[i].additionalDetailsTitle : contentDictionary.titles.title_DefaultAdditionalDetails) + "</div><div class=\"row-details\"><input type=\"text\" class=\"text-field input-additional-details-or-comments\" " + (u.options.list[i].answerComment != undefined ? "value=\"" + u.options.list[i].answerComment + "\"" : "" ) + "  /></div></div>");
	                                                k.append(y);
	                                                k.find('.checkbox-' + u.options.list[i].optionId).unbind('change').change(function () {
	                                                    
	                                                	var w = $(this);
	                                                    var b = $('.container-additional-details-or-comments-' + w.attr('id'));
	                                                    var d = b.find('.input-additional-details-or-comments');
	                                                   
	                                                    if (w.is(':checked')) {
	                                                        b.show();
	                                                        d.focus();
	                                                        if (guidTypeId == 1 && modeId == 1) {
	                                                            d.unbind('focusout').focusout(function () {
	                                                                var a = {
	                                                                    controlId: F,
	                                                                    controlParentTypeId: u.parentTypeId,
	                                                                    controlParentId: u.parentId,
	                                                                    controlTypeId: u.controlTypeId,
	                                                                    inputTypeId: u.inputTypeId,
	                                                                    controlIndex : I.controlIndex,
	                                                                    controlContent: u.content,
	                                                                    selectTypeId : 2 /*2 - multiSelect*/,
	                                                                    isSelected : true,
	                                                                    comment: $.removeHTMLTags(d.val()),
	                                                                    sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
	                                                                    sheetIndex: survey.sheets.lastSelected,
	                                                                    optionId: parseInt(w.attr('id')),
	                                                                    optionIndex: parseInt(w.attr('optionindex')),
	                                                                    answerText: w.attr('optiontext'),
	                                                                    answerValue: w.val()
	                                                                };
	                                                                //createResponse(responseType.option, true, a)
																	createResponse({
																		responseTypeId : responseType.option,
																		async : true,
																		responseData : a
																	});
	                                                            })
	                                                        }
	                                                    } else {
	                                                        b.hide();
	                                                        if (guidTypeId == 1 && modeId == 1) {
	                                                            var c = {
	                                                                controlId: F,
	                                                                controlParentTypeId: u.parentTypeId,
	                                                                controlParentId: u.parentId,
	                                                                controlTypeId: u.controlTypeId,
	                                                                inputTypeId: u.inputTypeId,
	                                                                controlIndex : I.controlIndex,
	                                                                controlContent: u.content,
	                                                                selectTypeId: 2,
	                                                                isSelected : false,
	                                                                comment: $.removeHTMLTags(d.val()),
	                                                                sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
	                                                                sheetIndex: survey.sheets.lastSelected,
	                                                                optionId: parseInt(w.attr('id')),
	                                                                optionIndex: parseInt(w.attr('optionindex')),
	                                                                answerText: w.attr('optiontext'),
	                                                                answerValue: w.val()
	                                                            };
	                                                            //createResponse(responseType.option, true, c)
																createResponse({
																	responseTypeId : responseType.option,
																	async : true,
																	responseData : c
																});
	                                                        }
	                                                    }
	                                                    
	                                                }).addClass('checkbox-additional-details-or-comments');
	                                                
	                                                if(u.options.list[i].selectTypeId != undefined) {
	                                                	
	                                                	y.find('.input-additional-details-or-comments')
	                                                	 .unbind('focusout').focusout(function () {
	                                                		
		                                                    var a = {
		                                                        controlId: F,
		                                                        controlParentTypeId: u.parentTypeId,
		                                                        controlParentId: u.parentId,
		                                                        controlTypeId: u.controlTypeId,
		                                                        inputTypeId: u.inputTypeId,
		                                                        controlIndex : I.controlIndex,
		                                                        controlContent: u.content,
		                                                        selectTypeId: 2,
		                                                        isSelected : true,
		                                                        comment: $.removeHTMLTags($(this).val()),
		                                                        sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
		                                                        sheetIndex: survey.sheets.lastSelected,
		                                                        optionId: parseInt($(this).attr('optionid')),
		                                                        optionIndex: parseInt($(this).attr('optionindex')),
		                                                        answerText: $(this).attr('optiontext'),
		                                                        answerValue: $(this).attr('optionvalue')
		                                                    };
		                                                    //createResponse(responseType.option, true, a)
															createResponse({
																responseTypeId : responseType.option,
																async : true,
																responseData : a
															});
		                                                     
	                                                    });
	                                                }
	                                                
	                                            }
	                                            if(u.options.list[i].selectTypeId != undefined) {
	                                            	k.find('input:checkbox').prop('checked', true);
	                                            }
	                                            k.appendTo(g);
	                                            
	                                            j++;
	                                        }

                                        	if(survey.controls.list[x].options.list[i].optionKindId == 1) {
												P = survey.controls.list[x].options.list[i];
											}
                                        }
										
										
										
										if (guidTypeId == 1 && modeId == 1) {
											var f = g.find('input:checkbox');
											f.change(function () {
												if (!$(this).hasClass('checkbox-additional-details-or-comments')) {
													var a = {
														controlId: F,
														controlParentTypeId: u.parentTypeId,
														controlParentId: u.parentId,
														controlTypeId: u.controlTypeId,
														inputTypeId: u.inputTypeId,
														controlIndex : I.controlIndex,
														controlContent: u.content,
														selectTypeId : 2,
														isSelected: $(this).is(':checked'),
														sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
														sheetIndex: survey.sheets.lastSelected,
														optionId: parseInt($(this).attr('id')),
														optionIndex: parseInt($(this).attr('optionindex')),
														answerText: $(this).attr('optiontext'),
														answerValue: $(this).val()
													};
													//createResponse(responseType.option, true, a)
													createResponse({
														responseTypeId : responseType.option,
														async : true,
														responseData : a
													});
												}
											})
										}
										
										if (P != null) {
											var l = $("<div class=\"row-choice-other\"><div><label><input type=\"checkbox\" class=\"checkbox-other\" optionid=\"" + P.optionId + "\" name=\"" + F + "\" optionkindid=\"" + P.optionKindId + "\" optiontext=\"" + ((P.text != "" && P.text != null) ? P.text : contentDictionary.titles.title_Other) + "\" />" + ((P.text != "" && P.text != null) ? P.text : contentDictionary.titles.title_Other) + "</label></div><div><input type=\"text\" class=\"text-field input-control-other\" /></div></div>");
											l.appendTo(otherContainer);
											var z = l.find('.checkbox-other');
											var n = l.find('.input-control-other');
											
											if (guidTypeId == 1 && modeId == 1) {
												if(P.selectTypeId != undefined) {
	                                            	z.prop('checked', true);
	                                            	n.val(P.answerValue);
	                                            }
											}
											
											z.unbind("change").change(function () {
												if ($(this).is(':checked')) {
													n.focus()
												} else {
													// Send selectTypeId : 0
													if (guidTypeId == 1 && modeId == 1) {
														var a = {
															controlId: F,
															controlParentTypeId: u.parentTypeId,
															controlParentId: u.parentId,
															controlTypeId: u.controlTypeId,
															inputTypeId: u.inputTypeId,
															controlIndex : I.controlIndex,
															controlContent: u.content,
															selectTypeId: 2,
															isSelected : false,
															sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
															sheetIndex: survey.sheets.lastSelected,
															optionId : parseInt(z.attr('optionid')),
															optionKindId : parseInt(z.attr('optionkindid')),
															optionIndex : j,
															answerText: z.attr('optiontext'),
															answerValue: $.removeHTMLTags(n.val())
														};
														//createResponse(responseType.option, true, a)
														createResponse({
															responseTypeId : responseType.option,
															async : true,
															responseData : a
														});
													}
												}
											});
											if (guidTypeId == 1 && modeId == 1) {
												n.focusin(function () {
													if (!z.is(':checked')) {
														z.prop('checked', true);
														z.change();
													}
												}).focusout(function () {
													var a = {
														controlId: F,
														controlParentTypeId: u.parentTypeId,
														controlParentId: u.parentId,
														controlTypeId: u.controlTypeId,
														inputTypeId: u.inputTypeId,
														controlIndex : I.controlIndex,
														controlContent: u.content,
														selectTypeId: 2,
														isSelected : true,
														sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
														sheetIndex: survey.sheets.lastSelected,
														optionId : parseInt(z.attr('optionid')),
														optionKindId : parseInt(z.attr('optionkindid')),
														optionIndex : j,
														answerText: z.attr('optiontext'),
														answerValue: $.removeHTMLTags($(this).val())
													};
													//createResponse(responseType.option, true, a)
													createResponse({
														responseTypeId : responseType.option,
														async : true,
														responseData : a
													});
												})
											} else {
												n.focusin(function () {
													if (!z.is(':checked')) {
														z.prop('checked', true)
														z.change();
													}
												})
											}
										}

                                    }
                                    
                                    break
                                }
                            case 3:
                                {
                                    if (u.options.list.length != 0) {
                                        var o = $("<div class=\"row-multiple\"><div class=\"cell\"><select class=\"dropdown-" + F + "\" name=\"" + F + "\" multiple=\"multiple\"></select></div></div>");
                                        var p = o.find(".dropdown-" + F);
                                        
                                        var q = p[0].options;
										
										var P = null;
										var j = 0;
                                        for (var i = 0; i < u.options.list.length; i++) {
											if(survey.controls.list[x].options.list[i].optionKindId == 0) {
												var k = new Option(u.options.list[i].text, u.options.list[i].value);
												k.setAttribute("optionid", u.options.list[i].optionId);
												k.setAttribute("optionindex", i);
												try {
													q.add(k)
												} catch (ex) {
													q.add(k, null)
												}
												j++;
											}
											if(survey.controls.list[x].options.list[i].optionKindId == 1) {
												P = survey.controls.list[x].options.list[i];
											}
                                        }
                                        
                                        o.appendTo(g);
                                        
                                        if (guidTypeId == 1 && modeId == 1) {
                                            var A = [];
                                            var B = function (s) {
                                                if (A.length != 0) {
                                                    for (var d = 0; d < A.length; d++) {
                                                        if (A[d] == s) {
                                                            A.remove(d)
                                                        }
                                                    }
                                                    return A
                                                }
                                                return []
                                            };
                                            var C = function (s) {
                                                if (A.length != 0) {
                                                    for (var h = 0; h < A.length; h++) {
                                                        if (A[h] == s) {
                                                            return true;
                                                            break
                                                        }
                                                    }
                                                    return false
                                                } else {
                                                    return false
                                                }
                                            };
                                            p.change(function () {
                                                var a = $(this).val();
                                                if (a != null) {
                                                    if (a.length != 0) {
                                                        for (var r = 0; r < a.length; r++) {
                                                            if (C(a[r])) {} else {}
                                                        }
                                                        A = a
                                                    }
                                                } else {}
                                            })
                                        }
										
                                        
                                        // need to remove other from dropdown
										if(P != null) {
											var l = $("<div class=\"row\"><div class=\"cell\">" + ((P.text != "" && P.text != null) ? P.text : contentDictionary.titles.title_Other) + "</div><div class=\"cell\"><input type=\"text\" class=\"text-field input-control-other\" optionid=\"" + P.optionId + "\" optionkindid=\"" + P.optionKindId + "\" optiontext=\"" + ((P.text != "" && P.text != null) ? P.text : contentDictionary.titles.title_Other) + "\" /></div></div>");
											l.appendTo(g);
											var n = l.find('.input-control-other');
											
											if (guidTypeId == 1 && modeId == 1) {
												
												if(P.selectTypeId != undefined) {
	                                            	n.val(P.answerValue);
	                                            }
												
												n.focusout(function () {
													var a = {
														controlId: F,
														controlParentTypeId: u.parentTypeId,
														controlParentId: u.parentId,
														controlTypeId: u.controlTypeId,
														inputTypeId: u.inputTypeId,
														controlIndex : I.controlIndex,
														controlContent: u.content,
														sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
														sheetIndex: survey.sheets.lastSelected,
														optiondId : parseInt($(this).attr('optionid')),
														optionKindId : parseInt($(this).attr('optionkindid')),
														optionIndex : j,
														answerText: $(this).attr('optiontext'),
														answerValue: $.removeHTMLTags($(this).val())
													};
													//createResponse(responseType.option, true, a)
													createResponse({
														responseTypeId : responseType.option,
														async : true,
														responseData : a
													});
												})
											}
										}
                                    } 
                                    
                                    break
                                }
                            }
                            c.appendTo(v);
                            
                            
                            if(link) {
                            	
                            	// image
                            	if(u.linkTypeId == 1) {
                            		c.find('.container-embed-code')
                            			.html("<img src=" + u.link + " />")
                            			.show();
                            	}
                            	
                            	// embed code
                            	if(u.linkTypeId == 2) {
	                            	c.find('.container-embed-code')
	                        			.html(u.link)
	                        			.show();
                            	}
                            }
                            
                            
                            break
                        }
                    }
                };
                G();
                break
            }
        case 3:
            {
                var c = E;
                var link = null;
                var g = c.find('.container-control-includes');
                var otherContainer = c.find(".container-control-other");
                var F = I.controlId;
                var G = function () {
                    for (var x = 0; x < survey.controls.list.length; x++) {
                        if (survey.controls.list[x].controlId == F) {
                        	
                        	// return i
                            I.complete(1);
                        	
                            var u = survey.controls.list[x];
                            c.find('.header-control-content').html(u.content.replace(/\n/g, "<br/>"));
                            if (u.isMandatory) {
                                c.find('.label-control-mandatory').show();
                                
                                // mandatory validation
                                validateElements.elements.push({
                            		name : String(F),
                            		status : c.find('.label-status'),
                            		rules : [
                            		         { method : 'required', message : 'This question is required.' }
                 					]
                            	});
                            	
                                
                            }
                            
                            if(u.link) {
                            	link = u.link;
                            }
                            
                            if (u.isEnableNote) {
                            	if(u.note != null) {
                            		c.find('.label-control-note').html(u.note.replace(/\n/gi, "<br/>").replace(/%0A/gi, "<br/>")).show();
                            	}
                            }
                            switch (u.inputTypeId) {
                            case 0:
                                {
                            		otherContainer.append("<div class=\"group\"><input type=\"text\" name=\"" + F + "\" class=\"input-single-line-field text-field\" /></div>");
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                        var f = otherContainer.find('.input-single-line-field'); // to remove
                                        if(u.answerValue != undefined) {
                                        	f.val(u.answerValue);
                                        }
                                        f.focusout(function () {
                                            var a = {
                                                controlId: F,
                                                controlParentTypeId: u.parentTypeId,
                                                controlParentId: u.parentId,
                                                controlTypeId: u.controlTypeId,
                                                inputTypeId: u.inputTypeId,
                                                controlIndex : I.controlIndex,
                                                controlContent: u.content,
                                                sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                sheetIndex: survey.sheets.lastSelected,
                                                answerValue: $.removeHTMLTags($(this).val())
                                            };
                                            //createResponse(responseType.control, true, a)
											createResponse({
												responseTypeId : responseType.control,
												async : true,
												responseData : a
											});
                                        })
                                    }
                                    break
                                }
                            case 1:
                                {
                            		otherContainer.append("<div class=\"group\"><textarea name=\"" + F + "\" class=\"textarea-multi-line-field textarea-field\"></textarea></div>");
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                        var f = otherContainer.find('.textarea-multi-line-field');
                                        if(u.answerValue != undefined) {
                                        	f.val(u.answerValue);
                                        }
                                        f.focusout(function () {
                                            var a = {
                                                controlId: F,
                                                controlParentTypeId: u.parentTypeId,
                                                controlParentId: u.parentId,
                                                controlTypeId: u.controlTypeId,
                                                inputTypeId: u.inputTypeId,
                                                controlIndex : I.controlIndex,
                                                controlContent: u.content,
                                                sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                sheetIndex: survey.sheets.lastSelected,
                                                answerValue: $.removeHTMLTags($(this).val())
                                            };
                                            //createResponse(responseType.control, true, a)
											createResponse({
												responseTypeId : responseType.control,
												async : true,
												responseData : a
											});
                                        })
                                    }
                                    break
                                }
                            case 2:
                                {
                            		otherContainer.append("<div class=\"group\"><input type=\"password\" name=\"" + F + "\" class=\"input-password-field text-field\" /></div>");
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                        var f = otherContainer.find('.input-password-field');
                                        if(u.answerValue != undefined) {
                                        	f.val(u.answerValue);
                                        }
                                        f.focusout(function () {
                                            var a = {
                                                controlId: F,
                                                controlParentTypeId: u.parentTypeId,
                                                controlParentId: u.parentId,
                                                controlTypeId: u.controlTypeId,
                                                inputTypeId: u.inputTypeId,
                                                controlIndex : I.controlIndex,
                                                controlContent: u.content,
                                                sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                sheetIndex: survey.sheets.lastSelected,
                                                answerValue: $.removeHTMLTags($(this).val())
                                            };
                                            //createResponse(responseType.control, true, a)
											createResponse({
												responseTypeId : responseType.control,
												async : true,
												responseData : a
											});
                                        })
                                    }
                                    break
                                }
                            }
                            c.appendTo(v);
                            
                            if(link) {
                            	
                            	// image
                            	if(u.linkTypeId == 1) {
                            		c.find('.container-embed-code')
                            			.html("<img src=" + u.link + " />")
                            			.show();
                            	}
                            	
                            	// embed code
                            	if(u.linkTypeId == 2) {
	                            	c.find('.container-embed-code')
	                        			.html(u.link)
	                        			.show();
                            	}
                            }
                            
                            
                            break
                        }
                    }
                };
                G();
                break
            }
        case 4:
            {
            	
            	// matrix/likert
                var c = E;
            	var link = null;
                var g = c.find('.container-control-includes');
                var otherContainer = c.find(".container-control-other");
                var F = I.controlId;
                var errorLabel = null;
                var G = function () {
                    for (var x = 0; x < survey.controls.list.length; x++) {
                        if (survey.controls.list[x].controlId == F) {
                        	var u = survey.controls.list[x];
                            c.find('.header-control-content').html(u.content.replace(/\n/g, "<br/>"));
                            if (u.isMandatory) {
                                c.find('.label-control-mandatory').show();
                                
                                // mandatory validation
                                errorLabel = $("<label class=\"status\">This question is required.</label>").hide();
                        			c.find('.label-status').append(errorLabel);
                                
                            }
                            
                            if(u.link) {
                            	link = u.link;
                            }
                            
                            if (u.isEnableNote) {
                            	if(u.note != null) {
                            		c.find('.label-control-note').html(u.note.replace(/\n/gi, "<br/>").replace(/%0A/gi, "<br/>")).show();
                            	}
                            }
                            if (u.subControls.list.length != 0) {
                                var a = $("<table cellpadding=\"0\" cellspacing=\"1\" border=\"0\" class=\"table-matrix\"></table>");
                                var b = $("<tr class=\"table-matrix-header\"></tr>");
                                var d = $("<td>&nbsp;</td>");
                                b.append(d);
                                for (var y = 0; y < u.options.list.length; y++) {
                                    var e = $("<th>" + u.options.list[y].text + "</th>");
                                    b.append(e);
                                }
                                a.append(b);
                                
                                
                                // return i
                                I.complete(u.subControls.list.length);
                                
                                
                                //alert(u.subControls.list.length);
                                
                                
                                for (var i = 0; i < u.subControls.list.length; i++) {
                                    var f = $("<tr " + (i % 2 ? "class=\"active\"" : "") + "></tr>"); 
                                    var h = $("<th>" + u.subControls.list[i].content + "</th>");
                                    f.append(h);
                                    
                                    var _lastSubControl = null;
                                    
                                    for (var y = 0; y < u.options.list.length; y++) {
                                        var j = null;
                                        var actualOption = u.options.list[y];
                                    	var actualSubControl = u.subControls.list[i];
                                    	
                                    	
                                    	
                                    	
                                        if (u.inputTypeId == 0) {
                                        	
                                            j = $("<td><lable><input type=\"radio\" controlindex=\""+y+"\"  name=\"" + (u.controlId + "_" + actualSubControl.controlId) + "\" subcontrolid=\"" + actualSubControl.controlId + "\" subcontrolparenttypeid=\"" + actualSubControl.parentTypeId + "\" subcontrolparentid=\"" + actualSubControl.parentId + "\" subcontrolcontent=\"" + actualSubControl.content + "\" id=\"" + actualOption.optionId + "\" optiontext=\"" + actualOption.text + "\" value=\"" + actualOption.value + "\" /></label></td>");
                                            
                                            if(_lastSubControl != actualSubControl) {
                                            	if (u.isMandatory) {
                                            		
                                                    // mandatory validation
                                                    validateGroup.push({
                                                    	controlId : u.controlId,
                                                    	group: u.controlId + "_" + actualSubControl.controlId
                                                    });
                                                    
    	                                        	validateElements.elements.push({
    	                                        		group : (u.controlId + "_" + actualSubControl.controlId),
    	                                        		showError : false,
    	                                        		rules : [
    	                                        		         { method : 'required', message : 'This question is required.' }
    	                             					],
    	                             					success : function() {
    	                                        			var isApprove = true;
    	                                        			for(var y = 0; y < validateGroup.length; y++) {
	    	                                        			
    	                                        				if(validateGroup[y].controlId == u.controlId) {
	    	                                        				if($('input[name=' + validateGroup[y].group + ']').filter(':checked').length == 0) { 
		    	                                        				isApprove = false;
		    	                                        				break;
		    	                                        			}
    	                                        				}
    	                                        				
    	                                        			}
    	                                        			if(isApprove) {
    	                                        				errorLabel.hide();
    	                                        			}
    	                                        		},
    	                                        		error: function() {
    	                                        			errorLabel.show();
    	                                        		}
    	                                        	});
                                                }
                                            }
                                            _lastSubControl = actualSubControl;
                                            
                                            if(actualOption.answerSelectedControlsIds != undefined) {
                                            	for(var selectedControlIdIndex in actualOption.answerSelectedControlsIds){
                                            		if(parseInt(actualOption.answerSelectedControlsIds[selectedControlIdIndex]) == parseInt(actualSubControl.controlId)){
                                            			j.find('input:radio').prop('checked', true);
                                            		}
                                            	}
                                            }
                                            
                                            if (guidTypeId == 1 && modeId == 1) {
	                                            var r = j.find('input:radio');
	                                            r.change(function() {
	                                            	var a = {
	                                                    controlId : parseInt($(this).attr('subcontrolid')),
	                                                    controlParentTypeId : parseInt($(this).attr('subcontrolparenttypeid')),
	                                                    controlParentId : parseInt($(this).attr('subcontrolparentid')),
	                                                    controlTypeId : 9,
	                                                    inputTypeId : u.inputTypeId,
	                                                    controlIndex : parseInt($(this).attr('controlindex')),
	                                                    controlContent: $(this).attr('subcontrolcontent'),
	                                                    sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
	                                                    sheetIndex: survey.sheets.lastSelected,
	                                                    optionId: parseInt($(this).attr('id')),
	                                                    answerText: $(this).attr('optiontext'),
	                                                    answerValue: $(this).val()
	                                                };
	                                                //createResponse(responseType.option, true, a)
													createResponse({
														responseTypeId : responseType.option,
														async : true,
														responseData : a
													});
	                                            });
                                            }
                                        } else if (u.inputTypeId == 1) {
                                        	
                                        	j = $("<td><lable><input type=\"checkbox\" controlindex=\""+y+"\" name=\"" + (u.controlId + "_" + actualSubControl.controlId) + "\"  subcontrolid=\"" + actualSubControl.controlId + "\" subcontrolparenttypeid=\"" + actualSubControl.parentTypeId + "\" subcontrolparentid=\"" + actualSubControl.parentId + "\" subcontrolcontent=\"" + actualSubControl.content + "\" id=\"" + actualOption.optionId + "\" optiontext=\"" + actualOption.text + "\" value=\"" + actualOption.value + "\" /></label></td>");
                                            
                                        	if(_lastSubControl != actualSubControl) {
                                            	if (u.isMandatory) {
                                            		
                                                    // mandatory validation
                                                    validateGroup.push({
                                                    	controlId : u.controlId,
                                                    	group : u.controlId + "_" + actualSubControl.controlId
                                                    });
                                                    
    	                                        	validateElements.elements.push({
    	                                        		group : (u.controlId + "_" + actualSubControl.controlId),
    	                                        		showError : false,
    	                                        		rules : [
    	                                        		         { method : 'required', message : 'This question is required.' }
    	                             					],
    	                             					success : function() {
    	                                        			var isApprove = true;
    	                                        			for(var y = 0; y < validateGroup.length; y++) {
	    	                                        			if(validateGroup[y].controlId == u.controlId) {
	    	                                        				if($('input[name=' + validateGroup[y].group + ']').filter(':checked').length == 0) { 
		    	                                        				isApprove = false;
		    	                                        				break;
		    	                                        			}
	    	                                        			}
    	                                        			}
    	                                        			if(isApprove) {
    	                                        				errorLabel.hide();
    	                                        			}
    	                                        		},
    	                                        		error: function() {
    	                                        			errorLabel.show();
    	                                        		}
    	                                        	});
    	                                        	
                                                }
                                            }
                                            _lastSubControl = actualSubControl;
                                            
                                        	 if(actualOption.answerSelectedControlsIds != undefined) {
                                             	for(var selectedControlIdIndex in actualOption.answerSelectedControlsIds){
                                             		if(parseInt(actualOption.answerSelectedControlsIds[selectedControlIdIndex]) == parseInt(actualSubControl.controlId)){
                                             			j.find('input:checkbox').prop('checked', true);
                                             		}
                                             	}
                                             }
                                            
                                            if (guidTypeId == 1 && modeId == 1) {
	                                            var r = j.find('input:checkbox');
	                                            r.change(function() {
	                                            	var a = {
	                                                    controlId : parseInt($(this).attr('subcontrolid')),
	                                                    controlParentTypeId : parseInt($(this).attr('subcontrolparenttypeid')),
	                                                    controlParentId : parseInt($(this).attr('subcontrolparentid')),
	                                                    controlTypeId : 9,
	                                                    inputTypeId : u.inputTypeId,
	                                                    controlIndex : parseInt($(this).attr('controlindex')),
	                                                    controlContent: $(this).attr('subcontrolcontent'),
	                                                    selectTypeId : 2,
	                                                    isSelected : $(this).is(':checked'),
	                                                    sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
	                                                    sheetIndex: survey.sheets.lastSelected,
	                                                    optionId: parseInt($(this).attr('id')),
	                                                    answerText: $(this).attr('optiontext'),
	                                                    answerValue: $(this).val()
	                                                };
	                                                //createResponse(responseType.option, true, a)
													createResponse({
														responseTypeId : responseType.option,
														async : true,
														responseData : a
													});
	                                            	
	                                            });
                                            }
                                        }
                                        f.append(j)
                                    }
                                    a.append(f);
                                    
                                    
                                    
                                    
                                }
                                otherContainer.append(a);
                            }
                            c.appendTo(v);
                            
                            if(link) {
                            	
                            	// image
                            	if(u.linkTypeId == 1) {
                            		c.find('.container-embed-code')
                            			.html("<img src=" + u.link + " />")
                            			.show();
                            	}
                            	
                            	// embed code
                            	if(u.linkTypeId == 2) {
	                            	c.find('.container-embed-code')
	                        			.html(u.link)
	                        			.show();
                            	}
                            }
                            
                            
                            break
                        }
                    }
                };
                G();
                break
            }
        case 5:
            {
                var c = E;
                var link = null;
                var g = c.find('.container-control-includes');
                var otherContainer = c.find(".container-control-other");
                var F = I.controlId;
                var G = function () {
                    for (var x = 0; x < survey.controls.list.length; x++) {
                        if (survey.controls.list[x].controlId == F) {
                        	
                        	// return i
                            I.complete(1);
                        	
                        	var u = survey.controls.list[x];
                        	c.find('.header-control-content').html(u.content.replace(/\n/g, "<br/>"));
                            if (u.isMandatory) {
                                c.find('.label-control-mandatory').show();
                                
                                // mandatory validation
                                validateElements.elements.push({
                            		name : String(F),
                            		status : c.find('.label-status'),
                            		rules : [
                            		         { method : 'required', message : 'This question is required.' }
                 					]
                            	});
                            	
                            }
                            
                            if(u.link) {
                            	link = u.link;
                            }
                            
                            if (u.isEnableNote) {
                            	if(u.note != null) {
                            		c.find('.label-control-note').html(u.note.replace(/\n/gi, "<br/>").replace(/%0A/gi, "<br/>")).show();
                            	}
                            }
                            c.appendTo(v);
                            
                            if(link) {
                            	
                            	// image
                            	if(u.linkTypeId == 1) {
                            		c.find('.container-embed-code')
                            			.html("<img src=" + u.link + " />")
                            			.show();
                            	}
                            	
                            	// embed code
                            	if(u.linkTypeId == 2) {
	                            	c.find('.container-embed-code')
	                        			.html(u.link)
	                        			.show();
                            	}
                            }
                            
                            
                            break
                        }
                    }
                };
                G();
                break
            }
        case 6:
            {
                var c = E;
                var link = null;
                var g = c.find('.container-control-includes');
                var otherContainer = c.find(".container-control-other");
                var F = I.controlId;
                var G = function () {
                    for (var x = 0; x < survey.controls.list.length; x++) {
                        if (survey.controls.list[x].controlId == F) {
                        	
                        	
                        	// return i
                            I.complete(1);
                        	
                        	var u = survey.controls.list[x];
                        	
                            c.find('.header-control-content').html(u.content.replace(/\n/g, "<br/>"));
                            if (u.isMandatory) {
                                c.find('.label-control-mandatory').show();
                                
                                // mandatory validation
                                validateElements.elements.push({
                            		group : String(F),
                            		status : c.find('.label-status'),
                            		rules : [
                            		         { method : 'required', message : 'This question is required.' }
                 					]
                            	});
                                
                                
                            }
                            
                            if(u.link) {
                            	link = u.link;
                            }
                            
                            if (u.isEnableNote) {
                            	if(u.note != null) {
                            		c.find('.label-control-note').html(u.note.replace(/\n/gi, "<br/>").replace(/%0A/gi, "<br/>")).show();
                            	}
                            }
                            switch (u.inputTypeId) {
                            case 0:
                                {
                                    
                            		/*
                            		// MMM / DD
                                	var a = $("<div class=\"row-desc\">" +
                                			"<div class=\"cell-desc-month\">" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div></div>" + 
                                			"<a class=\"row filtered\"><div class=\"cell\"><select name=\"" + F + "\" class=\"months-list\" />&nbsp;/</div>" +
                                			"<div class=\"cell\"><select name=\"" + F + "\" class=\"days-list\" /></div></a>").appendTo(g);
                                    */
                                	
                                	var a = $("<li class=\"row-desc\">" +
                                				"<ul class=\"list-date\">" +
                                					"<li>" +
                                						"<div>" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                                						"<div><select name=\"" + F + "\" class=\"months-list\" /></div>" +
                                					"</li>" +
                                					"<li>" +
                                						"<div>" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                                						"<div><select name=\"" + F + "\" class=\"days-list\" /></div>" +
                                					"</li>" +
                                				"</ul>" +
                                			"</li>").appendTo(g);
                                	
                                	
                                	
                                	var M = a.find(".months-list");
                                    	M.loadSelect(contentDictionary.months);
                                    var Z = a.find(".days-list");
                                    	Z.loadSelect(contentDictionary.days);
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                    	
                                    	if(u.answerValue != undefined) {
                                    		for(var p = 0; p < M[0].options.length; p++) {
                                    			if(M[0].options[p].value == u.answerValue.month) {
                                    				M[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		for(var p = 0; p < Z[0].options.length; p++) {
                                    			if(Z[0].options[p].value == u.answerValue.day) {
                                    				Z[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    	}
                                    	
                                    	var t = 0;
                                    	a.filter('a').click(function (e) {
                                    		t++;
                                    		jQuery('body').unbind('click').click(function() {
                                    			t++;
                                    			if(t == 1) {
                                    				jQuery('body').unbind('click');
                                    				// Send request
                                    				//alert("R" + "________" + a.find(".months-list").val() + "____" + a.find(".days-list").val())
                                    				var m = {
                                                        controlId: F,
                                                        controlParentTypeId: u.parentTypeId,
                                                        controlParentId: u.parentId,
                                                        controlTypeId: u.controlTypeId,
                                                        inputTypeId: u.inputTypeId,
                                                        controlIndex : I.controlIndex,
                                                        controlContent: u.content,
                                                        sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                        sheetIndex: survey.sheets.lastSelected,
                                                        answerText: { month : M[0].options[M[0].selectedIndex].text , day : Z[0].options[Z[0].selectedIndex].text },
                                                        answerValue: { month : M.val() , day : Z.val() }
                                                    };
                                                	//createResponse(responseType.control, true, m)
													createResponse({
														responseTypeId : responseType.control,
														async : true,
														responseData : m
													});
                                    			}
                                    			t = 0;
                                    		});
                                    		
                                    	});
                                    }
                                    
                                    break
                                }
                            case 1:
                                {
                                	// MMM / DD / YYYY
                                	/*
                            		var a = $("<div class=\"row-desc\">" +
                                			"<div class=\"cell-desc-month\">" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.yearTitle != null ? u.yearTitle : contentDictionary.titles.title_Year) + "</div>" +
                                		"</div>" + 
                                		"<a class=\"row filtered\">" +
                                		"<div class=\"cell\"><select name=\"" + F + "\" class=\"months-list\" />&nbsp;/</div>" +
                                		"<div class=\"cell\"><select name=\"" + F + "\" class=\"days-list\" />&nbsp;/</div>" +
                                		"<div class=\"cell\"><input name=\"" + F + "\" type=\"text\" maxlength=\"4\" class=\"year-field text-field\" /></div>" +
                                		"</a>").appendTo(g);
                                    */
                            	
                                	var a = $("<li class=\"row-desc\">" +
                                			"<ul class=\"list-date\">" +
                            					"<li>" +
                            						"<div>" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                            						"<div><select name=\"" + F + "\" class=\"months-list\" /></div>" +
                            					"</li>" +
                            					"<li>" +
                            						"<div>" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                            						"<div><select name=\"" + F + "\" class=\"days-list\" /></div>" +
                            					"</li>" +
                            					"<li>" +
                        							"<div>" + (u.yearTitle != null ? u.yearTitle : contentDictionary.titles.title_Year) + "</div>" +
                        							"<div><input name=\"" + F + "\" type=\"text\" maxlength=\"4\" class=\"year-field text-field\" /></div>" +
                        						"</li>" +
                            				"</ul>" +
                            			"</li>").appendTo(g);
                                	
                                	
                                	
                                	var M = a.find(".months-list");
                                    	M.loadSelect(contentDictionary.months);
                                    var Z = a.find(".days-list");
                                    	Z.loadSelect(contentDictionary.days);
                                    var Y = a.find('.year-field');
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                    	
                                    	if(u.answerValue != undefined) {
                                    		for(var p = 0; p < M[0].options.length; p++) {
                                    			if(M[0].options[p].value == u.answerValue.month) {
                                    				M[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		for(var p = 0; p < Z[0].options.length; p++) {
                                    			if(Z[0].options[p].value == u.answerValue.day) {
                                    				Z[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		Y.val(u.answerValue.year);
                                    	}
                                    	
                                    	var t = 0;
                                    	a.filter('a').click(function (e) {
                                    		t++;
                                    		jQuery('body').unbind('click').click(function() {
                                    			t++;
                                    			if(t == 1) {
                                    				jQuery('body').unbind('click');
                                    				
                                    				var m = {
                                                        controlId: F,
                                                        controlParentTypeId: u.parentTypeId,
                                                        controlParentId: u.parentId,
                                                        controlTypeId: u.controlTypeId,
                                                        inputTypeId: u.inputTypeId,
                                                        controlIndex : I.controlIndex,
                                                        controlContent: u.content,
                                                        sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                        sheetIndex: survey.sheets.lastSelected,
                                                        answerText: { month : M[0].options[M[0].selectedIndex].text , day : Z[0].options[Z[0].selectedIndex].text, year : Y.val() },
                                                        answerValue: { month : M.val() , day : Z.val(), year : Y.val() }
                                                    };
                                                	//createResponse(responseType.control, true, m)
													createResponse({
														responseTypeId : responseType.control,
														async : true,
														responseData : m
													});
                                    			}
                                    			t = 0;
                                    		});
                                    		
                                    	});
                                    }
                                    
                                    break
                                }
                            case 2:
                                {
                                    // MMM / DD / YYYY HH:MM
                            		/*
                                	var a = $("<div class=\"row-desc\">" +
                                			"<div class=\"cell-desc-month\">" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.yearTitle != null ? u.yearTitle : contentDictionary.titles.title_Year) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.hoursTitle != null ? u.hoursTitle : contentDictionary.titles.title_Hours) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.minutesTitle != null ? u.minutesTitle : contentDictionary.titles.title_Minutes) + "</div>" +
                                		"</div>" + 
                                		"<a class=\"row filtered\">" +
                                			"<div class=\"cell\"><select name=\"" + F + "\" class=\"months-list\" />&nbsp;/</div>" +
                                			"<div class=\"cell\"><select name=\"" + F + "\" class=\"days-list\" />&nbsp;/</div>" +
                                			"<div class=\"cell\" ><input name=\"" + F + "\" type=\"text\" maxlength=\"4\" class=\"year-field text-field\" /></div>" +
                                			"<div class=\"cell\" ><select name=\"" + F + "\" class=\"hours-list\" />&nbsp;:</div>" +
                                			"<div class=\"cell\" ><select name=\"" + F + "\" class=\"minutes-list\" /></div></a>").appendTo(g);
                                    */
                                	
                                	var a = $("<li class=\"row-desc\">" +
                                			"<ul class=\"list-date\">" +
                            					"<li>" +
                            						"<div>" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                            						"<div><select name=\"" + F + "\" class=\"months-list\" /></div>" +
                            					"</li>" +
                            					"<li>" +
                            						"<div>" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                            						"<div><select name=\"" + F + "\" class=\"days-list\" /></div>" +
                            					"</li>" +
                            					"<li>" +
                        							"<div>" + (u.yearTitle != null ? u.yearTitle : contentDictionary.titles.title_Year) + "</div>" +
                        							"<div><input name=\"" + F + "\" type=\"text\" maxlength=\"4\" class=\"year-field text-field\" /></div>" +
                        						"</li>" +
                        					"</ul>" +
                        					"<ul class=\"list-time\">" +
                        						"<li>" +
                    								"<div>" + (u.hoursTitle != null ? u.hoursTitle : contentDictionary.titles.title_Hours) + "</div>" +
                    								"<div><select name=\"" + F + "\" class=\"hours-list\" /></div>" +
                    							"</li>" +
                    							"<li>" +
                									"<div>" + (u.minutesTitle != null ? u.minutesTitle : contentDictionary.titles.title_Minutes) + "</div>" +
                									"<div><select name=\"" + F + "\" class=\"minutes-list\" /></div>" +
                								"</li>" +
                            				"</ul>" +
                            			"</li>").appendTo(g);
                                	
                                	
                                	var M = a.find(".months-list");
                                    	M.loadSelect(contentDictionary.months);
                                    var Z = a.find(".days-list");
                                    	Z.loadSelect(contentDictionary.days);
                                    var Y = a.find('.year-field');
                                    var H = a.find(".hours-list");
                                    	H.loadSelect(contentDictionary.hours);
                                    var N = a.find(".minutes-list");
                                    	N.loadSelect(contentDictionary.minutes);
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                    	
                                    	if(u.answerValue != undefined) {
                                    		for(var p = 0; p < M[0].options.length; p++) {
                                    			if(M[0].options[p].value == u.answerValue.month) {
                                    				M[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		for(var p = 0; p < Z[0].options.length; p++) {
                                    			if(Z[0].options[p].value == u.answerValue.day) {
                                    				Z[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		Y.val(u.answerValue.year);
                                    		
                                    		for(var p = 0; p < H[0].options.length; p++) {
                                    			if(H[0].options[p].value == u.answerValue.hours) {
                                    				H[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		for(var p = 0; p < N[0].options.length; p++) {
                                    			if(N[0].options[p].value == u.answerValue.minutes) {
                                    				N[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    	}
                                    	
                                    	var t = 0;
                                    	a.filter('a').click(function (e) {
                                    		t++;
                                    		jQuery('body').unbind('click').click(function() {
                                    			t++;
                                    			if(t == 1) {
                                    				jQuery('body').unbind('click');

                                    				var m = {
                                                        controlId: F,
                                                        controlParentTypeId: u.parentTypeId,
                                                        controlParentId: u.parentId,
                                                        controlTypeId: u.controlTypeId,
                                                        inputTypeId: u.inputTypeId,
                                                        controlIndex : I.controlIndex,
                                                        controlContent: u.content,
                                                        sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                        sheetIndex: survey.sheets.lastSelected,
                                                        answerText: { month : M[0].options[M[0].selectedIndex].text , day : Z[0].options[Z[0].selectedIndex].text, year : Y.val(), hours : H[0].options[H[0].selectedIndex].text, minutes : N[0].options[N[0].selectedIndex].text },
                                                        answerValue: { month : M.val() , day : Z.val(), year : Y.val(), hours : H.val(), minutes : N.val() }
                                                    };
                                                	//createResponse(responseType.control, true, m)
													createResponse({
														responseTypeId : responseType.control,
														async : true,
														responseData : m
													});
                                    			}
                                    			t = 0;
                                    		});
                                    		
                                    	});
                                    }
                                    
                                    break
                                }
                            case 3:
                                {
                                	// DD / MMM
                                	
                            		/*
                            		var a = $("<div class=\"row-desc\">" +
                            				"<div class=\"cell-desc-month\">" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                            				"<div class=\"cell-desc-month\">" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                            			"</div>" + 
                            			"<a class=\"row filtered\">" +
                            				"<div class=\"cell\"><select name=\"" + F + "\" class=\"days-list\" />&nbsp;/</div>" +
                            				"<div class=\"cell\" ><select name=\"" + F + "\" class=\"months-list\" /></div>" +
                            			"</a>").appendTo(g);
                                    */
                                	
                                	var a = $("<li class=\"row-desc\">" +
                                			"<ul class=\"list-date\">" +
                            					"<li>" +
                            						"<div>" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                            						"<div><select name=\"" + F + "\" class=\"days-list\" /></div>" +
                            					"</li>" +
                            					"<li>" +
                        							"<div>" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                        							"<div><select name=\"" + F + "\" class=\"months-list\" /></div>" +
                        						"</li>" +
                        					"</ul>" +
                            			"</li>").appendTo(g);
                                	
                                	
                                	
                                	var Z = a.find(".days-list");
                                    	Z.loadSelect(contentDictionary.days);
                                    var M = a.find(".months-list");
                                    	M.loadSelect(contentDictionary.months);
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                    	
                                    	if(u.answerValue != undefined) {
                                    		for(var p = 0; p < Z[0].options.length; p++) {
                                    			if(Z[0].options[p].value == u.answerValue.day) {
                                    				Z[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		for(var p = 0; p < M[0].options.length; p++) {
                                    			if(M[0].options[p].value == u.answerValue.month) {
                                    				M[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    	}
                                    	
                                    	var t = 0;
                                    	a.filter('a').click(function (e) {
                                    		t++;
                                    		jQuery('body').unbind('click').click(function() {
                                    			t++;
                                    			if(t == 1) {
                                    				jQuery('body').unbind('click');
                                    				
                                    				var m = {
                                                        controlId: F,
                                                        controlParentTypeId: u.parentTypeId,
                                                        controlParentId: u.parentId,
                                                        controlTypeId: u.controlTypeId,
                                                        inputTypeId: u.inputTypeId,
                                                        controlIndex : I.controlIndex,
                                                        controlContent: u.content,
                                                        sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                        sheetIndex: survey.sheets.lastSelected,
                                                        answerText: { month : M[0].options[M[0].selectedIndex].text , day : Z[0].options[Z[0].selectedIndex].text },
                                                        answerValue: { month : M.val() , day : Z.val() }
                                                    };
                                                	//createResponse(responseType.control, true, m)
													createResponse({
														responseTypeId : responseType.control,
														async : true,
														responseData : m
													});
                                    			}
                                    			t = 0;
                                    		});
                                    		
                                    	});
                                    }
                                    
                                    break
                                }
                            case 4:
                                {
                                    // DD / MMM / YYYY
                            		/*
                                	var a = $("<div class=\"row-desc\">" +
                                			"<div class=\"cell-desc-month\">" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.yearTitle != null ? u.yearTitle : contentDictionary.titles.title_Year) + "</div>" +
                                		"</div>" + 
                                		"<a class=\"row filtered\">" +
                                			"<div class=\"cell\"><select name=\"" + F + "\" class=\"days-list\" />&nbsp;/</div>" +
                                			"<div class=\"cell\" ><select name=\"" + F + "\" class=\"months-list\" />&nbsp;/</div>" +
                                			"<div class=\"cell\" ><input name=\"" + F + "\" type=\"text\" maxlength=\"4\" class=\"year-field text-field\" /></div>" +
                                		"</a>").appendTo(g);
                                    */
                                	
                                	
                                	var a = $("<li class=\"row-desc\">" +
                                			"<ul class=\"list-date\">" +
                            					"<li>" +
                            						"<div>" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                            						"<div><select name=\"" + F + "\" class=\"days-list\" /></div>" +
                            					"</li>" +
                            					"<li>" +
                        							"<div>" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                        							"<div><select name=\"" + F + "\" class=\"months-list\" /></div>" +
                        						"</li>" +
                            					"<li>" +
                        							"<div>" + (u.yearTitle != null ? u.yearTitle : contentDictionary.titles.title_Year) + "</div>" +
                        							"<div><input name=\"" + F + "\" type=\"text\" maxlength=\"4\" class=\"year-field text-field\" /></div>" +
                        						"</li>" +
                        					"</ul>" +
                            			"</li>").appendTo(g);
                                	
                                	
                                	var Z = a.find(".days-list");
                                    	Z.loadSelect(contentDictionary.days);
                                    var M = a.find(".months-list");
                                    	M.loadSelect(contentDictionary.months);
                                    var Y = a.find('.year-field');
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                    	
                                    	if(u.answerValue != undefined) {
                                    		for(var p = 0; p < Z[0].options.length; p++) {
                                    			if(Z[0].options[p].value == u.answerValue.day) {
                                    				Z[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		for(var p = 0; p < M[0].options.length; p++) {
                                    			if(M[0].options[p].value == u.answerValue.month) {
                                    				M[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		Y.val(u.answerValue.year);
                                    	}
                                    	
                                    	var t = 0;
                                    	a.filter('a').click(function (e) {
                                    		t++;
                                    		jQuery('body').unbind('click').click(function() {
                                    			t++;
                                    			if(t == 1) {
                                    				jQuery('body').unbind('click');
                                    				
                                    				var m = {
                                                        controlId: F,
                                                        controlParentTypeId: u.parentTypeId,
                                                        controlParentId: u.parentId,
                                                        controlTypeId: u.controlTypeId,
                                                        inputTypeId: u.inputTypeId,
                                                        controlIndex : I.controlIndex,
                                                        controlContent: u.content,
                                                        sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                        sheetIndex: survey.sheets.lastSelected,
                                                        answerText: { month : M[0].options[M[0].selectedIndex].text , day : Z[0].options[Z[0].selectedIndex].text, year : Y.val() },
                                                        answerValue: { month : M.val() , day : Z.val(), year : Y.val() }
                                                    };
                                                	//createResponse(responseType.control, true, m)
													createResponse({
														responseTypeId : responseType.control,
														async : true,
														responseData : m
													});
                                    			}
                                    			t = 0;
                                    		});
                                    		
                                    	});
                                    }
                                    
                                    break
                                }
                            case 5:
                                {
                                    
                                	// DD / MMM / YYYY HH:MM
                            		/*
                                	var a = $("<div class=\"row-desc\">" +
                                			"<div class=\"cell-desc-month\">" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.yearTitle != null ? u.yearTitle : contentDictionary.titles.title_Year) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.hoursTitle != null ? u.hoursTitle : contentDictionary.titles.title_Hours) + "</div>" +
                                			"<div class=\"cell-desc-month\">" + (u.minutesTitle != null ? u.minutesTitle : contentDictionary.titles.title_Minutes) + "</div>" +
                                		"</div>" + 
                                		"<a class=\"row filtered\">" +
                                			"<div class=\"cell\"><select name=\"" + F + "\" class=\"days-list\" />&nbsp;/</div>" +
                                			"<div class=\"cell\" ><select name=\"" + F + "\" class=\"months-list\" />&nbsp;/</div>" +
                                			"<div class=\"cell\" ><input name=\"" + F + "\" type=\"text\" maxlength=\"4\" class=\"year-field text-field\" /></div>" +
                                			"<div class=\"cell\" ><select name=\"" + F + "\" class=\"hours-list\" />&nbsp;:</div>" +
                                			"<div class=\"cell\" ><select name=\"" + F + "\" class=\"minutes-list\" /></div>" +
                                		"</a>").appendTo(g);
                                    */
                                	
                                	var a = $("<li class=\"row-desc\">" +
                                			"<ul class=\"list-date\">" +
                            					"<li>" +
                            						"<div>" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                            						"<div><select name=\"" + F + "\" class=\"days-list\" /></div>" +
                            					"</li>" +
                            					"<li>" +
                        							"<div>" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                        							"<div><select name=\"" + F + "\" class=\"months-list\" /></div>" +
                        						"</li>" +
                            					"<li>" +
                        							"<div>" + (u.yearTitle != null ? u.yearTitle : contentDictionary.titles.title_Year) + "</div>" +
                        							"<div><input name=\"" + F + "\" type=\"text\" maxlength=\"4\" class=\"year-field text-field\" /></div>" +
                        						"</li>" +
                        					"</ul>" +
                        					"<ul class=\"list-time\">" +
                        						"<li>" +
                    								"<div>" + (u.hoursTitle != null ? u.hoursTitle : contentDictionary.titles.title_Hours) + "</div>" +
                    								"<div><select name=\"" + F + "\" class=\"hours-list\" /></div>" +
                    							"</li>" +
                    							"<li>" +
                									"<div>" + (u.minutesTitle != null ? u.minutesTitle : contentDictionary.titles.title_Minutes) + "</div>" +
                									"<div><select name=\"" + F + "\" class=\"minutes-list\" /></div>" +
                								"</li>" +
                            				"</ul>" +
                            			"</li>").appendTo(g);
                                	
                                	
                                	var Z = a.find(".days-list");
                                    	Z.loadSelect(contentDictionary.days);
                                    var M = a.find(".months-list");
                                    	M.loadSelect(contentDictionary.months);
                                    var Y = a.find('.year-field');
                                    var H = a.find(".hours-list");
                                    	H.loadSelect(contentDictionary.hours);
                                    var N = a.find(".minutes-list");
                                    	N.loadSelect(contentDictionary.minutes);
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                    	
                                    	if(u.answerValue != undefined) {
                                    		for(var p = 0; p < Z[0].options.length; p++) {
                                    			if(Z[0].options[p].value == u.answerValue.day) {
                                    				Z[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		for(var p = 0; p < M[0].options.length; p++) {
                                    			if(M[0].options[p].value == u.answerValue.month) {
                                    				M[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		Y.val(u.answerValue.year);
                                    		
                                    		for(var p = 0; p < H[0].options.length; p++) {
                                    			if(H[0].options[p].value == u.answerValue.hours) {
                                    				H[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		for(var p = 0; p < N[0].options.length; p++) {
                                    			if(N[0].options[p].value == u.answerValue.minutes) {
                                    				N[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    	}
                                    	
                                    	var t = 0;
                                    	a.filter('a').click(function (e) {
                                    		t++;
                                    		jQuery('body').unbind('click').click(function() {
                                    			t++;
                                    			if(t == 1) {
                                    				jQuery('body').unbind('click');
                                    				
                                    				var m = {
                                                        controlId: F,
                                                        controlParentTypeId: u.parentTypeId,
                                                        controlParentId: u.parentId,
                                                        controlTypeId: u.controlTypeId,
                                                        inputTypeId: u.inputTypeId,
                                                        controlIndex : I.controlIndex,
                                                        controlContent: u.content,
                                                        sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                        sheetIndex: survey.sheets.lastSelected,
                                                        answerText: { month : M[0].options[M[0].selectedIndex].text , day : Z[0].options[Z[0].selectedIndex].text, year : Y.val(), hours : H[0].options[H[0].selectedIndex].text, minutes : N[0].options[N[0].selectedIndex].text },
                                                        answerValue: { month : M.val() , day : Z.val(), year : Y.val(), hours : H.val(), minutes : N.val() }
                                                    };
                                                	//createResponse(responseType.control, true, m)
													createResponse({
														responseTypeId : responseType.control,
														async : true,
														responseData : m
													});
                                    			}
                                    			t = 0;
                                    		});
                                    		
                                    	});
                                    }
                                    
                                    break
                                }
                            case 6:
                                {
                                    // MMM
                            		/*
                                	var a = $("<div class=\"row-desc\">" +
                                			"<div class=\"cell-desc-month\">" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                                		"</div>" + 
                                		"<div class=\"row\"><div class=\"cell\"><select name=\"" + F + "\" class=\"months-list\" /></div></div>").appendTo(g);
                                    */
                                	
                                	
                                	var a = $("<li class=\"row-desc\">" +
                                			"<ul class=\"list-date\">" +
                            					"<li>" +
                        							"<div>" + (u.monthTitle != null ? u.monthTitle : contentDictionary.titles.title_Month) + "</div>" +
                        							"<div><select name=\"" + F + "\" class=\"months-list\" /></div>" +
                        						"</li>" +
                        					"</ul>" +
                            			"</li>").appendTo(g);
                                	
                                	
                                	
                                	var M = a.find(".months-list");
                                    	M.loadSelect(contentDictionary.months);
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                    	
                                    	if(u.answerValue != undefined) {
                                    		for(var p = 0; p < M[0].options.length; p++) {
                                    			if(M[0].options[p].value == u.answerValue.month) {
                                    				M[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    	}
                                    	
                                        var f = a.find('select');
                                        f.change(function () {
                                        	var m = {
                                                controlId: F,
                                                controlParentTypeId: u.parentTypeId,
                                                controlParentId: u.parentId,
                                                controlTypeId: u.controlTypeId,
                                                inputTypeId: u.inputTypeId,
                                                controlIndex : I.controlIndex,
                                                controlContent: u.content,
                                                sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                sheetIndex: survey.sheets.lastSelected,
                                                answerText: { month : $(this)[0].options[$(this)[0].selectedIndex].text },
                                                answerValue: { month : $(this).val() }
                                            };
                                        	//createResponse(responseType.control, true, m)
											createResponse({
												responseTypeId : responseType.control,
												async : true,
												responseData : m
											});
                                        });
                                    }
                                    
                                    break
                                }
                            case 7:
                                {
                                    // DD
                                	
                            		/*
                            		var a = $("<div class=\"row-desc\"><div class=\"cell-desc-month\">" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div></div>" + "<div class=\"row\"><div class=\"cell\"><select name=\"" + F + "\" class=\"days-list\" /></div></div>").appendTo(g);
                                    */
                                	
                                	var a = $("<li class=\"row-desc\">" +
                                			"<ul class=\"list-date\">" +
                            					"<li>" +
                            						"<div>" + (u.dayTitle != null ? u.dayTitle : contentDictionary.titles.title_Day) + "</div>" +
                            						"<div><select name=\"" + F + "\" class=\"days-list\" /></div>" +
                            					"</li>" +
                        					"</ul>" +
                            			"</li>").appendTo(g);
                                	
                                	
                                	var Z = a.find(".days-list");
                                    	Z.loadSelect(contentDictionary.days);
                                    	
                                    if (guidTypeId == 1 && modeId == 1) {
                                    	
                                    	if(u.answerValue != undefined) {
	                                    	for(var p = 0; p < Z[0].options.length; p++) {
	                                			if(Z[0].options[p].value == u.answerValue.day) {
	                                				Z[0].selectedIndex = p;
	                                				break;
	                                			}
	                                		}
                                    	}
                                    	
                                        var f = a.find('select');
                                        f.change(function () {
                                        	var m = {
                                                controlId: F,
                                                controlParentTypeId: u.parentTypeId,
                                                controlParentId: u.parentId,
                                                controlTypeId: u.controlTypeId,
                                                inputTypeId: u.inputTypeId,
                                                controlIndex : I.controlIndex,
                                                controlContent: u.content,
                                                sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                sheetIndex: survey.sheets.lastSelected,
                                                answerText: { day : $(this)[0].options[$(this)[0].selectedIndex].text },
                                                answerValue: { day : $(this).val() }
                                            };
                                        	//createResponse(responseType.control, true, m)
											createResponse({
												responseTypeId : responseType.control,
												async : true,
												responseData : m
											});
                                        });
                                    }
                                    
                                    break
                                }
                            case 8:
                                {
                                    // YYYY
                                	/*
                            		var a = $("<div class=\"row-desc\"><div class=\"cell-desc-month\">" + (u.yearTitle != null ? u.yearTitle : contentDictionary.titles.title_Year) + "</div></div>" + "<div class=\"row\"><div class=\"cell\"><input name=\"" + F + "\" type=\"text\" maxlength=\"4\" class=\"year-field text-field\" /></div></div>").appendTo(g);
                                	*/
                                	
                                	var a = $("<li class=\"row-desc\">" +
                                			"<ul class=\"list-date\">" +
                            					"<li>" +
                        							"<div>" + (u.yearTitle != null ? u.yearTitle : contentDictionary.titles.title_Year) + "</div>" +
                        							"<div><input name=\"" + F + "\" type=\"text\" maxlength=\"4\" class=\"year-field text-field\" /></div>" +
                        						"</li>" +
                        					"</ul>" +
                            			"</li>").appendTo(g);
                                	
                                	
                                	
                                	var Y = a.find('.year-field');
                                	
                                    if (guidTypeId == 1 && modeId == 1) {
                                		
                                        if(u.answerValue != undefined) {
                                    		Y.val(u.answerValue.year);
                                    	}
                                        
                                        Y.focusout(function () {
	                                        var m = {
	                                            controlId: F,
	                                            controlParentTypeId: u.parentTypeId,
	                                            controlParentId: u.parentId,
	                                            controlTypeId: u.controlTypeId,
	                                            inputTypeId: u.inputTypeId,
	                                            controlIndex : I.controlIndex,
	                                            controlContent: u.content,
	                                            sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
	                                            sheetIndex: survey.sheets.lastSelected,
	                                            answerValue: { year : $(this).val() },
	                                            answerValue: { year : $(this).val() }
	                                        };
	                                        //createResponse(responseType.control, true, m)
											createResponse({
												responseTypeId : responseType.control,
												async : true,
												responseData : m
											});
	                                    });
                                	}
                                    
                                    break
                                }
                            case 9:
                                {
                                    
                                	// HH : MM
                            		
                            		/*
                                	var a = $("<div class=\"row-desc\"><div class=\"cell-desc-month\">" + (u.hoursTitle != null ? u.hoursTitle : contentDictionary.titles.title_Hours) + "</div><div class=\"cell-desc-month\">" + (u.minutesTitle != null ? u.minutesTitle : contentDictionary.titles.title_Minutes) + "</div></div>" + "<a class=\"row filtered\"><div class=\"cell\"><select name=\"" + F + "\" class=\"hours-list\" />&nbsp;:</div><div class=\"cell\" ><select name=\"" + F + "\" class=\"minutes-list\" /></div></a>").appendTo(g);
                                    */
                                	
                                	var a = $("<li class=\"row-desc\">" +
                                			"<ul class=\"list-time\">" +
                        						"<li>" +
                    								"<div>" + (u.hoursTitle != null ? u.hoursTitle : contentDictionary.titles.title_Hours) + "</div>" +
                    								"<div><select name=\"" + F + "\" class=\"hours-list\" /></div>" +
                    							"</li>" +
                    							"<li>" +
                									"<div>" + (u.minutesTitle != null ? u.minutesTitle : contentDictionary.titles.title_Minutes) + "</div>" +
                									"<div><select name=\"" + F + "\" class=\"minutes-list\" /></div>" +
                								"</li>" +
                            				"</ul>" +
                            			"</li>").appendTo(g);
                                	
                                	
                                	var H = a.find(".hours-list");
                                    	H.loadSelect(contentDictionary.hours);
                                    var N = a.find(".minutes-list");
                                    	N.loadSelect(contentDictionary.minutes);
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                    	
                                    	if(u.answerValue != undefined) {
                                    		for(var p = 0; p < H[0].options.length; p++) {
                                    			if(H[0].options[p].value == u.answerValue.hours) {
                                    				H[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    		
                                    		for(var p = 0; p < N[0].options.length; p++) {
                                    			if(N[0].options[p].value == u.answerValue.minutes) {
                                    				N[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    	}
                                    	
                                    	var t = 0;
                                    	a.filter('a').click(function (e) {
                                    		t++;
                                    		jQuery('body').unbind('click').click(function() {
                                    			t++;
                                    			if(t == 1) {
                                    				jQuery('body').unbind('click');
                                    				
                                    				var m = {
                                                        controlId: F,
                                                        controlParentTypeId: u.parentTypeId,
                                                        controlParentId: u.parentId,
                                                        controlTypeId: u.controlTypeId,
                                                        inputTypeId: u.inputTypeId,
                                                        controlIndex : I.controlIndex,
                                                        controlContent: u.content,
                                                        sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                        sheetIndex: survey.sheets.lastSelected,
                                                        answerText: { hours : H[0].options[H[0].selectedIndex].text , minutes : N[0].options[N[0].selectedIndex].text },
                                                        answerValue: { hours : H.val() , minutes : N.val() }
                                                    };
                                                	//createResponse(responseType.control, true, m)
													createResponse({
														responseTypeId : responseType.control,
														async : true,
														responseData : m
													});
                                    			}
                                    			t = 0;
                                    		});
                                    		
                                    	});
                                    }
                                    
                                    break
                                }
                            case 10:
                                {
                                    // TIMEZONE
                            		
                            		/*
                                	var a = $("<div class=\"row-desc\"><div class=\"cell-desc\">" + (u.timeZoneTitle != null ? u.timeZoneTitle : contentDictionary.titles.title_TimeZone) + "</div></div>" + "<div class=\"row\"><div class=\"cell\"><select name=\"" + F + "\" class=\"timezones-list\" /></div></div>").appendTo(g);
                                    */
                                	
                                	var a = $("<li class=\"row-desc\">" +
                                			"<ul class=\"list-date\">" +
                            					"<li>" +
                            						"<div>" + (u.timeZoneTitle != null ? u.timeZoneTitle : contentDictionary.titles.title_TimeZone) + "</div>" +
                            						"<div><select name=\"" + F + "\" class=\"timezones-list\" /></div>" +
                            					"</li>" +
                        					"</ul>" +
                            			"</li>").appendTo(g);
                                	
                                	
                                	
                                	var T = a.find(".timezones-list");
                                    	T.loadSelect(contentDictionary.timeZones);
                                    	
                                    if (guidTypeId == 1 && modeId == 1) {
                                    	
                                    	if(u.answerValue != undefined) {
                                    		for(var p = 0; p < T[0].options.length; p++) {
                                    			if(T[0].options[p].value == u.answerValue.timeZone) {
                                    				T[0].selectedIndex = p;
                                    				break;
                                    			}
                                    		}
                                    	}
                                    	
                                        var f = a.find('select');
                                        f.change(function () {
                                            var m = {
                                                controlId: F,
                                                controlParentTypeId: u.parentTypeId,
                                                controlParentId: u.parentId,
                                                controlTypeId: u.controlTypeId,
                                                inputTypeId: u.inputTypeId,
                                                controlIndex : I.controlIndex,
                                                controlContent: u.content,
                                                sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                sheetIndex: survey.sheets.lastSelected,
                                                answerText: { timeZone : $(this)[0].options[$(this)[0].selectedIndex].text },
                                                answerValue: { timeZone : $(this).val() }
                                            };
                                            //createResponse(responseType.control, true, m)
											createResponse({
												responseTypeId : responseType.control,
												async : true,
												responseData : m
											});
                                        });
                                    }
                                    
                                    break
                                }
                            }
                            c.appendTo(v);
                            
                            if(link) {
                            	
                            	// image
                            	if(u.linkTypeId == 1) {
                            		c.find('.container-embed-code')
                            			.html("<img src=" + u.link + " />")
                            			.show();
                            	}
                            	
                            	// embed code
                            	if(u.linkTypeId == 2) {
	                            	c.find('.container-embed-code')
	                        			.html(u.link)
	                        			.show();
                            	}
                            }
                            
                            
                            break
                        }
                    }
                };
                G();
                break
            }
        case 7:
            {
                var c = E;
                var link = null;
                var g = c.find('.container-control-includes');
                var otherContainer = c.find(".container-control-other");
                var F = I.controlId;
                var G = function () {
                    for (var x = 0; x < survey.controls.list.length; x++) {
                        if (survey.controls.list[x].controlId == F) {
                        	
                        	// return i
                            I.complete(1);
                        	
                        	var u = survey.controls.list[x];
                            c.find('.header-control-content').html(u.content.replace(/\n/g, "<br/>"));
                            if (u.isMandatory) {
                                c.find('.label-control-mandatory').show();
                                
                                // mandatory validation
                                validateElements.elements.push({
                            		name : String(F),
                            		status : c.find('.label-status'),
                            		rules : [
                            		         { method : 'required', message : 'This question is required.' }
                 					]
                            	});
                            	
                            }
                            
                            if(u.link) {
                            	link = u.link;
                            }
                            
                            if (u.isEnableNote) {
                            	if(u.note != null) {
                            		c.find('.label-control-note').html(u.note.replace(/\n/gi, "<br/>").replace(/%0A/gi, "<br/>")).show()
                            	}
                            }
                            c.appendTo(v);
                            
                            if(link) {
                            	
                            	// image
                            	if(u.linkTypeId == 1) {
                            		c.find('.container-embed-code')
                            			.html("<img src=" + u.link + " />")
                            			.show();
                            	}
                            	
                            	// embed code
                            	if(u.linkTypeId == 2) {
	                            	c.find('.container-embed-code')
	                        			.html(u.link)
	                        			.show();
                            	}
                            }
                            
                            
                            break
                        }
                    }
                };
                G();
                break
            }
        case 8:
            {
                var c = E;
                var link = null;
                var g = c.find('.container-control-includes');
                var otherContainer = c.find(".container-control-other");
                var F = I.controlId;
                var G = function () {
                    for (var x = 0; x < survey.controls.list.length; x++) {
                        if (survey.controls.list[x].controlId == F) {
                        	
                        	// return i
                            I.complete(1);
                        	
                        	var u = survey.controls.list[x];
                            c.find('.header-control-content').html(u.content.replace(/\n/g, "<br/>"));
                            if (u.isMandatory) {
                                c.find('.label-control-mandatory').show();
                                
                                // mandatory validation
                                validateElements.elements.push({
                            		name : String(F),
                            		status : c.find('.label-status'),
                            		rules : [
                            		         { method : 'required', message : 'This question is required.' }
                 					]
                            	});
                            	
                            }
                            
                            if(u.link) {
                            	link = u.link;
                            }
                            
                            if (u.isEnableNote) {
                            	if(u.note != null) { 
                            		c.find('.label-control-note').html(u.note.replace(/\n/gi, "<br/>").replace(/%0A/gi, "<br/>")).show()
                            	}
                            }
                            c.appendTo(v);
                            
                            if(link) {
                            	
                            	// image
                            	if(u.linkTypeId == 1) {
                            		c.find('.container-embed-code')
                            			.html("<img src=" + u.link + " />")
                            			.show();
                            	}
                            	
                            	// embed code
                            	if(u.linkTypeId == 2) {
	                            	c.find('.container-embed-code')
	                        			.html(u.link)
	                        			.show();
                            	}
                            }

                            
                            break
                        }
                    }
                };
                G();
                break
            }
        case 9:
            {
                var c = E;
                var link = null;
                var g = c.find('.container-control-includes');
                var otherContainer = c.find(".container-control-other");
                var F = I.controlId;
                var G = function () {
                    for (var x = 0; x < survey.controls.list.length; x++) {
                        if (survey.controls.list[x].controlId == F) {
                        	
                        	// return i
                            I.complete(1);
                        	
                        	var u = survey.controls.list[x]; // ----------------------------------------------------------------
                            c.find('.header-control-content').html(u.content.replace(/\n/g, "<br/>"));
                            if (u.isMandatory) {
                                c.find('.label-control-mandatory').show();
                                
                                // mandatory validation
                                validateElements.elements.push({
                            		name : String(F),
                            		status : c.find('.label-status'),
                            		rules : [
                            		         { method : 'required', message : 'This question is required.' }
                 					]
                            	});
                            	
                            }
                            
                            if(u.link) {
                            	link = u.link;
                            }
                            
                            if (u.isEnableNote) {
                            	if(u.note != null) {
                            		c.find('.label-control-note').html(u.note.replace(/\n/gi, "<br/>").replace(/%0A/gi, "<br/>")).show()
                            	}
                            }
                            c.appendTo(v);
                            
                            if(link) {
                            	
                            	// image
                            	if(u.linkTypeId == 1) {
                            		c.find('.container-embed-code')
                            			.html("<img src=" + u.link + " />")
                            			.show();
                            	}
                            	
                            	// embed code
                            	if(u.linkTypeId == 2) {
	                            	c.find('.container-embed-code')
	                        			.html(u.link)
	                        			.show();
                            	}
                            }
                            
                            
                            break
                        }
                    }
                };
                G();
                break
            }
        case 10:
            {
                var c = E;
                var link = null;
                var g = c.find('.container-control-includes');
                var otherContainer = c.find(".container-control-other");
                var F = I.controlId;
                var H = [5, 7, 9, 0, 3, 4, 5, 6, 7, 8, 9, 10];
                var G = function () {
                    for (var x = 0; x < survey.controls.list.length; x++) {
                        if (survey.controls.list[x].controlId == F) {
                        	
                        	// return i
                            I.complete(1);
                        	
                        	var u = survey.controls.list[x];
                            c.find('.header-control-content').html(u.content.replace(/\n/g, "<br/>"));
                            if (u.isMandatory) {
                                c.find('.label-control-mandatory').show();
                                
                                // mandatory validation
                            	validateElements.elements.push({
                            		group : String(F),
                            		status : c.find('.label-status'),
                            		rules : [
                            		         { method : 'required', message : 'This question is required.' }
                 					]
                            	});
                            	
                            	
                            }
                            
                            if(u.link) {
                            	link = u.link;
                            }
                            
                            if (u.isEnableNote) {
                            	if(u.note != null) {
                            		c.find('.label-control-note').html(u.note.replace(/\n/gi, "<br/>").replace(/%0A/gi, "<br/>")).show()
                            	}
                            }
                            var a = $("<table cellpadding=\"0\" cellspacing=\"1\" border=\"0\" class=\"table-scale\"></table>");
                            var b = $("<tr class=\"table-scale-header\"></tr>");
                            var d = $("<tr class=\"table-scale-row\"></tr>");
                            var e = $("<td>&nbsp;</td>");
                            var f = $("<td>&nbsp;</td>");
                            if (u.fromScale != null && u.toScale != null) {
                                if (u.fromTitle != "" && u.fromTitle != null) {
                                    b.append(e);
                                    var h = $("<th>" + u.fromTitle + "</th>");
                                    d.append(h)
                                }
                                for (var y = u.fromScale; y < (H[u.toScale] + 1); y++) {
                                    var i = $("<th>" + y + "</th>");
                                    b.append(i);
                                    var j = $("<td><label><input type=\"radio\" name=\"" + F + "\" optionid=\"" + y + "\" optiontext=\"" + y + "\" value=\"" + y + "\" /></label></td>");
                                    d.append(j);
                                    
                                    if (guidTypeId == 1 && modeId == 1) {
                                        var s = j.find('input:radio');

                                        if(s.val() == u.answerValue){
                                        	s.prop('checked', true);
                                        }
                                        
                                        s.change(function () {
                                        	
                                            var a = {
                                                controlId: F,
                                                controlParentTypeId: u.parentTypeId,
                                                controlParentId: u.parentId,
                                                controlTypeId: u.controlTypeId,
                                                inputTypeId: u.inputTypeId,
                                                controlIndex : I.controlIndex,
                                                controlContent: u.content,
                                                sheetId: survey.sheets.list[survey.sheets.lastSelected].sheetId,
                                                sheetIndex: survey.sheets.lastSelected,
                                                answerValue: $(this).val()
                                            };

											createResponse({
												responseTypeId : responseType.control,
												async : true,
												responseData : a
											});
                                            
                                        });
                                    }
                                    
                                }
                                if (survey.controls.list[x].toTitle != "" && survey.controls.list[x].toTitle != null) {
                                    b.append(f);
                                    var k = $("<th>" + survey.controls.list[x].toTitle + "</th>");
                                    d.append(k)
                                }
                                a.append(b);
                                a.append(d);
                                otherContainer.append(a)
                            }
                            c.appendTo(v);
                            
                            if(link) {
                            	
                            	// image
                            	if(u.linkTypeId == 1) {
                            		c.find('.container-embed-code')
                            			.html("<img src=" + u.link + " />")
                            			.show();
                            	}
                            	
                            	// embed code
                            	if(u.linkTypeId == 2) {
	                            	c.find('.container-embed-code')
	                        			.html(u.link)
	                        			.show();
                            	}
                            }
                            
                            
                            break
                        }
                    }
                };
                G();
                break
            }
        }
    };
    
    J(I.controlTypeId)
};