(function (a) {
    if (!a.ObjectPlanet) {
        a.ObjectPlanet = {}
    }
    a.ObjectPlanet.deleteCookie = function (b, d) {
        var c = a.ObjectPlanet.getCookie(b);
        if (c != null) {
            document.cookie = b + "=" + (d ? (";path=" + d) : "") + ";expires=" + new Date(1000).toGMTString();
            document.cookie = b + "=;expires=" + new Date(1000).toGMTString()
        }
    };
    a.ObjectPlanet.url = {};
    a.ObjectPlanet.url.param = function (b, d) {
        d = d ? d : location.search;
        var f = d.slice(1).split("&");
        for (var c = 0; c < f.length; c++) {
            var e = f[c].split("=");
            if (e[0] == b) {
                return e[1]
            }
        }
        return null
    };
    a.ObjectPlanet.dateStr = function (c, e, j) {
        var b = "";
        c = !(typeof c instanceof Date) ? new Date(c) : c;
        if (j == true) {
            b = a.ObjectPlanet.dateStr.DAYS[c.getDay()] + " "
        }
        var f = c.getMonth() < 9 ? "0" + (c.getMonth() + 1) : (c.getMonth() + 1);
        var g = c.getDate() < 10 ? "0" + c.getDate() : c.getDate();
        var h = c.getHours() < 10 ? "0" + c.getHours() : c.getHours();
        var d = c.getMinutes() < 10 ? "0" + c.getMinutes() : c.getMinutes();
        var i = c.getSeconds() < 10 ? "0" + c.getSeconds() : c.getSeconds();
        return b + c.getFullYear() + "-" + f + "-" + g + " " + h + ":" + d + (e != false ? (":" + i) : "")
    };
    a.ObjectPlanet.dateStr.DAYS = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
    a.ObjectPlanet.dayStr = function (d) {
        d = !(typeof d instanceof Date) ? new Date(d) : d;
        var e = d.getMonth() < 9 ? "0" + (d.getMonth() + 1) : (d.getMonth() + 1);
        var c = d.getDate() < 10 ? "0" + d.getDate() : d.getDate();
        var b = d.getHours() < 10 ? "0" + d.getHours() : d.getHours();
        return d.getFullYear() + "-" + e + "-" + c
    };
    a.ObjectPlanet.daysInMonth = function (c) {
        var b = ((c.getFullYear() % 4) == 0 && ((c.getFullYear() % 100) != 0 || (c.getFullYear() % 400) == 0));
        return [31, (b ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][c.getMonth()]
    };
    a.ObjectPlanet.addMonths = function (c, b) {
        var f = new Date(c);
        var e = f.getDate();
        f.setDate(15);
        f.setMonth(c.getMonth() + b);
        f.setDate(Math.min(e, a.ObjectPlanet.daysInMonth(f)));
        return f
    };
    a.ObjectPlanet.isEmpty = function (b) {
        for (var c in b) {
            return false
        }
        return true
    };
    a.ObjectPlanet.lineCount = function (d) {
        var c = 1;
        for (var b = 0; d != null && b < d.length; b++) {
            c += (d.charAt(b) == "\n" ? 1 : 0)
        }
        return c
    };
    a.ObjectPlanet.facebookAccess = function (d) {
        var b = {};
        var c = d;
        if (c != null && c.indexOf("#access_token=") == 0) {
            b.access_token = c.substr("#access_token=".length)
        }
        if (c != null && c.indexOf("&expires_in=") > 0) {
            b.expires_in = c.substr(c.indexOf("&") + "&expires_in=".length);
            if (b.expires_in.indexOf("&") > 0) {
                b.expires_in = b.expires_in.substr(0, b.expires_in.indexOf("&"))
            }
            b.expires_in = b.expires_in - 0;
            b.access_token = b.access_token.substr(0, b.access_token.indexOf("&"))
        }
        return b
    };
    a.ObjectPlanet.blackWhite = function (c) {
        for (var b = 0; c != null && b < c.length; b += 4) {
            var d = Math.round(0.34 * c[b] + 0.5 * c[b + 1] + 0.16 * c[b + 2]);
            c[b] = c[b + 1] = c[b + 2] = d
        }
        return c
    };
    a.ObjectPlanet.base = function () {
        return document.location.href.replace(document.location.search, "").replace("#", "")
    }
})(jQuery);
(function (a) {
    a.ObjectPlanet.EventBus = function () {
        this.listeners = []
    };
    a.ObjectPlanet.EventBus.prototype = {
        listen: function (c, d) {
            if (typeof c == "string" && typeof d == "function") {
                c = c.split(" ");
                for (var b = 0; b < c.length; b++) {
                    this.listeners.push({
                        type: c[b],
                        callback: d
                    })
                }
            }
            return this
        },
        trigger: function (c, d) {
            for (var b = 0; b < this.listeners.length; b++) {
                if (this.listeners[b].type == c) {
                    this.listeners[b].callback(d)
                }
            }
            return this
        }
    }
})(jQuery);
(function (b) {
    b.fn.popdown = function () {
        return this.opWidget(a, arguments)
    };
    b.fn.popdown.idGenerator = 0;
    var a = {
        init: function (d) {
            b(this).css("cursor", "pointer").bind("mousedown", a.toggleMenu).prop("popdownOptions", d).get(0);
            this.popdownDisabled = d && d.disabled == true
        },
        reset: function (d) {
            this.popdownCreated = false;
            this.popdownOptions.items = d;
            b(this.popdown).remove()
        },
        add: function (d) {
            if (d != null && this.popdownOptions != null) {
                if (this.popdownOptions.items == null) {
                    this.popdownOptions.items = []
                }
                this.popdownOptions.items[this.popdownOptions.items.length] = d;
                delete this.popdownCreated
            }
        },
        create: function () {
            var f = this.popdownOptions;
            var e = '<div class="op-popdown" style="display: none;" id="popdown' + ++b.fn.popdown.idGenerator + '"><div class="up"></div>';
            if (f && f.title) {
                e += '<label class="title">' + f.title + "</label>"
            }
            for (var g = 0; f && f.items && g < f.items.length; g++) {
                var j = f.items[g].close == false ? " close=false" : " close=true";
                var h = f.items[g].visible == false ? ' style="display: none;"' : "";
                e += '<label class="option" index="' + g + '"' + j + h + ">" + f.items[g].label + "</label>"
            }
            var d = this;
            this.popdown = b(e + "</div>").get(0);
            this.popdown.items = [];
            b(this.popdown).find("label[index]").hover(c.addHoverEffect, c.removeHoverEffect).bind("click", c.choose).each(function (k) {
                d.popdown.items[k] = this;
                this.popdown = d.popdown
            }).end().prop("self", this).get(0);
            this.popdown.options = f;
            if (this.popdown.options && !this.popdown.options.align) {
                this.popdown.options.align = "right"
            }
            if (this.popdown.options && this.popdown.options.selectOn == undefined) {
                this.popdown.options.selectOn = true
            }
            this.popdown.arrow = b(this.popdown).find(".up").get(0);
            this.standalone = f && f.standalone == true;
            if (d.standalone) {
                b(this.popdown).css("position", "absolute");
                if (b(this).css("position") == "static" || b(this).css("position") == "") {
                    b(this).css("position", "relative")
                }
            }
        },
        select: function (d) {
            this.popdown.selectedIndex = Math.min(Math.max(0, d), this.popdown.items.length - 1)
        },
        close: function () {
            b(this.popdown).hide()
        },
        setEnabled: function (d) {
            this.popdownDisabled = d == false
        },
        showMenu: function (d) {
            if (this.popdownCreated != true) {
                a.toggleMenu.apply(this, [d])
            } else {
                b(this.popdown).show()
            }
        },
        toggleMenu: function (f) {
            if (this.popdownOptions && this.popdownOptions.beforeToggle) {
                this.popdownOptions.beforeToggle.apply(this, [f])
            }
            if (this.popdownCreated != true) {
                a.create.apply(this)
            }
            if (!this.popdownDisabled && b(document).find("#" + this.popdown.id).size() == 0) {
                b(this.popdown).appendTo(this.standalone ? this : "body")
            }
            var d = {
                left: b(this).offset().left + b(this).outerWidth() / 2 - 10
            };
            d.top = b(this).offset().top + b(this).outerHeight() + 4;
            if (this.standalone) {
                d.left = b(this).outerWidth() / 2 - 10
            }
            if (this.standalone) {
                d.top = b(this).outerHeight() + 4
            }
            if (this.popdown.options && typeof this.popdown.options.offsetX == "number") {
                d.left += this.popdown.options.offsetX
            }
            if (this.popdown.options && typeof this.popdown.options.offsetY == "number") {
                d.top += this.popdown.options.offsetY
            }
            if (this.popdown.options != null && this.popdown.options.xy != null && this.popdown.options.xy.indexOf("x") >= 0) {
                d.left = f.offsetX - 10
            }
            if (this.popdown.options != null && this.popdown.options.xy != null && this.popdown.options.xy.indexOf("y") >= 0) {
                d.top = f.offsetY + 4
            }
            if (this.popdown.options && this.popdown.options.align == "left") {
                d.left -= b(this.popdown).outerWidth() - 18;
                b(this.popdown.arrow).css({
                    left: "auto",
                    right: "5px"
                })
            }
            var e = f != null ? b(f.target).hasClass("option") : false;
            if (f != null && b(f.target).closest(".option").size() > 0) {
                e = b(f.target).closest(".option").get(0).parentNode === this.popdown
            }
            if (!e) {
                b(document).find(".op-popdown").not(this.popdown).hide();
                if (!this.popdownDisabled) {
                    b(this.popdown).toggle().css({
                        left: d.left + "px",
                        top: d.top + "px"
                    })
                }
            }
            if (f && this.popdownDisabled != true) {
                f.stopPropagation()
            }
            this.popdownCreated = true
        }
    };
    var c = {
        addHoverEffect: function () {
            b(this).siblings().removeClass("hover").end().addClass("hover")
        },
        removeHoverEffect: function () {
            b(this).removeClass("hover")
        },
        choose: function (d) {
            if (d.target == this && b(this).attr("close") == "true") {
                b(this.popdown).hide()
            }
            this.popdown.selectedIndex = b(this).attr("index");
            if (this.popdown.options.items[this.popdown.selectedIndex].callback) {
                this.popdown.options.items[this.popdown.selectedIndex].callback.apply(this.popdown.self);
                a.select.apply(this.popdown.self, [this.popdown.selectedIndex]);
                return false
            }
        }
    };
    b(document).bind("click", function (e) {
        var d = e.target.popdown != null || (e.target.parentNode && e.target.parentNode.popdown != null);
        if (b(e.target).closest(".op-popdown").size() == 0 && d != true) {
            b(document).find(".op-popdown").hide()
        }
    })
})(jQuery);
(function (b) {
    b.fn.progressIndicator = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (l) {
            if (this.progressIndicator != null && l && l.label) {
                b(this.progressIndicator.label).html(l.label)
            }
            if (this.progressIndicator != null) {
                return
            }
            this.progressIndicator = {
                left: [50, 86, 100, 86, 50, 14, 0, 14],
                top: [0, 14, 50, 86, 100, 86, 50, 14],
                opacity: [1, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]
            };
            var h = l != null && l.plain == true;
            var k = '<div class="op-progress-back" style="position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; z-index: 999; display: none;">';
            k += '<div class="op-progress';
            k += (h == false ? ' op-progress-box">' : '">');
            k += '<div class="ring" style="left: 50%; top: 10px; position: relative; ">';
            for (var d = 0; d < 8; d++) {
                var c = this.progressIndicator.left[d] + "%";
                var g = this.progressIndicator.top[d] + "%";
                var f = this.progressIndicator.opacity[d];
                k += '<span class="ball" style="left: ' + c + "; top: " + g + "; opacity: " + f + ';"></span>'
            }
            k += "</div>";
            k += '<label class="label">' + (l && l.label ? l.label : "") + "</label>";
            k += "</div></div>";
            b(this).append(k);
            this.progressIndicator.back = b(this).find("> div.op-progress-back").get(0);
            this.progressIndicator.box = b(this.progressIndicator.back).find("div.op-progress").get(0);
            this.progressIndicator.ring = b(this.progressIndicator.box).find("div.ring").get(0);
            this.progressIndicator.label = b(this.progressIndicator.box).find(".label").get(0);
            this.progressIndicator.balls = [];
            for (var d = 0; d < 8; d++) {
                this.progressIndicator.balls[d] = b(this.progressIndicator.ring).find("span.ball").get(d)
            }
            var j = b(this.progressIndicator.box).height() - 60;
            b(this.progressIndicator.ring).css({
                width: j + "px",
                height: j + "px",
                "margin-left": -(j / 2 + 8) + "px"
            });
            var e = Math.round(j * 0.12);
            for (var d = 0; d < 8; d++) {
                b(this.progressIndicator.balls[d]).css("-webkit-border-radius", e + "px")
            }
        },
        show: function () {
            if (this.progressIndicator != null) {
                b(this.progressIndicator.back).show()
            }
        },
        inc: function () {
            if (this.progressIndicator == null) {
                return
            }
            this.progressIndicator.opacity.unshift(this.progressIndicator.opacity.pop());
            for (var c = 0; c < this.progressIndicator.balls.length; c++) {
                b(this.progressIndicator.balls[c]).css("opacity", this.progressIndicator.opacity[c])
            }
        },
        start: function (d) {
            if (this.progressIndicator == null) {
                a.init.apply(this, [d])
            }
            b(this.progressIndicator.back).show();
            b(this.progressIndicator.label).html(d && d.label ? d.label : "");
            var c = this;
            this.progressIndicator.intervalId = setInterval(function () {
                a.inc.apply(c)
            }, 75)
        },
        stop: function () {
            if (this.progressIndicator == null) {
                return
            }
            clearInterval(this.progressIndicator.intervalId);
            b(this.progressIndicator.back).hide()
        }
    }
})(jQuery);
(function (b) {
    b.fn.floatLabel = function () {
        return this.opWidget(a, arguments)
    };
    b.fn.floatLabel.idGenerator = 0;
    var a = {
        init: function (e) {
            this.free = e != null && e.free == true;
            var d = '<div class="op-float op-popdown" style="display: none;" id="' + ++b.fn.floatLabel.idGenerator + '">';
            if (e != null && typeof e.position == "string" && e.position.indexOf("bottom") == 0) {
                d += '<span class="up-arrow"></span>'
            } else {
                if (e != null && e.align == "left") {
                    d += '<span class="right-arrow"></span>'
                } else {
                    d += '<span class="left-arrow"></span>'
                }
            } if (e != null && e.label != null) {
                d += e.label
            }
            this.floatLabel = b(d + "</div>").get(0);
            this.floatLabel.enabled = e == null || e.enabled != false;
            this.floatLabel.options = e ? e : {};
            if (this.free != true && this.floatLabel.options.align == null) {
                this.floatLabel.options.align = "right"
            }
            this.arrow = b(this.floatLabel).find("span").get(0);
            b(this).bind("mouseleave blur", c.hideLabel);
            if (this.free) {
                b(this).bind("mousemove", c.showLabel)
            }
            if (!this.free) {
                b(this).hover(c.showLabel, c.hideLabel).bind("focus", c.showLabel)
            }
        },
        setLabel: function (d) {
            var e = '<span class="left-arrow"></span>';
            if (typeof this.floatLabel.options.position == "string" && this.floatLabel.options.position.indexOf("bottom") == 0) {
                e = '<span class="up-arrow"></span>'
            } else {
                if (this.floatLabel.options.align == "left") {
                    e = '<span class="right-arrow"></span>'
                }
            }
            b(this.floatLabel).html(d + e);
            if (this.floatLabel.options.position == "bottom.right") {
                b(this.floatLabel).find("span").css({
                    left: "auto",
                    right: "4px"
                })
            }
        },
        setEnabled: function (d) {
            this.floatLabel.enabled = d
        }
    };
    var c = {
        showLabel: function (d) {
            if (this.floatLabel.enabled != true) {
                return
            }
            if (b(document).find("#" + this.floatLabel.id).size() == 0) {
                if (this.free == true) {
                    b(this.floatLabel).appendTo("body").css("position", "fixed")
                }
                if (this.free != true) {
                    b(this.floatLabel).appendTo(this.nodeName == "INPUT" ? this.parentNode : this)
                }
            }
            var f = this.floatLabel.options.align == "right" ? b(this).outerWidth() + 8 : -b(this.floatLabel).outerWidth() - 8;
            var e = -3;
            if (this.free == true) {
                if (this.floatLabel.options.position == "bottom") {
                    f = d.clientX - b(this.floatLabel).outerWidth() / 2;
                    e = d.clientY + b(this.floatLabel).outerHeight() * 0.8
                } else {
                    f = this.floatLabel.options.align == "right" ? d.clientX - b(this.floatLabel).outerWidth() - 16 : d.clientX + 16;
                    e = d.clientY - 6
                }
            } else {
                if (this.nodeName == "INPUT" || this.nodeName == "CANVAS") {
                    f += this.offsetLeft;
                    e += this.offsetTop
                }
            } if (typeof this.floatLabel.options.offsetX == "number") {
                f += this.floatLabel.options.offsetX
            }
            if (typeof this.floatLabel.options.offsetY == "number") {
                e += this.floatLabel.options.offsetY
            }
            if (this.floatLabel.options.position == "bottom.left") {
                b(this.floatLabel).css({
                    left: "0px",
                    bottom: "-2.6em"
                }).show()
            } else {
                if (this.floatLabel.options.position == "bottom.right") {
                    b(this.floatLabel).css({
                        "padding-top": "5px",
                        "padding-bottom": "5px",
                        bottom: "-33px",
                        left: "auto",
                        right: "0px"
                    }).show();
                    b(this.arrow).css({
                        left: "auto",
                        right: "4px"
                    })
                } else {
                    if (this.floatLabel.options.position == "bottom") {
                        b(this.floatLabel).css({
                            left: f + "px",
                            top: e + "px"
                        }).show();
                        b(this.arrow).css({
                            left: "auto",
                            right: b(this.floatLabel).width() / 2 + "px"
                        })
                    } else {
                        b(this.floatLabel).css({
                            left: f + "px",
                            top: e + "px"
                        }).show()
                    }
                }
            }
        },
        hideLabel: function () {
            b(this.floatLabel).hide()
        }
    }
})(jQuery);
(function (b) {
    b.fn.blink = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            c = b.extend({
                color: "#fefefe"
            }, c || {});
            if (this.nodeName == "LABEL") {
                var e = b(this).css("color");
                b(this).animate({
                    color: c.color
                }, b.ObjectPlanet.SPEED, function () {
                    b(this).animate({
                        color: e
                    }, b.ObjectPlanet.SPEED, function () {
                        b(this).css("color", "")
                    })
                })
            } else {
                if (b(this).hasClass("error")) {
                    b(this).removeClass("error");
                    var d = this;
                    setTimeout(function () {
                        b(d).addClass("error")
                    }, b.ObjectPlanet.SPEED * 2)
                }
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.opTable = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            b(this).addClass("op-table");
            if (c && c.header && c.header.length > 0) {
                for (var d = 0, e = '<tr class="header">'; d < c.header.length; d++) {
                    e += '<th class="nowrap">' + c.header[d] + "</th>"
                }
                this.header = b(e + "</tr>").appendTo(this).get(0)
            }
        },
        addRow: function (c, g) {
            for (var e = 0, d = "<tr>"; c && e < c.length; e++) {
                d += "<td>" + c[e] + "</td>"
            }
            var f = b(d + "</tr>");
            return (g == true ? f.insertAfter(this.header) : f.appendTo(this))
        },
        deleteRow: function (c) {
            b(this).find("tr").eq(c + 1).remove()
        },
        clear: function () {
            b(this).find("tr").not("tr:eq(0)").remove()
        }
    }
})(jQuery);
(function (a) {
    a.ObjectPlanet.minMaxPair = function (c) {
        if (c == null || c.min == null || c.max == null) {
            return
        }
        var b = {};
        b.min = a(c.min).bind("change click blur", function (d) {
            if (a(this).val() != "" && b.max.value != "" && (b.max.value - 0) < (a(this).val() - 0)) {
                b.max.value = a(b.max).val(a(this).val()).val() - 0
            }
        }).get(0);
        b.max = a(c.max).bind("change click blur", function (d) {
            if (a(this).val() != "" && (b.min.value - 0) > (a(this).val() - 0)) {
                b.min.value = a(b.min).val(a(this).val()).val() - 0
            }
        }).get(0);
        a(b.min).add(b.max).numericField({
            decimal: c && c.decimal == true
        })
    }
})(jQuery);
(function (b) {
    b.fn.dateField = function () {
        return this.opWidget(a, arguments)
    };
    var c = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    var a = {
        init: function () {
            b(this).addClass("op-date-field");
            this.date = b('<input class="date" placeholder="date" tabindex="-1" readonly="readonly">').appendTo(this).get(0);
            this.time = b("<span></span>").timeField().appendTo(this).get(0)
        },
        set: function (e, d) {
            b(this.date).val(e != null ? c[e.getMonth()] + " " + e.getDate() + ", " + e.getFullYear() : "");
            if (!d) {
                b(this.time).timeField("set", e)
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.timeField = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function () {
            b(this).addClass("timeField").html('<input class="hour" placeholder="hh">:<input class="minute" placeholder="mm">');
            this.hh = b(this).find("input.hour").numericField({
                min: 0,
                max: 23
            }).get(0);
            this.mm = b(this).find("input.minute").numericField({
                min: 0,
                max: 59
            }).get(0);
            b(this.hh).add(this.mm).bind("blur", a.ensurePadding)
        },
        set: function (c) {
            b(this.hh).val(c != null ? c.getHours() < 10 ? "0" + c.getHours() : c.getHours() : "");
            b(this.mm).val(c != null ? c.getMinutes() < 10 ? "0" + c.getMinutes() : c.getMinutes() : "")
        },
        ensurePadding: function () {
            if (b(this).val() != "" && b(this).val() - 0 < 10) {
                b(this).val("0" + b(this).val())
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.numericField = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            this.options = c != null ? c : {};
            b(this).addClass("numericField").bind("keydown keypress keyup", a.ensureNumeric).bind("blur", a.ensureMinMax)
        },
        isValid: function (c) {
            var d = (c == 0 || (c >= 48 && c <= 57) || (c >= 96 && c <= 105) || c == b.ObjectPlanet.KEY.BACKSPACE || c == b.ObjectPlanet.KEY.TAB || c == b.ObjectPlanet.KEY.LEFT || c == b.ObjectPlanet.KEY.RIGHT || c == b.ObjectPlanet.KEY.DELETE || c == b.ObjectPlanet.KEY.PRINT);
            if (this.options.decimal == true) {
                d = d || c == b.ObjectPlanet.KEY.DOT || c == b.ObjectPlanet.KEY.COMMA
            }
            return d || ((this.options.min == null || this.options.min < 0) && b(this).val() == "" && (c == 189 || c == 45))
        },
        setDecimalOn: function (c) {
            this.options.decimal = c == true
        },
        ensureNumeric: function (c) {
            return a.isValid.apply(this, [c.keyCode])
        },
        ensureMinMax: function (c) {
            if (this.options.min != null && b(this).val() != "") {
                b(this).val(Math.max(b(this).val(), this.options.min))
            }
            if (this.options.max != null && b(this).val() != "") {
                b(this).val(Math.min(b(this).val(), this.options.max))
            }
        }
    }
})(jQuery);
(function (b) {
    b("*").on("mousedown", function (c) {
        if (b.ObjectPlanet.session) {
            b.ObjectPlanet.session.lastEvent = c
        }
    });
    b.opAjax = function (d) {
        if (d == null) {
            return
        }
        if (!d.url) {
            d.url = b.OP_BASE ? b.OP_BASE + "a" : "a"
        }
        if (!d.dataType) {
            d.dataType = "json"
        }
        var c = d.success;
        d.success = function (e) {
            if (e != null && e.resultCode == b.ObjectPlanet.ResultCode.NOT_LOGGED_IN && e.expired == true) {
                if (b.ObjectPlanet && b.ObjectPlanet.session && b.ObjectPlanet.session.login != null) {
                    b.getJSON((b.OP_BASE ? b.OP_BASE + "a" : "a") + "?action=user.login&sid=" + b.ObjectPlanet.session.sid + "&skey=" + b.ObjectPlanet.session.skey, function (f) {
                        if (f != null && f.resultCode == b.ObjectPlanet.ResultCode.OK && f.data != null && f.data.sid) {
                            b.ObjectPlanet.session.sid = f.data.sid;
                            b.ObjectPlanet.session.skey = f.data.skey;
                            b.ObjectPlanet.setCookie("sid", f.data.sid + "&" + f.data.skey);
                            a(d, f, c)
                        } else {
                            if (f.resultCode == b.ObjectPlanet.ResultCode.INVALID_LOGIN) {
                                if (d.data.query) {
                                    var g = JSON.parse(d.data.query);
                                    if (g.action == "session.heartbeat") {
                                        c(f);
                                        return
                                    }
                                }
                                b.ObjectPlanet.loginDialog.loginState = false;
                                b(b.ObjectPlanet.loginDialog).opinioLogin("openMini", {
                                    event: b.ObjectPlanet.session.lastEvent,
                                    cancel: function () {
                                        d.success = c;
                                        b.ajax(d)
                                    }
                                }, function (h) {
                                    if (h.resultCode == b.ObjectPlanet.ResultCode.OK) {
                                        delete b.ObjectPlanet.session.noAutoSave;
                                        a(d, h, c)
                                    }
                                })
                            } else {
                                c(e)
                            }
                        }
                    })
                } else {
                    b.getJSON((b.OP_BASE ? b.OP_BASE + "a" : "a") + "?action=user.guest", function (f) {
                        if (f.resultCode == b.ObjectPlanet.ResultCode.OK && f.data && f.data.sid) {
                            b.ObjectPlanet.session.sid = f.data.sid;
                            b.ObjectPlanet.session.skey = f.data.skey;
                            b.ObjectPlanet.setCookie("sid", f.data.sid + "&" + f.data.skey);
                            a(d, f, c)
                        } else {
                            c(e)
                        }
                    })
                }
            } else {
                c(e)
            }
        };
        b.ajax(d)
    };
    b.serverRequest = function (d, e, c) {
        if (d.sid == null && b.ObjectPlanet.session != null) {
            d.sid = b.ObjectPlanet.session.sid
        }
        if (d.skey == null && b.ObjectPlanet.session != null) {
            d.skey = b.ObjectPlanet.session.skey
        }
        b._serverRequest(e, c, {
            data: {
                query: JSON.stringify(d)
            }
        })
    };
    b.serverPost = function (d, e, c) {
        if (b.ObjectPlanet.session != null) {
            d.sid = b.ObjectPlanet.session.sid
        }
        if (b.ObjectPlanet.session != null) {
            d.skey = b.ObjectPlanet.session.skey
        }
        b._serverRequest(e, c, {
            data: d,
            type: "POST",
            contentType: "application/x-www-form-urlencoded; charset=utf-8"
        })
    };
    b._serverRequest = function (e, c, d) {
        b.opAjax({
            data: d.data,
            type: d && d.type ? "POST" : undefined,
            contentType: d && d.contentType ? d.contentType : undefined,
            success: function (f) {
                if (e) {
                    e(f)
                } else {
                    b("body").progressIndicator("stop")
                }
            },
            error: function (f, h, g) {
                b("body").progressIndicator("stop");
                if (c) {
                    c()
                }
            }
        })
    };
    var a = function (e, c, d) {
        if (e.data && e.data.query) {
            var f = JSON.parse(e.data.query);
            if (f.action != "session.heartbeat") {
                f.sid = c.data.sid;
                f.skey = c.data.skey;
                e.data.query = JSON.stringify(f)
            } else {
                d({
                    resultCode: b.ObjectPlanet.ResultCode.OK
                });
                return
            }
        } else {
            e.data.sid = c.data.sid;
            e.data.skey = c.data.skey
        }
        e.success = d;
        b.ajax(e)
    }
})(jQuery);
(function (b) {
    b.fn.mongoFind = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (f) {
            if (b.ObjectPlanet.url.param("login", document.location.search) == null || b.ObjectPlanet.url.param("password", document.location.search) == null) {
                return
            }
            var d = b(this).addClass("find-form").css({
                margin: "10px"
            }).html('<table><tr><td>Collection:</td><td><input class="collection" width="30"></td><tr><tr><td>Fields:</td><td><input class="fields"></td><tr><tr><td>Select:</td><td><input class="select"></td><tr><tr><td>Sort:</td><td><input class="sort"></td><tr><tr><td>Limit:</td><td><input class="limit"></td><tr></table><button>Submit</button><br><br><a href="" target="result"></a><br><div class="result"></div>').get(0);
            this.collection = b(this).find("input.collection").get(0);
            this.fields = b(this).find("input.fields").get(0);
            this.select = b(this).find("input.select").get(0);
            this.sort = b(this).find("input.sort").get(0);
            this.limit = b(this).find("input.limit").get(0);
            this.link = b(this).find("a").get(0);
            this.result = b(this).find(".result").get(0);
            this.submit = b(this).find("button").bind("click", function () {
                a.query.apply(d)
            }).get(0);
            var c = b.ObjectPlanet.url.param("login", document.location.search);
            var e = b.ObjectPlanet.url.param("password", document.location.search);
            if (c && e) {
                b.serverRequest({
                    action: "user.login",
                    login: c,
                    password: e
                }, function (g) {
                    d.sid = g && g.data && g.data.sid ? g.data.sid : null;
                    d.skey = g && g.data && g.data.skey ? g.data.skey : null
                })
            }
        },
        query: function () {
            b(this.result).html("");
            var e = a.createQuery.apply(this);
            var d = "/a?get=" + JSON.stringify(e);
            b(this.link).attr("href", d + "&sid=" + this.sid + "&skey=" + this.skey).text(d);
            var c = this;
            b(this).progressIndicator("start", {
                plain: true
            });
            b.serverRequest({
                get: e,
                sid: this.sid,
                skey: this.skey
            }, function (g) {
                b(c).progressIndicator("stop");
                if (g.resultCode == b.ObjectPlanet.ResultCode.OK && g.data != null) {
                    var f = "<br>count: " + g.data.length + "<pre>";
                    for (var h = 0; h < g.data.length; h++) {
                        f += JSON.stringify(g.data[h]).replace(/</g, "&lt;") + "\n"
                    }
                    f += "</pre>";
                    b(c.result).html(f)
                }
            })
        },
        createQuery: function () {
            var c = {
                collection: b(this.collection).val()
            };
            if (b(this.fields).val() != "") {
                c.fields = a.parse(b(this.fields).val())
            }
            if (b(this.select).val() != "") {
                c.select = a.parse(b(this.select).val())
            }
            if (b(this.sort).val() != "") {
                c.sort = a.parse(b(this.sort).val())
            }
            if (b(this.limit).val() != "") {
                c.limit = b(this.limit).val()
            }
            return c
        },
        parse: function (c) {
            c = c.replace(/,/g, ',"').replace(/:/g, '":').replace(/'/g, '"');
            c = c.replace(/{ /g, "{").replace(/{/g, '{"');
            c = '"' + c;
            return JSON.parse("{" + c + "}")
        }
    }
})(jQuery);
(function (b) {
    b.fn.moduleContainer = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d) {
            b(this).addClass("op-module-container borderBox").bind("module.collapse", function (e) {
                a.collapse.apply(this, [e.target])
            })
        },
        adjust: function () {
            var d = b(this).find("> .op-app-module");
            var f = d.size();
            var e = this;
            d.each(function (h) {
                var j = c(this);
                if (e.collapsed == true) {
                    b(this).css({
                        height: (b(e).height() - j.top - j.bottom) + "px"
                    })
                } else {
                    var g = (h * (j.left + j.right));
                    b(this).css({
                        width: Math.floor(b(e).width() / f - j.left - j.right) + "px",
                        height: (b(e).height() - j.top - j.bottom) + "px"
                    });
                    var i = (f == 1 ? b(e).width() / 2 - d.width() / 2 - (j.left + j.right) / 2 : b(this).width() * h + g);
                    b(this).css("left", i + "px")
                }
            }).module("adjust")
        },
        collapse: function (d) {
            if (this.collapsed != true) {
                d.originalPos = b(d).position().left;
                b(d).animate({
                    left: "95%"
                }, b.ObjectPlanet.SPEED, function () {
                    b(d.collapse.arrow).removeClass("right").addClass("left")
                });
                if (b(this).find(".op-app-module").size() == 2) {
                    var g = b(this).find(".op-app-module:first").get(0);
                    b(g).prop("originalLeft", b(g).position().left).prop("originalWidth", b(g).width());
                    b(g).animate({
                        left: "5%",
                        width: "86%"
                    }, b.ObjectPlanet.SPEED, function () {
                        b(d).trigger("module.collapsed")
                    })
                }
                this.collapsed = true
            } else {
                b(d).animate({
                    left: d.originalPos
                }, b.ObjectPlanet.SPEED, function () {
                    b(d.collapse.arrow).removeClass("left").addClass("right")
                });
                if (b(this).find(".op-app-module").size() == 2) {
                    var g = b(this).find(".op-app-module:first").get(0);
                    var f = b(g).prop("originalLeft") + "px";
                    var e = b(g).prop("originalWidth") + "px";
                    b(g).animate({
                        left: f,
                        width: e
                    }, b.ObjectPlanet.SPEED, function () {
                        b(d).trigger("module.collapsed")
                    })
                }
                delete this.collapsed
            }
        }
    };
    var c = function (d) {
        return {
            top: b.ObjectPlanet.unitLess(b(d).css("margin-top")),
            bottom: b.ObjectPlanet.unitLess(b(d).css("margin-bottom")),
            left: b.ObjectPlanet.unitLess(b(d).css("margin-left")),
            right: b.ObjectPlanet.unitLess(b(d).css("margin-right"))
        }
    }
})(jQuery);
(function (b) {
    b.fn.module = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (f) {
            this.enabled = true;
            this.options = b.extend({
                title: "",
                menu: [],
                submenu: [],
                content: []
            }, f);
            if (this.eventBus == null) {
                this.eventBus = f != null && f.eventBus != null ? f.eventBus : new b.ObjectPlanet.EventBus()
            }
            var d = b(this).addClass("op-module borderBox").get(0);
            var k = '<span class="menu">';
            for (var g = 0; g < this.options.menu.length; g++) {
                k += '<label class="button hand" tabIndex="' + g + '">' + this.options.menu[g] + "</label>"
            }
            k += "</span>";
            this.header = b('<table cellpadding="0" cellspacing="0" class="module-header"><tr><td style="white-space: nowrap;"><label class="title noSelect">' + this.options.title + '</label></td><td class="icons" style="width: 100%;"></td><td class="menu">' + k + "</td></tr></table>").get(0);
            this.moduleTitle = b(this.header).find(".title").toggle(this.options.title.length > 0).get(0);
            this.icons = b(this.header).find("td.icons").get(0);
            this.menu = b(this.header).find("td:eq(2) span").get(0);
            b(this.menu).toggle(b(this.menu).find("label").size() > 0).find("label").bind("click", function (i) {
                if (!b(d).hasClass("op-module-disabled")) {
                    a.select.apply(d, [this.tabIndex])
                }
            });
            this.menu.labels = [];
            b(this.menu).find("label").each(function (i) {
                d.menu.labels[i] = this
            });
            b(this).append(this.header);
            var h = '<div class="submenu">';
            for (var g = 0; g < this.options.submenu.length; g++) {
                var c = '<span class="container">';
                for (var e = 0; this.options.submenu[g] != null && e < this.options.submenu[g].length; e++) {
                    c += '<label class="label">' + this.options.submenu[g][e] + "</label>"
                }
                h += (c + "</span>")
            }
            this.submenu = b(h + "</div>").appendTo(this).get(0);
            this.showSubmenu = true;
            if (f != null && f.collapse == true) {
                this.collapse = b('<label class="collapse"><span class="right"></span></label>').appendTo(this).bind("click", function () {
                    b(d).trigger("module.collapse")
                }).get(0)
            }
            if (this.collapse != null) {
                this.collapse.arrow = b(this.collapse).find("span").get(0)
            }
            b.each(["show", "hide"], function () {
                var i = b.fn[this];
                b.fn[this] = function () {
                    var j = i.apply(this, arguments);
                    if (this.get(0) === d.submenu) {
                        a.adjust.apply(d)
                    }
                    return j
                }
            });
            this.contentContainer = b('<div class="contentContainer"></div>').get(0);
            if (f && f.left != null) {
                this.leftContainer = b('<div class="leftContainer borderBox"></div>').html(f.left).appendTo(this).get(0)
            }
            this.content = this.options.content ? this.options.content : [];
            for (var g = 0; g < this.content.length; g++) {
                b(this.content[g]).toggle(g == 0).addClass("moduleContent").attr("contentIndex", g).appendTo(this.contentContainer)
            }
            this.selected = 0;
            a.select.apply(this, [0]);
            b(this.contentContainer).appendTo(this).css("height", "100%")
        },
        adjust: function () {
            var c = b(this).outerHeight() - b(this.header).outerHeight();
            var d = b(this).outerHeight() - b(this).height();
            c -= b(this.submenu).is(":visible") ? b(this.submenu).outerHeight() : 0;
            b(this.contentContainer).height(c - d - b.ObjectPlanet.unitLess(b(this).css("padding-bottom")));
            if (this.leftContainer != null) {
                if (b(this).width() > 0 && b(this).width() < 1000) {
                    b(this.leftContainer).width(300);
                    b(this.contentContainer).css({
                        left: "300px",
                        width: (b(this).width() - 300) + "px"
                    })
                } else {
                    b(this.leftContainer).css("width", "30%");
                    b(this.contentContainer).css({
                        left: "30%",
                        width: "70%"
                    })
                }
                b(this.leftContainer).height(c)
            }
            if (this.eventBus) {
                this.eventBus.trigger("module.adjusted", b(this.moduleTitle).text())
            }
        },
        setTitle: function (c) {
            c = c ? c : "";
            b(this.moduleTitle).text(c).toggle(c.length > 0);
            a.adjust.apply(this)
        },
        getTitle: function () {
            return b(this.moduleTitle).text()
        },
        setContent: function (c, d) {
            b(this.content[c]).remove();
            this.content[c] = d;
            b(d).addClass("moduleContent").attr("contentIndex", c).toggle(c == this.selected).appendTo(this.contentContainer)
        },
        select: function (c) {
            if (c == 0 || (c >= 0 && c < b(this.menu).find("> label").size())) {
                b(this.menu).find("label").removeClass("selected").eq(c).addClass("selected");
                b(this.submenu).hide().find("> span").hide();
                if (b(this.submenu).find("> span").eq(c).find("label").size() > 0) {
                    b(this.submenu).toggle(this.showSubmenu).find("> span").eq(c).show()
                }
                if (this.content[c] != null) {
                    a.adjust.apply(this);
                    b(this.content[this.selected]).hide();
                    b(this.content[c]).show();
                    this.selected = c
                }
            }
        },
        getSelected: function () {
            return this.selected
        },
        showSubmenu: function (c) {
            this.showSubmenu = c == true;
            b(this.submenu).toggle(this.showSubmenu)
        },
        setEnabled: function (c) {
            b(this).toggleClass("op-module-disabled", c != true);
            b(this.menu).find("label").toggleClass("hand", c == true)
        },
        isEnabled: function () {
            return !b(this).hasClass("op-module-disabled")
        }
    }
})(jQuery);
(function (b) {
    b.fn.framed = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            this.removeOnClose = c != null && c.removeOnClose == true;
            this.backDrop = b('<div class="op-frame-back"></div>').get(0);
            this.frameBorder = b('<div class="op-frame borderBox"><span class="frame-close"></span><div class="content-box"></div></div>').appendTo(this.backDrop).get(0);
            this.contentBox = b(this.frameBorder).find(".content-box").css("text-align", "left").get(0);
            this.closeButton = b(this.frameBorder).find(".frame-close").get(0);
            a._init.apply(this);
            b(this.contentBox).append(this)
        },
        _init: function () {
            var c = this;
            b(this.closeButton).bind("click", function (d) {
                a.close.apply(c)
            }).get(0)
        },
        show: function (c) {
            if (c != null && c.parent != null && this.backDrop.added != true) {
                b(this.backDrop).appendTo(c.parent).prop("added", true);
                a._init.apply(this)
            } else {
                if (this.backDrop.added != true) {
                    b(this.backDrop).appendTo("body").prop("added", true);
                    a._init.apply(this)
                }
            }
            b(this.backDrop).show()
        },
        close: function () {
            b(this.backDrop).hide();
            if (this.removeOnClose == true) {
                b(this.backDrop).removeProp("added").remove()
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.dialogBox = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d) {
            this.options = d != null ? d : {};
            if (this.options.title == null) {
                this.options.title = ""
            }
            if (this.options.ok == null) {
                this.options.ok = {
                    label: "OK"
                }
            }
            if (this.options.ok.label == null) {
                this.options.ok.label = "OK"
            }
            if (this.options.cancel == null) {
                this.options.cancel = {
                    label: "Cancel"
                }
            }
            if (this.options.cancel.label == null) {
                this.options.cancel.label = "Cancel"
            }
            if (this.dialog == undefined) {
                var c = b(this).addClass("content").get(0);
                this.dialog = b('<div class="op-module op-dialog"><div class="module-header"><label class="title noSelect hand">' + this.options.title + '</label></div><div class="buttons"><span class="frame noSelect"><button class="button unSelected noSelect">' + this.options.ok.label + '</button></span><span class="frame noSelect"><button class="button unSelected noSelect">' + this.options.cancel.label + "</button></span></div></div>").get(0);
                b(this.dialog).find(".module-header").after(b(this).css("text-align", "left")).end().framed(d);
                this.header = b(this.dialog).find(".module-header").get(0);
                this.dialogTitle = b(this.header).find(".title").get(0);
                this.ok = b(this.dialog).find(".buttons span button").get(0);
                this.cancel = b(this.dialog).find(".buttons span button").get(1)
            }
        },
        _initEventHandlers: function () {
            var c = this;
            b(this.ok).add(this.cancel).bind("mousedown", function (d) {
                b(this).removeClass("unSelected").addClass("selected")
            }).bind("mouseup mouseout", function (d) {
                b(this).removeClass("selected").addClass("unSelected")
            });
            b(this.ok).bind("click", function (e) {
                var d = true;
                if (c.options.ok.callback != null) {
                    d = c.options.ok.callback()
                }
                if (d != false) {
                    a.hide.apply(c)
                }
            });
            b(this.cancel).bind("click", function (d) {
                if (c.options.cancel.callback != null) {
                    c.options.cancel.callback()
                }
                a.hide.apply(c)
            })
        },
        show: function (c) {
            if (this.dialog.backDrop.added != true) {
                a._initEventHandlers.apply(this)
            }
            b(this.dialog).framed("show", c);
            if (c && c.parent != null) {
                b(this.dialog.frameBorder).css({
                    "margin-left": "15%",
                    "margin-right": "15%"
                })
            }
        },
        hide: function () {
            b(this.dialog).framed("close")
        },
        setTitle: function (c) {
            if (this.dialog != undefined) {
                b(this.dialogTitle).text(c)
            }
        },
        setButtons: function (c) {
            if (this.dialog != undefined) {
                if (c.ok && c.ok.label) {
                    b(this.ok).text(c.ok.label)
                }
                if (c.cancel && c.cancel.label) {
                    b(this.cancel).text(c.cancel.label)
                }
                if (typeof (c.ok.callback) == "function") {
                    this.options.ok.callback = c.ok.callback
                }
                if (typeof (c.cancel.callback) == "function") {
                    this.options.cancel.callback = c.cancel.callback
                }
            }
        }
    }
})(jQuery);
(function (b) {
    b.ObjectPlanet.miniDialog = function (c) {
        var e = ' style="display: ' + (c && c.close ? 'inline-block;"' : 'none;"');
        var d = b('<div class="op-dialog-mini"><span class="frame-close"' + e + "></span></div>").css({
            left: c && c.event ? c.event.clientX + "px" : "50%",
            top: c && c.event ? c.event.clientY + "px" : "40%"
        }).get(0);
        d.close = b(d).find(".frame-close").bind("click", function (f) {
            b(d.back).remove();
            if (c && typeof c.closeCallback == "function") {
                c.closeCallback()
            }
        }).get(0);
        if (c && c.content) {
            b(c.content).appendTo(d);
            d.content = b(d).find("> *").not(d.close).get(0);
            b(d.content).find("input").bind("keyup", function (f) {
                if (f.keyCode == 27) {
                    b(d.back).remove()
                }
            })
        }
        d.back = b('<div class="op-frame-back"></div>').append(d).bind("click", function (f) {
            if (f.target == this) {
                b(this).remove()
            }
        }).appendTo("body").get(0);
        if (!c || !c.event) {
            a.center.apply(d)
        }
        if (c && c.align == "left" && c.event) {
            b(d).css("left", (c.event.clientX - b(d).width()) + "px")
        }
        return d
    };
    b.fn.miniDialog = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        center: function () {
            b(this).css({
                "margin-left": -b(this).outerWidth() / 2 + "px",
                "margin-top": -b(this).outerHeight() / 2 + "px",
                "min-width": b(this).width() + "px",
                "min-height": b(this).height() + "px",
                left: "50%",
                top: "40%"
            })
        }
    }
})(jQuery);
$.ObjectPlanet.wobble = function (b, a, c) {
    if (b == null || a == 0) {
        return
    }
    if (c <= 0) {
        $(b).css("left", b.wobble);
        delete b.wobble;
        return
    }
    if (b.wobble == undefined) {
        b.wobble = $(b).css("left");
        $(b).css("left", $(b).position().left + "px")
    }
    if (c == undefined) {
        c = 6
    }
    $(b).stop().animate({
        left: "-=" + a + "px"
    }, $.ObjectPlanet.SPEED / 5, function () {
        $.ObjectPlanet.wobble(b, -a, c - 1)
    })
};
(function (b) {
    b.fn.refreshButton = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (e) {
            b(this).addClass("op-icon");
            this.width = b(this).width();
            this.height = b(this).height();
            var d = {
                x: this.width / 2,
                y: this.height / 2
            };
            var c = Math.min(d.x, d.y) - 5;
            var f = this.getContext("2d");
            var g = f.createLinearGradient(0, 0, this.width / 2, this.height);
            g.addColorStop(0, "#" + b.ObjectPlanet.color.adjust("#41586a", 50));
            g.addColorStop(1, "#" + b.ObjectPlanet.color.adjust("#41586a", -25));
            f.strokeStyle = f.fillStyle = g;
            f.lineWidth = 3;
            f.lineCap = "round";
            f.arc(d.x, d.y, c, Math.PI * 0.25, Math.PI * 1.75);
            f.stroke();
            f.beginPath();
            f.moveTo(this.width - 3, d.y - 7);
            f.lineTo(this.width - 3, d.y + 0);
            f.lineTo(this.width - 11, d.y + 0);
            f.closePath();
            f.fill()
        }
    }
})(jQuery);
(function (b) {
    b.fn.undoRedoIcon = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d) {
            var c = b(this).addClass("undo-redo-icon op-icon").prop("redo", d && d.redo == true).get(0);
            this.width = b(this).width();
            this.height = b(this).height();
            this.center = {
                x: this.width / 2,
                y: this.height / 2
            };
            this.radius = Math.min(this.center.x, this.center.y) - 5;
            b(this).css("cursor", "default").bind("mouseenter", function (e) {
                b(this).css("cursor", "pointer").floatLabel("setEnabled", true);
                if (b(this).hasClass("disabled")) {
                    b(this).css("cursor", "default").floatLabel("setEnabled", false)
                }
            });
            if (b.ObjectPlanet && b.ObjectPlanet.eventBus != null) {
                b.ObjectPlanet.eventBus.listen("murvey.loaded", function () {
                    a.paint.apply(c)
                })
            }
        },
        paint: function () {
            var d = this.getContext("2d");
            d.clearRect(0, 0, this.width, this.height);
            var c = b(this).css("color");
            d.strokeStyle = d.fillStyle = c != null && c != "" ? c : "white";
            d.beginPath();
            d.lineWidth = 3;
            d.lineCap = "round";
            if (this.redo != true) {
                a.paintUndo.apply(this, [d])
            }
            if (this.redo == true) {
                a.paintRedo.apply(this, [d])
            }
        },
        paintUndo: function (c) {
            c.arc(this.center.x, this.center.y, this.radius, Math.PI * 1.25, Math.PI * 0.5);
            c.stroke();
            c.beginPath();
            c.moveTo(3, this.center.y - 7);
            c.lineTo(3, this.center.y);
            c.lineTo(11, this.center.y);
            c.closePath();
            c.fill()
        },
        paintRedo: function (c) {
            c.arc(this.center.x, this.center.y, this.radius, Math.PI * 0.5, Math.PI * 1.75);
            c.stroke();
            c.beginPath();
            c.moveTo(this.width - 3, this.center.y - 7);
            c.lineTo(this.width - 3, this.center.y);
            c.lineTo(this.width - 11, this.center.y);
            c.closePath();
            c.fill()
        }
    }
})(jQuery);
(function (b) {
    b.fn.helpButton = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function () {
            b(this).iconButton().addClass("help-button")
        }
    }
})(jQuery);
(function (b) {
    b.fn.iconButton = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function () {
            b(this).addClass("icon-button")
        }
    }
})(jQuery);
(function (b) {
    b.fn.deleteButton = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            if (this.initCalled == true) {
                return
            }
            b(this).addClass("delete-button").iconButton().bind("mouseover", function () {
                a.paint.apply(this, [c])
            }).prop("initCalled", true)
        },
        paint: function (c) {
            if (this.initCalled != true) {
                a.init.apply(this, [c])
            }
            if (this.inited != true) {
                b(this).html("<canvas></canvas>").prop("inited", true);
                this.canvas = b(this).find("canvas").css({
                    width: b(this).width(),
                    height: b(this).height()
                }).get(0)
            }
            b(this.canvas).deleteIcon("paint")
        }
    }
})(jQuery);
(function (b) {
    b.fn.deleteIcon = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            a.paint.apply(this, [c])
        },
        paint: function (d) {
            this.width = b(this).width();
            this.height = b(this).height();
            var h = this.getContext("2d");
            h.strokeStyle = b(this).css("color");
            h.lineWidth = 2;
            h.lineCap = "round";
            var g = Math.min(this.width, this.height) / 2 - 3;
            var i = this.height / 2;
            var c = this.width / 2;
            var f = {
                x: c + g * Math.cos(Math.PI * 1.25),
                y: i + g * Math.sin(Math.PI * 1.25)
            };
            var e = {
                x: c + g * Math.cos(Math.PI * 0.25),
                y: i + g * Math.sin(Math.PI * 0.25)
            };
            h.moveTo(f.x, f.y);
            h.lineTo(e.x, e.y);
            h.moveTo(e.x, f.y);
            h.lineTo(f.x, e.y);
            h.stroke()
        }
    }
})(jQuery);
(function (b) {
    b.fn.murveyLogo = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            b(this).addClass("borderBox").prop("options", c ? c : {});
            if (this.options.left == null) {
                this.options.left = {}
            }
            if (this.options.right == null) {
                this.options.right = {}
            }
            if (this.options.mouth == null) {
                this.options.mouth = {}
            }
        },
        blinkLeft: function (c) {
            if (this.options.left == null) {
                this.options.left = {}
            }
            this.options.left.left = Math.max(0, Math.min(c.left, 100));
            this.options.left.right = Math.max(0, Math.min(c.right, 100));
            a.paint.apply(this)
        },
        blinkRight: function (c) {
            this.options.right.blink = Math.max(0, Math.min(100, c));
            a.paint.apply(this)
        },
        setMouth: function (c) {
            this.options.mouth = c;
            a.paint.apply(this)
        },
        setHair: function (c) {
            if (c != null) {
                this.options.hair = c
            }
            if (c == null && this.options.hair != null) {
                delete this.optons.hair
            }
            a.paint.apply(this)
        },
        paint: function (c) {
            this.width = b(this).width();
            this.height = b(this).height();
            this.radius = Math.min(this.width, this.height) / 2;
            if (this.options != null && this.options.hair != null) {
                this.radius *= 0.83
            }
            this.dim = this.radius * 2;
            this.cx = this.width / 2;
            this.cy = this.height / 2;
            this.pen = this.pen != null ? this.pen : this.getContext("2d");
            a.hair.apply(this);
            a.body.apply(this);
            a.leftEye.apply(this);
            a.rightEye.apply(this);
            a.mouth.apply(this)
        },
        body: function () {
            var d = this.radius / 10;
            var c = this.pen;
            c.fillStyle = b(this).css("color");
            c.arc(this.cx, this.cy, this.radius, Math.PI * 0, Math.PI * 2);
            c.fill();
            c.beginPath();
            c.moveTo(this.cx + this.radius, this.cy);
            c.lineTo(this.cx + this.radius, this.cy + this.radius - d);
            c.lineTo(this.cx + this.radius - d, this.cy + this.radius);
            c.lineTo(this.cx - this.radius + d, this.cy + this.radius);
            c.lineTo(this.cx - this.radius, this.cy + this.radius - d);
            c.lineTo(this.cx - this.radius, this.cy);
            c.lineTo(this.cx + this.radius, this.cy);
            c.fill();
            c.arc(this.cx + this.radius - d, this.cy + this.radius - d, d, Math.PI * 0, Math.PI * 2);
            c.arc(this.cx - this.radius + d, this.cy + this.radius - d, d, Math.PI * 0, Math.PI * 2);
            c.fill()
        },
        leftEye: function () {
            var h = this.pen;
            var c = this.cx - this.radius * 0.38;
            var k = this.cy - this.radius * 0.26;
            var g = this.radius * 0.3;
            h.beginPath();
            h.fillStyle = b(this).css("border-color");
            h.arc(c, k, g, Math.PI * 0, Math.PI * 2);
            h.fill();
            h.beginPath();
            h.fillStyle = b(this).css("color");
            h.arc(c, k, g / 2, Math.PI * 0, Math.PI * 2);
            h.fill();
            if (this.options != null && this.options.left != null) {
                g += 2;
                h.beginPath();
                h.moveTo(c - g, k - g);
                h.lineTo(c + g, k - g);
                h.lineTo(c + g, k - g + (g * this.options.left.right) / 50);
                h.lineTo(c - g, k - g + (g * this.options.left.left) / 50);
                h.lineTo(c - g, k - g);
                h.fill()
            }
            if (this.options && this.options.left && this.options.left.lashes == true) {
                h.beginPath();
                h.strokeStyle = b(this).css("border-color");
                var f = h.lineWidth;
                h.lineWidth *= 0.75;
                for (var e = 225; e <= 315; e += 45) {
                    var j = {
                        x: c + g * 0.9 * Math.cos(e * Math.PI / 180),
                        y: k + g * 0.9 * Math.sin(e * Math.PI / 180)
                    };
                    var d = {
                        x: c + g * 1.25 * Math.cos(e * Math.PI / 180),
                        y: k + g * 1.25 * Math.sin(e * Math.PI / 180)
                    };
                    h.moveTo(j.x, j.y);
                    h.lineTo(d.x, d.y)
                }
                h.stroke();
                h.lineWidth = f
            }
        },
        rightEye: function () {
            var e = this.pen;
            var d = this.radius * 0.13;
            if (this.options && this.options.right && this.options.right.blink != null) {
                d *= (100 - this.options.right.blink) / 100
            }
            if (d > 0) {
                e.beginPath();
                e.strokeStyle = b(this).css("border-color");
                e.lineWidth = d;
                e.lineJoin = "round";
                e.lineCap = "round";
                var c = this.cx + this.radius * 0.34;
                var f = this.cy - this.radius * 0.06 - d / 2;
                e.moveTo(c - this.radius * 0.2, f - this.radius * 0.19);
                e.lineTo(c, f);
                e.lineTo(c + this.radius * 0.31, f - this.radius * 0.34);
                e.stroke()
            }
        },
        mouth: function () {
            var d = this.radius * 0.28;
            var c = this.pen;
            c.lineWidth = d * 0.25;
            c.beginPath();
            c.fillStyle = c.strokeStyle = b(this).css("border-color");
            c.moveTo(this.cx - this.radius + d, this.cy + this.radius - d);
            c.lineTo(this.cx + this.radius - d, this.cy + this.radius - d);
            c.lineTo(this.cx + this.radius - d, this.cy + this.radius * 0.55 - d);
            c.lineTo(this.cx - this.radius + d, this.cy + this.radius - d);
            c.fill();
            c.stroke();
            if (this.options && this.options.mouth != null) {
                c.beginPath();
                c.fillStyle = c.strokeStyle = b(this).css("color");
                if (this.options.mouth.teeth == "angry") {
                    c.lineWidth = this.radius * 0.05;
                    c.moveTo(this.cx - this.radius * 0.2, this.cy + this.radius - d - this.radius * 0.25);
                    c.lineTo(this.cx - this.radius * 0.2, this.cy + this.radius * 0.9);
                    c.moveTo(this.cx + this.radius * 0.32, this.cy + this.radius - d - this.radius * 0.4);
                    c.lineTo(this.cx + this.radius * 0.32, this.cy + this.radius * 0.9);
                    c.stroke()
                }
                if (this.options.mouth.teeth == "upper") {
                    c.fillRect(this.cx + this.radius * 0.25, this.cy + this.radius * 0.25, d * 1.1, d * 1.1)
                }
                if (this.options.mouth.teeth == "lower") {
                    c.fillRect(this.cx + this.radius * 0.25, this.cy + this.radius - d * 1.7, d * 1.1, d * 0.9)
                }
            }
            if (this.options && this.options.mouth && this.options.mouth.lips != null) {
                c.beginPath();
                c.strokeStyle = this.options.mouth.lips;
                c.moveTo(this.cx - this.radius + d, this.cy + this.radius - d);
                c.lineTo(this.cx + this.radius - d, this.cy + this.radius - d);
                c.lineTo(this.cx + this.radius - d, this.height * 0.62);
                c.lineTo(this.cx - this.radius + d, this.cy + this.radius - d);
                c.stroke()
            }
        },
        hair: function () {
            if (this.options == null || this.options.hair == null) {
                return
            }
            var d = this.radius * 0.13;
            var g = this.pen;
            g.strokeStyle = b(this).css("color");
            g.lineCap = "round";
            g.lineWidth = this.radius * 0.08;
            for (var c = 0; this.options.hair instanceof Array && c < this.options.hair.length; c++) {
                var e = this.options.hair[c];
                var f = e.step != null ? Math.max(5, e.step) : 12;
                for (var j = e.start; j <= e.stop; j += f) {
                    a.oneHair.apply(this, [j, d, e.type])
                }
            }
        },
        oneHair: function (g, d, e) {
            var f = this.pen;
            f.beginPath();
            f.save();
            g %= 360;
            var c = this.cx + this.radius * Math.cos(g * Math.PI / 180);
            var h = this.cy + this.radius * Math.sin(g * Math.PI / 180);
            if (g > 0 && g <= 45) {
                c = this.cx + this.radius;
                h = this.cy + this.radius * (g / 45)
            } else {
                if (g >= 135 && g < 180) {
                    c = this.cx - this.radius;
                    h = this.cy + this.radius - this.radius * (g % 45 / 45)
                } else {
                    if (g > 45 && g < 135) {
                        c = this.cx + this.radius - (this.radius * 2) * (g - 45) / 90;
                        h = this.cy + this.radius
                    }
                }
            }
            a._oneHair(f, c, h, d, e)
        },
        _oneHair: function (h, d, j, f, g) {
            if (g == "round") {
                var c = h.lineWidth;
                h.lineWidth = f / 8;
                for (var e = 0; e < 12; e += 3) {
                    h.beginPath();
                    h.arc(d, j, f * e / 12, 0, 2 * Math.PI);
                    h.stroke()
                }
                h.beginPath();
                h.lineWidth = c
            } else {
                h.translate(d, j);
                h.moveTo(-f, -f * 0.6);
                h.lineTo(f, f * 0.6);
                h.moveTo(f, -f * 0.6);
                h.lineTo(-f, f * 0.6);
                h.moveTo(0, -f);
                h.lineTo(0, f);
                h.stroke();
                h.beginPath();
                h.restore()
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.logoController = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (e) {
            var d = '<div class="logo-container"><canvas class="logo"></canvas></div>';
            d += '<table class="controllers">';
            d += '<tr><td class="right">Size:</td><td class="left"><input class="size" type="range" min="20" max="250" value="15	0"></td></tr>';
            d += '<tr><td class="right">Left eye:</td><td class="left">';
            d += '<input class="blink blink-left-mood" type="range" min="-50" max="50" value="0">';
            d += '<input class="blink blink-left" type="range" min="0" max="100" value="0">';
            d += "</td></tr>";
            d += '<tr><td class="right">Right eye:</td><td class="left"><input class="blink-right" type="range" min="0" max="100" value="0"></td></tr>';
            d += '<tr><td class="right">Teeth:</td><td class="left">';
            d += '<label><input class="teeth-angry" type="checkbox">Angry</label>';
            d += '<label><input class="teeth-upper" type="checkbox">Upper</label>';
            d += '<label><input class="teeth-lower" type="checkbox">Lower</label>';
            d += "</td></tr>";
            d += '<tr><td class="right">Hair:</td><td class="left">';
            d += '<label><input class="hair hair-old" type="checkbox">Old</label>';
            d += '<label><input class="hair hair-full" type="checkbox">Full</label>';
            d += '<label><input class="hair hair-baby" type="checkbox">Baby</label>';
            d += '<label><input class="hair hair-nerd" type="checkbox">Nerd</label>';
            d += "</td></tr>";
            d += "</table>";
            var c = b(this).addClass("logo-controller").html(d).get(0);
            this.container = b(this).find(".logo-container").get(0);
            this.logo = b(this).find(".logo").murveyLogo(e).css({
                width: "100px",
                height: "100px",
                color: "#6CA6B0",
                "border-color": "white"
            }).get(0);
            this.size = b(this).find("input.size").bind("change", function (f) {
                a.size.apply(c)
            }).get(0);
            this.blinkLeftMood = b(this).find("input.blink-left-mood").get(0);
            this.blinkLeft = b(this).find("input.blink-left").get(0);
            b(this.blinkLeftMood).add(this.blinkLeft).bind("change", function (f) {
                a.blinkLeft.apply(c)
            });
            this.blinkRight = b(this).find("input.blink-right").bind("change", function () {
                b(c.logo).murveyLogo("blinkRight", b(this).val())
            }).get(0);
            this.angryTeeth = b(this).find("input.teeth-angry").bind("change", function () {
                if (b(this).is(":checked")) {
                    b(c.upperTooth).add(c.lowerTooth).removeAttr("checked")
                }
                b(c.logo).murveyLogo("setMouth", {
                    teeth: b(this).is(":checked") ? "angry" : "none"
                })
            }).get(0);
            this.upperTooth = b(this).find("input.teeth-upper").bind("change", function () {
                if (b(this).is(":checked")) {
                    b(c.angryTeeth).add(c.lowerTooth).removeAttr("checked")
                }
                b(c.logo).murveyLogo("setMouth", {
                    teeth: b(this).is(":checked") ? "upper" : "none"
                })
            }).get(0);
            this.lowerTooth = b(this).find("input.teeth-lower").bind("change", function () {
                if (b(this).is(":checked")) {
                    b(c.angryTeeth).add(c.upperTooth).removeAttr("checked")
                }
                b(c.logo).murveyLogo("setMouth", {
                    teeth: b(this).is(":checked") ? "lower" : "none"
                })
            }).get(0);
            this.oldHair = b(this).find("input.hair-old").bind("change", function () {
                if (b(this).is(":checked")) {
                    b(c).find(".hair").not(this).removeAttr("checked")
                }
                b(c.logo).murveyLogo("setHair", a.hair.apply(c))
            }).get(0);
            this.fullHair = b(this).find("input.hair-full").bind("change", function () {
                if (b(this).is(":checked")) {
                    b(c).find(".hair").not(this).removeAttr("checked")
                }
                b(c.logo).murveyLogo("setHair", a.hair.apply(c))
            }).get(0);
            this.babyHair = b(this).find("input.hair-baby").bind("change", function () {
                if (b(this).is(":checked")) {
                    b(c).find(".hair").not(this).removeAttr("checked")
                }
                b(c.logo).murveyLogo("setHair", a.hair.apply(c))
            }).get(0);
            this.nerdHair = b(this).find("input.hair-nerd").bind("change", function () {
                if (b(this).is(":checked")) {
                    b(c).find(".hair").not(this).removeAttr("checked")
                }
                b(c.logo).murveyLogo("setHair", a.hair.apply(c))
            }).get(0)
        },
        hair: function () {
            var c = [];
            if (b(this.oldHair).is(":checked")) {
                c.push({
                    start: 190,
                    stop: 190
                }, {
                    start: -10,
                    stop: -10
                })
            }
            if (b(this.fullHair).is(":checked")) {
                c.push({
                    start: 180,
                    stop: 360
                })
            }
            if (b(this.babyHair).is(":checked")) {
                c.push({
                    start: 270,
                    stop: 270
                })
            }
            if (b(this.nerdHair).is(":checked")) {
                c.push({
                    start: 190,
                    stop: 190
                }, {
                    start: -10,
                    stop: -10
                }, {
                    start: 270,
                    stop: 270
                })
            }
            return c
        },
        blinkLeft: function () {
            var d = b(this.blinkLeftMood).val() * 1 + b(this.blinkLeft).val() * 1;
            var c = -b(this.blinkLeftMood).val() * 1 + b(this.blinkLeft).val() * 1;
            b(this.logo).murveyLogo("blinkLeft", {
                left: d,
                right: c
            })
        },
        size: function () {
            var c = b(this.size).val();
            b(this.logo).css({
                width: c + "px",
                height: c + "px"
            }).murveyLogo("paint");
            a.center.apply(this)
        },
        center: function () {
            b(this.logo).css("top", (b(this.container).height() / 2 - b(this.size).val() / 2) + "px")
        }
    }
})(jQuery);
(function (b) {
    b.fn.murveys = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (e) {
            var d = b(this).addClass("murveys").attr("cellspacing", 0).attr("cellpadding", 0).get(0);
            var c = "<caption>";
            c += '<div>Bad Murvey<input class="mood" type="range" min="-50" max="50" value="0">Sad Murvey</div>';
            c += "</caption>";
            c += "<tr>";
            c += '<td><canvas class="mr"></canvas>Mr Murvey</td>';
            c += '<td><canvas class="ms"></canvas>Ms Murvey</td>';
            c += '<td><canvas class="baby"></canvas>Baby Murvey</td>';
            c += '<td><canvas class="grandpa"></canvas>Grandpa Murvey</td>';
            c += '<td><canvas class="grandma"></canvas>Grandma Murvey</td>';
            c += '<td><canvas class="uncle"></canvas>Uncle Murvey</td>';
            c += "</td></tr>";
            b(this).html(c);
            b(this).find("canvas.mr").murveyLogo();
            b(this).find("canvas.ms").murveyLogo({
                hair: [{
                    start: 135,
                    stop: 405,
                    step: 10,
                    type: "round"
                }],
                left: {
                    lashes: true
                }
            });
            b(this).find("canvas.baby").murveyLogo({
                hair: [{
                    start: 270,
                    stop: 270
                }],
                mouth: {
                    teeth: "upper"
                }
            });
            b(this).find("canvas.grandpa").murveyLogo({
                hair: [{
                    start: 190,
                    stop: 190
                }, {
                    start: -10,
                    stop: -10
                }],
                mouth: {
                    teeth: "lower"
                }
            });
            b(this).find("canvas.grandma").murveyLogo({
                hair: [{
                    start: 190,
                    stop: 350,
                    step: 20
                }],
                left: {
                    lashes: true
                }
            });
            b(this).find("canvas.uncle").murveyLogo({
                hair: [{
                    start: 20,
                    stop: 160,
                    step: 5,
                    type: "round"
                }, {
                    start: 255,
                    stop: 285,
                    step: 15
                }],
                mouth: {
                    teeth: "angry"
                }
            });
            this.mood = b(this).find("input.mood").get(0);
            b(this.mood).bind("change", function () {
                b(d).find("canvas").murveyLogo("blinkLeft", {
                    left: b(d.mood).val(),
                    right: -b(d.mood).val()
                })
            }).get(0)
        },
        paint: function () {
            b(this).find("canvas").murveyLogo("paint")
        }
    }
})(jQuery);
(function (b) {
    b.fn.surveyManager = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            this.eventBus = c ? c : new b.ObjectPlanet.EventBus();
            var d = b(this).addClass("survey-manager borderBox noSelect").html('<div class="container"><table class="running"></table><table class="archived" style="display: none;"></table></div><div class="bottom"><label class="tab tab-active">Main</label><label class="tab">Archived</label><label class="collapse"><span class="up"></span></label><div class="current" style="display: none;"><label class="content survey"></label><label class="label start-label">Start:</label><label class="content start"></label><label class="label stop-label">Stop:</label><label class="content stop"></label><label class="label">Responses:</label><label class="content responses"></label><label class="content status"></label></div></div>').get(0);
            this.surveyListContainer = b(this).find("div.container").get(0);
            this.surveyList = b(this.surveyListContainer).find("table.running").surveyList(this.eventBus).get(0);
            this.archivedList = b(this.surveyListContainer).find("table.archived").surveyList(this.eventBus, {
                archived: true
            }).get(0);
            this.bottom = b(this).find(".bottom").get(0);
            this.current = b(this.bottom).find(".current").get(0);
            this.current.survey = b(this.current).find(".survey").get(0);
            this.current.start = b(this.current).find(".start").get(0);
            this.current.startLabel = b(this.current).find(".start-label").get(0);
            this.current.stop = b(this.current).find(".stop").get(0);
            this.current.stopLabel = b(this.current).find(".stop-label").get(0);
            this.current.responses = b(this.current).find(".responses").get(0);
            this.current.status = b(this.current).find(".status").get(0);
            this.main = b(this).find(".tab:contains(Main)").bind("click", function () {
                b(d.surveyList).show();
                b(d.archivedList).hide();
                b(this).addClass("tab-active");
                b(d.archived).removeClass("tab-active");
                if (d.surveyList.needsUpdate == true) {
                    a.loadList.apply(d, [d.surveyList]);
                    delete d.surveyList.needsUpdate
                }
            }).get(0);
            this.archived = b(this).find(".tab:contains(Archived)").bind("click", function () {
                b(d.surveyList).hide();
                b(d.archivedList).show();
                b(this).addClass("tab-active");
                b(d.main).removeClass("tab-active");
                if (d.archivedList.needsUpdate == true) {
                    a.loadList.apply(d, [d.archivedList]);
                    delete d.archivedList.needsUpdate
                }
            }).get(0);
            b(this.surveyListContainer).bind("scroll", function (e) {
                if (b(d.surveyList).height() - b(this).height() - this.scrollTop <= 5) {
                    b(d.surveyList).surveyList("addPage")
                }
            });
            this.eventBus.listen("responses.loaded", function (e) {
                b(d.surveyList).surveyList("setResponseCount", e.surveyId, e.responseCount)
            }).listen("response.deleted", function (e) {
                b(d.surveyList).surveyList("setResponseCount", e.surveyId, e.responseCount)
            }).listen("response.author", function () {
                b(d.surveyList).surveyList("startResponsePoller")
            });
            this.eventBus.listen("module.movedTo", function (e) {
                if (e && e.index != null) {
                    d.currentModule = e.index
                }
            });
            this.eventBus.listen("survey.new", function (e) {
                a.setCurrentSurvey.apply(d, [e])
            }).listen("survey.load", function (e) {
                b(d.surveyList).surveyList("loadSurvey", {
                    surveyId: e
                })
            }).listen("survey.loaded", function (e) {
                if (d.currentModule == b.ObjectPlanet.POS_SUPPORT) {
                    d.eventBus.trigger("module.moveTo", b.ObjectPlanet.POS_SURVEY)
                }
                a.setCurrentSurvey.apply(d, [e])
            }).listen("survey.saved", function (e) {
                b(d.surveyList).surveyList("surveySaved", e);
                a.setCurrentSurvey.apply(d, [e])
            }).listen("survey.deleted", function (e) {
                d.surveyList.needsUpdate = d.archivedList.needsUpdate = true;
                if (d.current.json && d.current.json._id && d.current.json._id.$oid != null && d.current.json._id.$oid == e) {
                    b(d.current).hide()
                }
            }).listen("survey.undeleted", function (e) {
                d.surveyList.needsUpdate = d.archivedList.needsUpdate = true
            });
            this.open = true;
            this.collapse = b(this).find(".collapse").bind("click", function (e) {
                if (d.loggedIn != true) {
                    return
                }
                b(d).css("height", d.open ? "" : "26%");
                b(d).css("padding-bottom", d.open ? "0px" : "");
                b(d.surveyListContainer).toggle(!d.open).css("height", "100%");
                b(d.collapse).find("span").toggleClass("down", d.open).toggleClass("up", !d.open);
                d.open = !d.open;
                a.setCurrentState.apply(d);
                d.eventBus.trigger("surveyManager.collapse", d.open)
            }).get(0);
            this.loggedIn = false;
            this.eventBus.listen("user.loggedIn", function (e) {
                b(d).prop("loggedIn", true).css("height", "26%").show();
                b(d.surveyListContainer).show().css("height", "100%");
                a.loadList.apply(d, [d.surveyList,
                    function () {
                        if (e && e.currentSurvey != null) {
                            b("body").progressIndicator("start", {
                                label: "loading..."
                            });
                            b(d.surveyList).surveyList("loadSurvey", {
                                surveyId: e.currentSurvey
                            }, function () {
                                b("body").progressIndicator("stop")
                            })
                        }
                    }
                ]);
                b(d.archivedList).surveyList("loadSurveyList")
            }).listen("user.loggedOut", function () {
                d.loggedIn = false;
                b(d).css("height", "").hide();
                b(d.surveyListContainer).hide()
            })
        },
        setCurrentSurvey: function (e) {
            this.current.json = e;
            if (e != null) {
                var d = e.surveyName + "";
                if (d.length > 50) {
                    d = d.substring(0, 50) + "..."
                }
                b(this.current.survey).html(d);
                b(this.current.start).text(e.surveySetup && e.surveySetup.start ? b.ObjectPlanet.dateStr(e.surveySetup.start, false, true) : "");
                b(this.current.stop).text(e.surveySetup && e.surveySetup.stop ? b.ObjectPlanet.dateStr(e.surveySetup.stop, false, true) : "");
                b(this.current.responses).text(e.report && e.report.responseCount ? e.report.responseCount : 0);
                var c = new Date().valueOf();
                b(this.current.status).text("");
                if (e.surveySetup != null && e.surveySetup.start > c) {
                    b(this.current.status).removeClass("running ended").addClass("pending");
                    var f = Math.round((e.surveySetup.start - c) / 1000 / 60 / 60 / 24);
                    b(this.current.status).text("Starts in " + f + (f == 1 ? " day" : " days"));
                    b(this.current.startLabel).text("Starts:");
                    b(this.current.stopLabel).text("Stops:")
                }
                if (e.surveySetup != null && e.surveySetup.stop < c) {
                    b(this.current.status).removeClass("running pending").addClass("ended");
                    var f = Math.round((c - e.surveySetup.stop) / 1000 / 60 / 60 / 24);
                    b(this.current.status).text("Ended " + f + (f == 1 ? " day ago" : " days ago"));
                    b(this.current.startLabel).text("Started:");
                    b(this.current.stopLabel).text("Stopped:")
                }
                if (e.surveySetup != null && e.surveySetup.start <= c && e.surveySetup.stop >= c) {
                    b(this.current.status).removeClass("pending ended").addClass("running");
                    var f = Math.round((e.surveySetup.stop - c) / 1000 / 60 / 60 / 24);
                    if (f == 0) {
                        b(this.current.status).text("Ends today")
                    }
                    if (f == 1) {
                        b(this.current.status).text("Ends tomorrow")
                    }
                    if (f > 1 && f <= 3) {
                        b(this.current.status).text("Ends in " + f + " days")
                    }
                    if (f > 3) {
                        b(this.current.status).text("Running another " + f + " days")
                    }
                    b(this.current.startLabel).text("Started:");
                    b(this.current.stopLabel).text("Stops:")
                }
                b(this.current).toggle(e._id != null)
            } else {
                b(this.current).hide()
            }
        },
        setCurrentState: function () {
            b(this.main).add(this.archived).toggle(this.open);
            b(this.current).css({
                "border-left-color": this.open ? "" : "transparent",
            })
        },
        loadList: function (d, e) {
            if (d == null) {
                return
            }
            var c = this;
            b(this.surveyListContainer).progressIndicator("start", {
                plain: true
            });
            b(d).surveyList("loadSurveyList", function () {
                b(c.surveyListContainer).progressIndicator("stop");
                if (e != null) {
                    e()
                }
            })
        }
    }
})(jQuery);
(function (d) {
    d.fn.surveyList = function () {
        return this.opWidget(a, arguments)
    };
    var c = 50;
    var b = d.fn.surveyList.COLUMN = {
        SURVEY: 0,
        USER: 1,
        CREATED: 2,
        START: 3,
        STOP: 4,
        RESPONSES: 5,
        STATE: 6,
        DELETE: 7
    };
    var a = {
        init: function (f, h) {
            this.options = h;
            this.eventBus = f ? f : new d.ObjectPlanet.EventBus();
            var g = d(this).addClass("survey-list").opTable({
                header: ["Survey", "User", "Created", "Start", "Stop", "Responses", "State", ""]
            }).find("tr").hide().end().get(0);
            d(this.header).find("th").eq(b.SURVEY).css("width", "100%");
            d(this.header).find("th").eq(b.USER).hide();
            d(this.header).find("th").eq(b.RESPONSES).addClass("right");
            d(this.header).find("th").eq(b.STATE).addClass("center");
            d(this.header).find("th").not("th:last").addClass("hand").append('<span class="down" style="display: none;"></span>');
            this.surveyCount = 0;
            this.sortedColumn = b.CREATED + 1;
            d(this.header).find("th").each(function (i) {
                this.index = i
            }).bind("click", function (i) {
                a.sort.apply(g, [this.index])
            });
            d(this).bind("click", function (k) {
                var l = d(k.target).closest("tr.survey").get(0);
                if (d(k.target).hasClass("delete-button") || d(k.target.parentNode).hasClass("delete-button")) {
                    var j = d(k.target).hasClass("delete-button") ? k.target : k.target.parentNode;
                    var i = [];
                    if (g.options != null && g.options.archived == true) {
                        i = [{
                            label: "Move to main",
                            callback: function () {
                                if (d.ObjectPlanet.session.login == "admin" || (l.responseCount == 0 && l.userId == l.self.uid)) {
                                    a.unDelete.apply(g, [d(l).attr("surveyId")])
                                }
                            }
                        }, {
                            label: "Delete permanently",
                            callback: function () {
                                if (d.ObjectPlanet.session.login == "admin" || (l.responseCount == 0 && l.userId == l.self.uid)) {
                                    a.deleteSurvey.apply(g, [{
                                        surveyId: d(l).attr("surveyId"),
                                        permanent: true
                                    }])
                                }
                            }
                        }]
                    } else {
                        i = [{
                            label: "Archive survey",
                            callback: function () {
                                if (d.ObjectPlanet.session.login == "admin" || (l.responseCount == 0 && l.userId == l.self.uid)) {
                                    a.deleteSurvey.apply(g, [{
                                        surveyId: d(l).attr("surveyId")
                                    }])
                                }
                            }
                        }]
                    } if (j.popdown == null) {
                        d(j).popdown({
                            align: "left",
                            standalone: true,
                            offsetX: 3,
                            offsetY: 2,
                            items: i
                        }).popdown("showMenu", k)
                    }
                } else {
                    if (k.target.nodeName == "A") {
                        a.showUserSurveys.apply(g, [d(k.target).text()])
                    } else {
                        if (l != null && g.surveyChanged == true) {
                            if (l.popdown == null) {
                                d(l).popdown({
                                    xy: "x",
                                    offsetY: -5,
                                    beforeToggle: function (m) {
                                        d(this).popdown("setEnabled", g.surveyChanged != false)
                                    },
                                    items: [{
                                        label: "Open without saving current",
                                        callback: e.openSurvey
                                    }, {
                                        label: "Cancel"
                                    }]
                                }).popdown("showMenu", k)
                            }
                        } else {
                            if (l != null) {
                                d("body").progressIndicator("start", {
                                    label: "loading..."
                                });
                                a.loadSurvey.apply(g, [{
                                        surveyId: d(l).attr("surveyId"),
                                        clearAutoSave: true
                                    },
                                    function () {
                                        d("body").progressIndicator("stop")
                                    }
                                ])
                            }
                        }
                    }
                }
            });
            this.eventBus.listen("user.loggedIn", function (i) {
                g.surveyChanged = false;
                if (i) {
                    g.uid = i.uid
                }
                d(g.header).find("th:eq(1)").toggle(i && i.loginName == "admin")
            }).listen("user.loggedOut", function () {
                d(g).find("tr.survey").remove()
            });
            this.eventBus.listen("survey.changed", function (i) {
                g.surveyChanged = i.state;
                if (i.survey && i.survey._id && i.survey.surveySetup) {
                    a.setSurveyState.apply(g, [i.survey._id.$oid, i.survey.surveySetup])
                }
            });
            this.eventBus.listen("survey.new", function () {
                a.clearSelection.apply(g);
                a.stopResponsePoller.apply(g);
                g.surveyChanged = false
            });
            this.eventBus.listen("surveyList.filter", function (i) {
                a.showUserSurveys.apply(g, [i, true])
            })
        },
        loadSurvey: function (g, i) {
            if (g == null || g.surveyId == null || d.ObjectPlanet.session == null || d.ObjectPlanet.session.sid == null) {
                if (i != null) {
                    i()
                }
                return
            }
            var f = this;
            var h = {
                collection: "surveys",
                select: {
                    _id: {
                        $oid: g.surveyId
                    }
                }
            };
            if (g.clearAutoSave == true) {
                h.clearAutoSave = true
            }
            d.serverRequest({
                get: h
            }, function (j) {
                d("body").progressIndicator({
                    label: "refreshing..."
                });
                if (j.data != null && d.ObjectPlanet.testMode == true) {
                    a.updateLoadedSurvey.apply(f, [j.data]);
                    if (i != null) {
                        i()
                    }
                } else {
                    if (j.data != null) {
                        setTimeout(function () {
                            a.updateLoadedSurvey.apply(f, [j.data]);
                            if (i != null) {
                                i()
                            }
                        }, 5)
                    } else {
                        if (i != null) {
                            i()
                        }
                    }
                }
            })
        },
        surveySaved: function (f) {
            var g = f != undefined && f._id != undefined && f._id.$oid != undefined ? f._id.$oid : null;
            if (a.containsSurvey.apply(this, [g])) {
                a.setSurveyName.apply(this, [g, f.surveyName]);
                a.setSurveyDates.apply(this, [g, f.surveySetup])
            } else {
                a.addSurveyEntry.apply(this, [f, true])
            }
            a.setSelection.apply(this, [g])
        },
        setJSON: function (k) {
            d(this).prop("surveys", k).find("tr.survey").remove();
            var j = k != null ? k.length : 0;
            d(this.header).toggle(j > 0);
            for (var h = 0, f = ""; k && h < Math.min(c, k.length); h++) {
                f += a.createRowMarkup.apply(this, [k[h]])
            }
            for (var h = 0, g = d(f); k && h < Math.min(c, k.length); h++) {
                a.configureRow.apply(this, [g.get(h), k[h]])
            }
            g.appendTo(this);
            this.surveyCount = k ? k.length : 0;
            a.setSurveyCount.apply(this, [k ? k.length : 0]);
            d(this.header).find("th span").hide();
            if (k != null && k.length > 1) {
                d(this.header).find("th span").eq(Math.abs(this.sortedColumn) - 1).show()
            }
        },
        createRowMarkup: function (o) {
            var r = o && o._id ? o._id.$oid : "";
            var n = o && o.userId ? o.userId : "";
            var k = o && typeof o.surveyName == "string" ? o.surveyName : "";
            var l = (o && o.created ? d.ObjectPlanet.dateStr(o.created, false) : "");
            var j = (o && o.surveySetup && o.surveySetup.start ? o.surveySetup.start : 0);
            var q = (o && o.surveySetup && o.surveySetup.stop ? o.surveySetup.stop : Number.MAX_VALUE);
            var g = (o && o.surveySetup && o.surveySetup.start ? d.ObjectPlanet.dateStr(o.surveySetup.start, false) : "");
            var t = (o && o.surveySetup && o.surveySetup.stop ? d.ObjectPlanet.dateStr(o.surveySetup.stop, false) : "");
            var m = (o && o.report && o.report.responseCount ? o.report.responseCount : 0);
            var i = new Date().valueOf();
            var f = "op-web-survey-state-running";
            if (this.options != null && this.options.archived == true) {
                f = "op-web-survey-state-archived"
            } else {
                if (i < j) {
                    f = "op-web-survey-state-pending"
                } else {
                    if (i > q) {
                        f = "op-web-survey-state-ended"
                    }
                }
            }
            var h = d.ObjectPlanet && d.ObjectPlanet.session && d.ObjectPlanet.session.login == "admin" ? "" : ' style="display: none;"';
            var p = o && o.user && o.user.login ? o.user.login : n;
            if (p != null && p.length > 40) {
                p = p.substring(0, 40)
            }
            var s = '<tr class="survey" surveyId="' + r + '" userId="' + n + '">';
            s += "<td>" + k + "</td>";
            s += "<td" + h + ' id="' + p + '"><a href="#">' + p + "</a></td>";
            s += "<td>" + l + "</td>";
            s += "<td>" + g + "</td>";
            s += "<td>" + t + "</td>";
            s += '<td class="right">' + m + "</td>";
            s += '<td class="center"><span class="state ' + f + '"></span></td>';
            s += '<td><span class="delete-button" style="visibility: hidden;"></span></td>';
            return s + "</tr>"
        },
        configureRow: function (j, i) {
            var f = this;
            var h = d(j).find("td");
            j.self = this;
            j.del = h.eq(b.DELETE).find(".delete-button").deleteButton().get(0);
            j.name = h.get(b.SURVEY);
            j.responseCount = (i && i.report && i.report.responseCount ? i.report.responseCount : 0);
            j.userId = i && i.userId ? i.userId : "";
            j.surveyId = i && i._id ? i._id.$oid : "";
            d(j).hover(e.showDeleteButton, e.hideDeleteButton);
            var g = h.eq(b.STATE).find(".state");
            if (g.hasClass("op-web-survey-state-running")) {
                g.prop("state", "op-web-survey-state-running")
            }
            if (g.hasClass("op-web-survey-state-pending")) {
                g.prop("state", "op-web-survey-state-pending")
            }
            if (g.hasClass("op-web-survey-state-ended")) {
                g.prop("state", "op-web-survey-state-ended")
            }
        },
        updateLoadedSurvey: function (f) {
            if (f != null && f._id != null && f.userId != null) {
                a.setSelection.apply(this, [f._id.$oid]);
                a.setResponseCount.apply(this, [f._id.$oid, f.report.responseCount]);
                this.eventBus.trigger("survey.loaded", f)
            }
        },
        addSurveyEntry: function (h, j) {
            var i = h && h._id ? h._id.$oid : "";
            var f = h && typeof h.surveyName == "string" ? h.surveyName : "";
            if (a.containsSurvey.apply(this, [i])) {
                a.setSurveyName.apply(this, [i, f])
            } else {
                var g = d(a.createRowMarkup(h)).get(0);
                a.configureRow.apply(this, [g, h]);
                if (this.surveys == null) {
                    this.surveys = []
                }
                if (j == true) {
                    d(g).insertAfter(this.header);
                    this.surveys.unshift(h)
                } else {
                    d(g).appendTo(this);
                    this.surveys.push(h)
                }
                this.surveyCount++
            }
            d(this.header).show();
            a.setSurveyCount.apply(this, [this.surveyCount])
        },
        setSurveyName: function (g, f) {
            d(this).find("tr.survey[surveyId=" + g + "] td").eq(b.SURVEY).html(f)
        },
        setSurveyDates: function (h, f) {
            if (f != null) {
                var g = d(this).find("tr.survey[surveyId=" + h + "]");
                g.find("td").eq(b.START).text(d.ObjectPlanet.dateStr(f.start, false));
                g.find("td").eq(b.STOP).text(d.ObjectPlanet.dateStr(f.stop, false))
            }
        },
        setResponseCount: function (h, f) {
            var g = d(this).find("tr.survey[surveyId=" + h + "]").get(0);
            if (g) {
                d(g).find("td").eq(b.RESPONSES).text(f)
            }
            if (g) {
                d(g).find(".delete-button").popdown("setEnabled", f == 0 || d.ObjectPlanet.session.login == "admin")
            }
            if (g) {
                g.responseCount = f
            }
        },
        setSurveyCount: function (f) {
            d(this.header).find("th").eq(b.SURVEY).html("Survey" + (f >= 3 ? (" (" + f + ")") : "") + '<span style="display: inline-block"></span>')
        },
        setSurveyState: function (k, i) {
            var j = (i && i.start ? i.start : 0);
            var g = (i && i.stop ? i.stop : Number.MAX_VALUE);
            var f = new Date().valueOf();
            var h = d(this).find("tr[surveyId=" + k + "]").find("span.state").removeClass("op-web-survey-state-pending op-web-survey-state-ended op-web-survey-state-running").get(0);
            if (f < j) {
                d(h).addClass("op-web-survey-state-pending").prop("state", "op-web-survey-state-pending")
            } else {
                if (f > g) {
                    d(h).addClass("op-web-survey-state-ended").prop("state", "op-web-survey-state-ended")
                } else {
                    if (f >= j && f <= g) {
                        d(h).addClass("op-web-survey-state-running").prop("state", "op-web-survey-state-running")
                    }
                }
            }
        },
        containsSurvey: function (f) {
            return d(this).find("tr.survey[surveyId=" + f + "]").size() == 1
        },
        setSelection: function (f) {
            a.clearSelection.apply(this);
            d(this).find("tr[surveyId=" + f + "]").addClass("table-zebra");
            this.currentSelection = f;
            this.eventBus.trigger("surveyList.table-zebra", f)
        },
        clearSelection: function () {
            d(this).find("tr.survey").removeClass("table-zebra")
        },
        removeSurveyEntry: function (g) {
            if (d(this).find("tr.survey[surveyId=" + g + "]").remove().size() > 0) {
                this.surveyCount = Math.max(0, this.surveyCount - 1);
                for (var f = 0; this.surveys && f < this.surveys.length; f++) {
                    if (this.surveys[f] && this.surveys[f]._id && this.surveys[f]._id.$oid == g) {
                        this.surveys.splice(f, 1);
                        break
                    }
                }
            }
            d(this.header).toggle(d(this).find("tr.survey").size() > 0);
            a.setSurveyCount.apply(this, [this.surveyCount])
        },
        startResponsePoller: function () {
            var f = this;
            if (this.responsePoller == null && !d.ObjectPlanet.testMode) {
                this.responsePoller = {
                    count: 0
                };
                this.responsePoller.id = setInterval(function () {
                    a.updateCurrentResponseCount.apply(f);
                    if (f.responsePoller.count >= 300) {
                        a.stopResponsePoller.apply(f)
                    }
                }, 2000)
            }
        },
        stopResponsePoller: function () {
            if (this.responsePoller) {
                clearInterval(this.responsePoller.id);
                delete this.responsePoller
            }
        },
        sort: function (g) {
            g++;
            var f = 1;
            if (this.sortedColumn == g) {
                f = -1
            }
            if (this.sortedColumn == -g) {
                f = 1
            }
            if (this.surveys != null) {
                this.surveys.sort(function (i, h) {
                    if (g == b.SURVEY + 1 && !i.surveyName) {
                        return 1
                    }
                    if (g == b.SURVEY + 1 && !h.surveyName) {
                        return -1
                    }
                    if (g == b.SURVEY + 1 && i.surveyName != null && h.surveyName != null) {
                        return i.surveyName.toLowerCase() < h.surveyName.toLowerCase() ? -f : f
                    }
                    if (g == b.USER + 1 && (!i.user || !i.user.login)) {
                        return 1
                    }
                    if (g == b.USER + 1 && (!h.user || !h.user.login)) {
                        return -1
                    }
                    if (g == b.USER + 1 && i.user.login != null && h.user.login != null) {
                        return i.user.login.toLowerCase() < h.user.login.toLowerCase() ? -f : f
                    }
                    if (g == b.CREATED + 1 && !i.created) {
                        return 1
                    }
                    if (g == b.CREATED + 1 && !h.created) {
                        return -1
                    }
                    if (g == b.CREATED + 1) {
                        return i.created < h.created ? f : -f
                    }
                    if ((g == b.START + 1 || g == b.STATE + 1) && (!i.surveySetup || !i.surveySetup.start)) {
                        return 1
                    }
                    if ((g == b.START + 1 || g == b.STATE + 1) && (!h.surveySetup || !h.surveySetup.start)) {
                        return -1
                    }
                    if (g == b.START + 1 || g == b.STATE + 1) {
                        return i.surveySetup.start < h.surveySetup.start ? f : -f
                    }
                    if (g == b.STOP + 1 && (!i.surveySetup || !i.surveySetup.stop)) {
                        return 1
                    }
                    if (g == b.STOP + 1 && (!h.surveySetup || !h.surveySetup.stop)) {
                        return -1
                    }
                    if (g == b.STOP + 1) {
                        return i.surveySetup.stop < h.surveySetup.stop ? f : -f
                    }
                    if (g == b.RESPONSES + 1 && (i.report == null || i.report.responseCount == null)) {
                        return 1
                    }
                    if (g == b.RESPONSES + 1 && (h.report == null || h.report.responseCount == null)) {
                        return -1
                    }
                    if (g == b.RESPONSES + 1) {
                        return i.report.responseCount < h.report.responseCount ? f : -f
                    }
                    return 0
                })
            }
            if (Math.abs(this.sortedColumn) == g) {
                this.sortedColumn = -this.sortedColumn
            } else {
                this.sortedColumn = g
            }
            a.setJSON.apply(this, [this.surveys]);
            g--;
            d(this.header).find("th span").eq(g).removeClass("up down");
            if (g == b.SURVEY || g == b.USER) {
                if (f == 1) {
                    d(this.header).find("th span").eq(g).addClass("up")
                }
                if (f == -1) {
                    d(this.header).find("th span").eq(g).addClass("down")
                }
            } else {
                if (f == 1) {
                    d(this.header).find("th span").eq(g).addClass("down")
                }
                if (f == -1) {
                    d(this.header).find("th span").eq(g).addClass("up")
                }
            }
        },
        showUserSurveys: function (f, h) {
            if (h && this.originalSurveys) {
                this.surveys = this.originalSurveys
            }
            if (!this.filtered || h) {
                this.originalSurveys = d.extend([], this.surveys);
                for (var g = 0, j = []; g < this.originalSurveys.length; g++) {
                    if (this.originalSurveys[g].user && this.originalSurveys[g].user.login == f) {
                        j.push(this.originalSurveys[g])
                    }
                }
                a.setJSON.apply(this, [j]);
                this.filtered = true
            } else {
                a.setJSON.apply(this, [this.originalSurveys]);
                this.filtered = false
            }
        },
        loadSurveyList: function (g) {
            var f = this;
            d.serverRequest({
                get: {
                    collection: "surveys",
                    sort: {
                        created: -1
                    },
                    limit: 0,
                    select: {
                        archived: {
                            $exists: f.options && f.options.archived == true ? true : false
                        }
                    },
                    fields: {
                        userId: true,
                        user: true,
                        surveyName: true,
                        created: true,
                        surveySetup: true,
                        "report.responseCount": true
                    }
                }
            }, function (h) {
                var i = new Date().valueOf();
                if (h.data != null) {
                    a.setJSON.apply(f, [h.data]);
                    f.eventBus.trigger("surveyList.loaded")
                }
                if (g != null) {
                    g()
                }
            })
        },
        updateCurrentResponseCount: function () {
            if (!this.currentSelection) {
                return
            }
            var f = this;
            if (d.ObjectPlanet.session && d.ObjectPlanet.session.login != null) {
                d.serverRequest({
                    get: {
                        collection: "responses",
                        select: {
                            surveyId: this.currentSelection
                        },
                        count: true
                    }
                }, function (g) {
                    a.setResponseCount.apply(f, [f.currentSelection, g.data]);
                    f.eventBus.trigger("response.countSet", g.data)
                })
            }
        },
        addPage: function () {
            if (this.surveys != null) {
                var m = d(this).find("tr.survey").size();
                var l = Math.min(c, this.surveys.length - m);
                for (var k = m, f = ""; this.surveys && k < m + l; k++) {
                    f += a.createRowMarkup(this.surveys[k])
                }
                for (var k = m, h = 0, g = d(f); this.surveys && k < m + l; k++, h++) {
                    a.configureRow.apply(this, [g.get(h), this.surveys[k]])
                }
                d(this).find("tr.survey:last").after(g)
            }
        },
        deleteSurvey: function (g) {
            var f = this;
            if (g != null && g.surveyId != null) {
                if (g.permanent == true && g.force != true) {
                    var h = "The survey and it's responses will be permanently removed!<br>";
                    h += "Do you really want to delete it?";
                    f.unsaved = d('<div class="op-delete-permanent">' + h + "</div>").dialogBox({
                        title: "Warning!",
                        cancel: {
                            label: "No"
                        },
                        removeOnClose: true,
                        ok: {
                            label: "Yes",
                            callback: function () {
                                g.force = true;
                                a.deleteSurvey.apply(f, [g]);
                                return true
                            }
                        }
                    }).dialogBox("show").get(0)
                } else {
                    var i = {
                        action: "survey.delete",
                        surveyId: g.surveyId
                    };
                    if (g.permanent == true) {
                        i.permanent = true
                    }
                    d.serverRequest(i, function (j) {
                        a.removeSurveyEntry.apply(f, [g.surveyId]);
                        f.eventBus.trigger("survey.deleted", g.surveyId)
                    })
                }
            }
        },
        unDelete: function (g) {
            var f = this;
            d.serverRequest({
                action: "survey.unDelete",
                surveyId: g
            }, function (h) {
                a.removeSurveyEntry.apply(f, [g]);
                f.eventBus.trigger("survey.undeleted", g)
            })
        }
    };
    var e = {
        showDeleteButton: function () {
            if (d.ObjectPlanet.session && d.ObjectPlanet.session.login == "admin") {
                d(this.del).css("visibility", "visible").deleteButton("paint")
            } else {
                if (this.responseCount == 0 && this.userId == this.self.uid) {
                    d(this.del).css("visibility", "visible").deleteButton("paint")
                }
            }
        },
        hideDeleteButton: function () {
            d(this.del).css("visibility", "hidden").popdown("close")
        },
        openSurvey: function () {
            var f = d(this).closest("tr").get(0);
            a.loadSurvey.apply(f.self, [{
                surveyId: f.surveyId,
                clearAutoSave: true
            }])
        }
    }
})(jQuery);
(function (b) {
    b.fn.surveyModule = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d) {
            var e = b(this).addClass("survey-module op-app-module").prop("autosaved", 0).get(0);
            if (!b.browser.mozilla) {
                b(this).addClass("noSelect")
            }
            this.saving = false;
            this.eventBus = d ? d : new b.ObjectPlanet.EventBus();
            this.editor = b(b.surveyEditor()).surveyEditor(this.eventBus).get(0);
            this.setup = b("<div></div>").surveySetup(this.editor.json, this.eventBus).get(0);
            this.theme = b("<div></div>").themeEditor(this.editor.json, this.eventBus).themeEditor("apply").get(0);
            b(this).module({
                title: "Survey",
                menu: ["Form", "Setup", "Theme"],
                content: [this.editor, this.setup, this.theme]
            });
            this.newIcon = b('<button class="borderBox">New</button>').popdown({
                offsetX: -2,
                offsetY: 2,
                items: [{
                    label: "Survey",
                    callback: function () {
                        a.reset.apply(e);
                        a.autoSave.apply(e, [true])
                    }
                }, {
                    label: "Copy",
                    callback: function () {
                        a.copy.apply(e);
                        a.autoSave.apply(e, [true]);
                        e.eventBus.trigger("survey.new", e.editor.json)
                    }
                }]
            }).appendTo(b(this.header).find("td:first")).get(0);
            this.saveIcon = b('<button class="borderBox">Save</button>').appendTo(b(this.header).find("td:first")).bind("mouseup", function (f) {
                if (e.signedIn) {
                    a.save.apply(e, [e.editor.json])
                } else {
                    e.eventBus.trigger("user.login", {
                        save: true
                    })
                }
            }).attr("disabled", "disabled").css("cursor", "default").get(0);
            this.undo = b('<canvas class="disabled"></canvas>').css({
                width: "23px",
                height: "23px"
            }).undoRedoIcon().appendTo(this.icons).get(0);
            b(this.undo).floatLabel({
                label: "Undo",
                position: "bottom",
                free: true
            });
            this.redo = b('<canvas class="disabled"></canvas>').css({
                width: "23px",
                height: "23px"
            }).undoRedoIcon({
                redo: true
            }).appendTo(this.icons).get(0);
            b(this.redo).floatLabel({
                label: "Redo",
                position: "bottom",
                free: true
            });
            this.undoThemeEntries = [{
                time: new Date().valueOf(),
                css: b(this.theme).themeEditor("get")
            }];
            this.undoEntries = [{
                time: new Date().valueOf(),
                json: this.editor.json != null ? JSON.parse(JSON.stringify(this.editor.json)) : null
            }];
            this.undoEntries[0].json.questions[0].undo = {
                questionId: 0,
                changeCounter: 0
            };
            this.undoEntries.current = this.undoThemeEntries.current = 0;
            this.currentUndoEntries = this.undoEntries;
            this.undoSlider = b('<div class="undo-slider borderBox" style="display: none;"><div></div><span class="frame-close"></span></div>').appendTo(this).get(0);
            this.undoSlider.slider = b(this.undoSlider).find("div").rangeSlider({
                current: 0,
                max: 0
            }).bind("change", function (f) {
                if (this.current > e.currentUndoEntries.current) {
                    a.undoRedo.apply(e, ["redo", false, this.current])
                } else {
                    if (this.current < e.currentUndoEntries.current) {
                        a.undoRedo.apply(e, ["undo", false, this.current])
                    }
                }
            }).get(0);
            this.undoSlider.close = b(this.undoSlider).find(".frame-close").bind("click", function () {
                b(e.undoSlider).slideUp(b.ObjectPlanet.SPEED / 2);
                b("head > style#runtimeCSS").remove()
            }).get(0);
            b(this).bind("focusin", function (f) {
                b(e.undoSlider).slideUp(b.ObjectPlanet.SPEED / 2);
                b("head > style#runtimeCSS").remove()
            });
            b(this.menu).find("label.button").bind("click", function (f) {
                e.currentUndoEntries = b(this).text() == "Form" ? e.undoEntries : e.undoThemeEntries;
                a.setUndoState.apply(e);
                e.undoSlider.slider.current = e.currentUndoEntries.current;
                b(e.undoSlider).hide()
            });
            this.eventBus.listen("user.loggedIn", function (f) {
                b(e.editor.surveyName).trigger("focus");
                e.signedIn = true;
                if (f && f.save == true) {
                    a.save.apply(e)
                }
                if (b.ObjectPlanet.session != null && b.ObjectPlanet.session.login == "admin") {
                    a.enableSurveyImport.apply(e)
                }
            }).listen("user.loggedOut", function () {
                e.signedIn = false;
                a.reset.apply(e)
            });
            b(this).bind("change", function (g) {
                b(e.saveIcon).removeAttr("disabled").css("cursor", "pointer").text("Save");
                e.eventBus.trigger("survey.changed", {
                    state: true,
                    survey: e.editor.json
                });
                var f = new Date().valueOf();
                if (b.ObjectPlanet.session && b.ObjectPlanet.session.sid && f > e.autosaved + (5000) && !b.ObjectPlanet.testMode) {
                    a.autoSave.apply(e)
                }
                if (e.editor.preview != null) {
                    b(e.editor.preview.web).webSurvey("adjustSectionTable")
                }
            });
            b(this.theme).bind("change", function (f) {
                e.editor.json.appearance = e.theme.json.appearance;
                if (e.editor.preview) {
                    b(e.editor.preview.web).webSurvey("adjust");
                    if (f.target == this.survey.css.backgroundColor || f.target == this.survey.css.backgroundColor.picker) {
                        b(e.editor.preview.web).webSurvey("setProgressColor")
                    }
                }
            });
            this.eventBus.listen("survey.loaded", function (f) {
                c.surveyLoaded.apply(e, [f])
            }).listen("survey.save", function () {
                a.save.apply(e, [e.editor.json])
            }).listen("survey.saved", function (f) {
                c.surveySaved.apply(e, [f])
            }).listen("survey.changed", function (f) {
                b(e.editor).surveyEditor("setChanged", f.state)
            }).listen("survey.deleted", function (f) {
                c.surveyDeleted.apply(e, [f])
            }).listen("survey.close", function () {
                a.reset.apply(e)
            }).listen("survey.new", function () {
                e.contentContainer.scrollTop = 0;
                a.resetUndo.apply(e)
            }).listen("report.loaded", function (f) {
                if (e.editor.json.report == null) {
                    e.editor.json.report = {}
                }
                e.editor.json.report.responseCount = f.report.responseCount;
                b(e.editor).surveyEditor("setHasResponses", e.editor.json.report.responseCount > 0)
            }).listen("response.deleted", function (f) {
                if (e.editor.json.report != null) {
                    e.editor.json.report.responseCount = f.responseCount
                }
                b(e.editor).surveyEditor("setHasResponses", f.responseCount > 0)
            }).listen("response.countSet", function (f) {
                if (e.editor.json && e.editor.json.report) {
                    e.editor.json.report.responseCount = f
                }
                b(e.editor).surveyEditor("setHasResponses", f > 0)
            }).listen("theme.applied", function (f) {
                if (e.editor.preview) {
                    b(e.editor.preview.web).webSurvey("adjustSectionTable").webSurvey("adjust").webSurvey("setProgressColor", f)
                }
            });
            this.eventBus.listen("module.movedTo", function (g) {
                if (e.editor.needsUpdate && g.index == b.ObjectPlanet.POS_SURVEY && e.signedIn == true) {
                    b(e).progressIndicator("start", {
                        plain: true
                    });
                    var f = function () {
                        b(e.editor).surveyEditor("reset", e.editor.json).prop("needsUpdate", false);
                        b(e).progressIndicator("stop");
                        b(e.editor.surveyName).trigger("focus")
                    };
                    if (b.ObjectPlanet.testMode != true) {
                        setTimeout(f, 20)
                    } else {
                        f.apply(e)
                    }
                } else {
                    if (g.index == b.ObjectPlanet.POS_SURVEY && e.signedIn == true) {
                        if (b.ObjectPlanet.testMode != true && e.editor.preview != null) {
                            setTimeout(function () {
                                b(e.editor.preview.web).webSurvey("adjust").webSurvey("adjustSectionTable")
                            }, 20)
                        } else {
                            if (e.editor.preview != null) {
                                b(e.editor.preview.web).webSurvey("adjust").webSurvey("adjustSectionTable")
                            }
                        }
                    }
                }
            });
            b(this.menu).find(".button:contains(Form)").bind("click", function (f) {
                b(e.editor).surveyEditor("adjust")
            });
            b(this.editor).add(this.theme).bind("change", function (f) {
                a.addUndo.apply(e, [f])
            });
            b(this.undo).bind("click", function (f) {
                if (!b(this).hasClass("disabled")) {
                    a.undoRedo.apply(e, ["undo"])
                }
            });
            b(this.redo).bind("click", function (f) {
                if (!b(this).hasClass("disabled")) {
                    a.undoRedo.apply(e, ["redo"])
                }
            });
            b(this.menu).find("label:contains(Theme)").bind("click", function (f) {
                b(e.theme).themeEditor("loadThemes")
            });
            b(this.editor.surveyName).trigger("focus").trigger("select")
        },
        reset: function () {
            b(this.saveIcon).text("Save").attr("disabled", "disabled").css("cursor", "default");
            b(this.theme).themeEditor("reset").themeEditor("apply");
            b(this.editor).surveyEditor("reset", null, true);
            b(this.setup).surveySetup("reset", this.editor.json);
            b(this).module("select", 0);
            b(this.editor.surveyName).val("type survey name").trigger("focus").trigger("select");
            this.eventBus.trigger("survey.new", this.editor.json)
        },
        copy: function () {
            b(this.saveIcon).removeAttr("disabled").css("cursor", "pointer").text("Save");
            b(this.editor).surveyEditor("copy");
            if (this.editor.json.surveyName) {
                b(this.editor.surveyName).val(this.editor.json.surveyName)
            }
            b(this.editor.surveyName).trigger("focus").trigger("select")
        },
        save: function (g, j) {
            var d = this;
            if (g == null) {
                g = this.editor.json
            }
            if (g.surveyName == "type survey name" || g.surveyName == "" || g.surveyName == null) {
                b(this).module("select", 0);
                b(this.editor.surveyName).addClass("error").trigger("focus").trigger("select")
            } else {
                if (!b(this.editor).surveyEditor("hasChanged")) {
                    return
                } else {
                    if (this.saving == false) {
                        if (j != true && b.ObjectPlanet.session && b.ObjectPlanet.session.login == "admin" && g.userId != null && b.ObjectPlanet.session.uid != g.userId) {
                            var h = b.ObjectPlanet.miniDialog({
                                content: ('<div class="not-owner"><div>You are not the owner!<br>Save anyway?</div><br><div class="right"><button class="hand">Yes</button><button class="hand">No</button></div></div>')
                            });
                            b(h).find("button").bind("click", function () {
                                b(h.back).remove()
                            });
                            b(h).find("button:contains(Yes)").bind("click", function () {
                                a.save.apply(d, [g, true])
                            });
                            return
                        }
                        b(this.saveIcon).text("Saving...");
                        b(this).progressIndicator("start", {
                            plain: true
                        });
                        b(this.editor.surveyName).removeClass("error");
                        if (g.appearance == null) {
                            g.appearance = {}
                        }
                        g.appearance.css = b(this.theme).themeEditor("get");
                        delete g.appearance.name;
                        delete g.appearance.themeId;
                        if (this.theme.browser.themeId != null) {
                            g.appearance.name = this.theme.browser.name;
                            g.appearance.themeId = this.theme.browser.themeId
                        }
                        for (var f = 0; f < g.questions.length; f++) {
                            delete g.questions[f].undo
                        }
                        var e = {
                            hasResponses: this.editor.hasResponses == true
                        };
                        a._save.apply(this, [g, e,
                            function (i) {
                                b(d).progressIndicator("stop");
                                if (i.resultCode == b.ObjectPlanet.ResultCode.OK) {
                                    d.editor.json._id = i.data.survey._id;
                                    d.editor.json.userId = i.data.survey.userId;
                                    d.editor.json.created = i.data.survey.created;
                                    d.editor.json.report = i.data.survey.report;
                                    d.editor.json.user = i.data.survey.user;
                                    d.eventBus.trigger("survey.saved", d.editor.json);
                                    d.changed = false
                                } else {
                                    if (i.resultCode == b.ObjectPlanet.ResultCode.INVALID_INPUT) {
                                        if (i.error == "Could not store the survey: The survey has responses and the structure cannot change") {
                                            b('<div class="survey-editor-message borderBox"></div>').html("Sorry, but the survey has received responses and its structure can not be changed. If this is a test response you saved, simply delete it and try to save again.").css({
                                                "line-height": "1.6em",
                                                width: "440px"
                                            }).framed()
                                        } else {
                                            b.ObjectPlanet.globalErrorHandler({
                                                error: "Invalid input",
                                                url: "objectplanet.opinio.surveymodule.js",
                                                line: 315
                                            })
                                        }
                                    }
                                }
                                d.saving = false
                            }
                        ])
                    }
                }
            }
        },
        _save: function (f, e, g) {
            if (f.surveySetup == null) {
                f.surveySetup = {}
            }
            if (f.surveySetup.start == null) {
                f.surveySetup.start = new Date().valueOf()
            }
            if (f.surveySetup.stop == null) {
                f.surveySetup.stop = new Date(new Date().setDate(new Date().getDate() + 7)).valueOf()
            }
            this.saving = true;
            var d = this;
            delete f.user;
            delete f.report;
            b.serverPost({
                action: "survey.store",
                data: JSON.stringify({
                    textOnly: e && e.hasResponses == true,
                    survey: f
                })
            }, function (h) {
                if (g != null) {
                    g.apply(d, [h])
                }
            }, function () {
                b(d).progressIndicator("stop");
                b.ObjectPlanet.globalErrorHandler({
                    error: "Internal error",
                    url: "objectplanet.opinio.surveymodule.js",
                    line: 359
                })
            })
        },
        autoSave: function (d) {
            if (b.ObjectPlanet.session != null && b.ObjectPlanet.session.noAutoSave == true) {
                return
            }
            for (var f = 0; f < this.editor.json.questions.length; f++) {
                delete this.editor.json.questions[f].undo
            }
            this.editor.json.surveyName = b(this.editor.surveyName).val();
            var e = this;
            b.serverPost({
                action: "survey.autosave",
                clear: d,
                data: d ? null : JSON.stringify(this.editor.json)
            }, function (g) {
                if (g != null && g.resultCode == b.ObjectPlanet.ResultCode.OK) {
                    e.autosaved = new Date().valueOf()
                } else {
                    if (g != null && b.ObjectPlanet.session != null) {
                        b.ObjectPlanet.session.noAutoSave = g.resultCode == b.ObjectPlanet.ResultCode.NOT_LOGGED_IN
                    }
                }
            })
        },
        addUndo: function (g) {
            if (this.undoing == true) {
                return
            }
            if (g.dragging == true) {
                return
            }
            if (this.currentUndoEntries == this.undoEntries && (b(g.target).is(":text") || g.target.nodeName == "TEXTAREA") && document.activeElement != g.target) {
                return
            }
            if ((b(g.target).is(":text") || g.target.nodeName == "TEXTAREA") && document.activeElement == g.target && this.currentUndoEntries == this.undoEntries) {
                if (new Date().valueOf() < this.undoEntries[this.undoEntries.length - 1].time + b.ObjectPlanet.UNDO_DELAY * 1000) {
                    return
                }
            }
            var d = b(g.target).closest(".question-editor").get(0);
            if (d != null) {
                d.changeCounter = ++this.editor.changeCounter
            }
            if (this.currentUndoEntries == this.undoEntries && this.editor.json != null) {
                if (this.undoEntries.current < this.undoEntries.length - 1) {
                    this.undoEntries.push({
                        time: new Date().valueOf(),
                        json: this.undoEntries[this.undoEntries.current].json
                    })
                }
                var f = JSON.parse(JSON.stringify(this.editor.json));
                for (var e = 0; e < f.questions.length; e++) {
                    f.questions[e].undo = {
                        questionId: this.editor.questions[e].questionId,
                        changeCounter: this.editor.questions[e].changeCounter
                    }
                }
                this.undoEntries.push({
                    time: new Date().valueOf(),
                    json: f
                })
            } else {
                if (this.currentUndoEntries == this.undoThemeEntries) {
                    if (this.undoThemeEntries.current < this.undoThemeEntries.length - 1) {
                        this.undoThemeEntries.push({
                            time: new Date().valueOf(),
                            css: this.undoThemeEntries[this.undoThemeEntries.current].css
                        })
                    }
                    this.undoThemeEntries.push({
                        time: new Date().valueOf(),
                        css: b(this.theme).themeEditor("get")
                    })
                }
            }
            this.currentUndoEntries.current = this.currentUndoEntries.length - 1;
            a.setUndoState.apply(this);
            b(this.undoSlider.slider).prop("current", ++this.undoSlider.slider.max).rangeSlider("adjust")
        },
        undoRedo: function (e, l, g) {
            this.undoing = true;
            var d = this.currentUndoEntries;
            var k = d.current;
            if (g == null && e == "undo" && d.current > 0) {
                if (d == this.undoEntries && d.length > 1 && d.current == d.length - 1) {
                    var j = JSON.parse(JSON.stringify(this.editor.json));
                    for (var h = 0; h < j.questions.length; h++) {
                        j.questions[h].undo = {
                            questionId: this.editor.questions[h].questionId,
                            changeCounter: this.editor.questions[h].changeCounter
                        }
                    }
                    d[d.current] = {
                        time: new Date().valueOf(),
                        json: j
                    }
                }
                d.current--
            } else {
                if (g == null && e == "redo" && d.current < d.length - 1) {
                    d.current++
                } else {
                    if (typeof g == "number" && g >= 0 && g < d.length) {
                        d.current = g
                    }
                }
            } if (d.current != k) {
                if (d == this.undoEntries) {
                    b(this.editor).surveyEditor("update", JSON.parse(JSON.stringify(d[d.current].json)))
                } else {
                    b(this.theme).themeEditor("set", JSON.parse(JSON.stringify(d[d.current].css))).themeEditor("apply")
                }
                a.setUndoState.apply(this);
                var f = new Date(d[d.current].time).toLocaleTimeString();
                if (!b(this.undoSlider).is(":visible")) {
                    b(this.undoSlider).css("opacity", "0").show();
                    if (l != false) {
                        b(this.undoSlider.slider).prop("current", d.current).rangeSlider("adjust")
                    }
                    b(this.undoSlider).css("opacity", "1").hide()
                }
                b(this.undoSlider).slideDown(b.ObjectPlanet.SPEED / 2, function () {
                    if (l != false) {
                        b(this.slider).prop("current", d.current).rangeSlider("adjust")
                    }
                    b(this.slider).rangeSlider("setLabel", f).rangeSlider("toggleLabel", true);
                    if (b("head > style#runtimeCSS").size() <= 0) {
                        b('<style id="runtimeCSS">.textSelect { -webkit-user-select: none; -moz-user-select: none; -o-user-select: none; user-select: none; }</style>').appendTo("head")
                    }
                });
                b(this.saveIcon).text("Save").removeAttr("disabled").css("cursor", "pointer");
                b(this.editor).surveyEditor("setChanged", true)
            }
            this.undoing = false
        },
        setUndoState: function () {
            var d = this.currentUndoEntries;
            b(this.undo).toggleClass("disabled", d.length == 0 || d.current == 0);
            b(this.redo).toggleClass("disabled", d.length == 0 || d.current == d.length - 1);
            this.undoSlider.slider.max = d.length - 1
        },
        resetUndo: function (f) {
            var e = this.undoEntries === this.currentUndoEntries;
            var d = f != null ? JSON.parse(JSON.stringify(f)) : JSON.parse(JSON.stringify(this.editor.json));
            this.undoEntries = [{
                time: new Date().valueOf(),
                json: d
            }];
            this.undoThemeEntries = [{
                time: new Date().valueOf(),
                css: f && f.appearance ? f.appearance.css : b(this.theme).themeEditor("get")
            }];
            this.currentUndoEntries = e ? this.undoEntries : this.undoThemeEntries;
            this.undoEntries.current = this.undoThemeEntries.current = 0;
            a.setUndoState.apply(this);
            b(this.undoRedo).removeClass("selected");
            this.undoSlider.slider.max = this.undoSlider.slider.current = 1
        },
        enableSurveyImport: function () {
            if (b.ObjectPlanet.session == null || b.ObjectPlanet.session.login != "admin") {
                return
            }
            var d = this;
            if (this.newIcon.popdownOptions && this.newIcon.popdownOptions.items && this.newIcon.popdownOptions.items.length == 2) {
                b(this.newIcon).popdown("add", {
                    label: "Import",
                    callback: function () {
                        a.openSurveyImport.apply(d)
                    }
                })
            }
        },
        openSurveyImport: function () {
            var f = function () {
                b(document).find(".op-progress-back").each(function () {
                    b(this.parentNode).progressIndicator("stop")
                })
            };
            var e = b.ObjectPlanet.miniDialog({
                close: true,
                closeCallback: f,
                content: ('<div class="survey-import"><textarea class="borderBox"></textarea><br><button>Import</button><label style="color: yellow;"></label>')
            });
            b(e).find("textarea").focus();
            var d = this;
            b(e).find("button").bind("click", function (i) {
                try {
                    var j = b(e).find("textarea").val();
                    var h = JSON.parse(b(e).find("textarea").val());
                    delete h._id;
                    delete h.responseTicket;
                    if (h.surveyName != null) {
                        h.surveyName += " - imported"
                    }
                    a._save.apply(d, [h, {
                            hasResponses: false
                        },
                        function (k) {
                            d.saving = false;
                            if (k && k.resultCode == b.ObjectPlanet.ResultCode.OK) {
                                b(e.close).trigger("click");
                                d.eventBus.trigger("survey.saved", k.data.survey).trigger("survey.load", k.data.survey._id.$oid)
                            } else {
                                b(e).find("label").text(k.error)
                            }
                            f()
                        }
                    ])
                } catch (g) {
                    b(e).find("label").text(g);
                    f()
                }
            })
        }
    };
    var c = {
        surveyLoaded: function (d) {
            if (d != null) {
                b(this.editor.surveyName).removeClass("error").val(d.surveyName != null ? d.surveyName : "");
                b(this.editor).surveyEditor("reset", d, true).surveyEditor("align");
                b(this.setup).surveySetup("reset", d)
            }
            if (b(this).is(":visible")) {
                b(this.editor.heading.input).trigger("focus")
            }
            b(this.saveIcon).attr("disabled", "disabled").css("cursor", "default").text("Saved");
            b(this.editor).surveyEditor("setHasResponses", d && d.report && d.report.responseCount > 0);
            a.resetUndo.apply(this, [d]);
            this.eventBus.trigger("survey.changed", {
                state: false
            })
        },
        surveySaved: function (d) {
            b(this.saveIcon).attr("disabled", "disabled").css("cursor", "default").text("Saved");
            this.editor.changed = false;
            if (this.editor.surveyName === document.activeElement) {
                b(this.editor.heading.input).trigger("focus")
            }
            this.eventBus.trigger("survey.changed", {
                state: false
            })
        },
        surveyDeleted: function (d) {
            if (this.editor.json && this.editor.json._id && this.editor.json._id.$oid == d) {
                b(this.editor.surveyName).val("type survey name").trigger("focus");
                b(this.editor).surveyEditor("reset", null, true);
                b(this.theme).themeEditor("set").themeEditor("apply")
            }
        }
    }
})(jQuery);
(function (c) {
    var b = '<div class="separator"><a>Insert question</a><a>Copy question</a><a>Section split</a></div>';
    c.surveyEditor = function (g) {
        var f = '<div class="survey-editor">';
        f += '<span class="main-help-button" style="visibility: hidden;">?</span>';
        var j = g && g.surveyName != null ? ' value="' + g.surveyName + '"' : ' value="type survey name"';
        f += '<table class="surveyName" cellspacing="0" cellpadding="0">';
        f += '<tr><td class="nowrap label">Survey name</td>';
        f += '<td class="fullWidth"><input class="borderBox name fullWidth"' + j + "></td></tr></table>";
        var j = g && g.surveyTexts && g.surveyTexts.surveyHeading ? ' value="' + g.surveyTexts.surveyHeading.def + '"' : "";
        f += '<table class="heading-table fullWidth" cellspacing="0" cellpadding="0"><tr><td class="input fullWidth">';
        f += c.inputBox({
            label: "heading",
            classes: "heading",
            attributes: 'type="text" placeholder="Click to add a survey heading..."' + j
        });
        f += "</td>";
        f += '<td class="top" style="display: none;">';
        f += '<div class="include nowrap noSelect borderBox">Include in<br>sections</div>';
        f += "</td></tr></table>";
        f += c.autoSizeTextArea({
            label: "introduction",
            classes: "introduction",
            attributes: 'placeholder="Click to add a survey introduction..."',
            content: g && g.surveyTexts && g.surveyTexts.surveyIntro ? g.surveyTexts.surveyIntro.def : ""
        });
        f += '<div class="questions">' + c.surveyEditor.questions() + "</div>";
        f += '<div class="separator last-separator">';
        f += '<a tabindex="0">Add question</a>';
        f += '<a tabindex="0">Copy question</a>';
        f += '<a tabindex="0">Section split</a>';
        f += "</div>";
        f += '<table class="button-labels borderBox" cellspacing="0" cellpadding="0"><tr>';
        var k = g && g.surveyTexts && g.surveyTexts.start ? g.surveyTexts.start.def : "Start";
        var e = g && g.surveyTexts && g.surveyTexts.back ? g.surveyTexts.back.def : "Back";
        var h = g && g.surveyTexts && g.surveyTexts.next ? g.surveyTexts.next.def : "Next";
        var i = g && g.surveyTexts && g.surveyTexts.submit ? g.surveyTexts.submit.def : "Submit";
        f += '<td style="display: none;">' + c.inputBox({
            label: "start-button",
            classes: "surveyEditor-start",
            attributes: 'type="text" value="' + k + '"'
        }) + "</td>";
        f += '<td style="display: none;">' + c.inputBox({
            label: "back-button",
            classes: "surveyEditor-back",
            attributes: 'type="text" value="' + e + '"'
        }) + "</td>";
        f += '<td style="display: none;">' + c.inputBox({
            label: "next-button",
            classes: "surveyEditor-next",
            attributes: 'type="text" value="' + h + '"'
        }) + "</td>";
        f += "<td>" + c.inputBox({
            label: "submit-button",
            classes: "submit",
            attributes: 'type="text" value="' + i + '"'
        }) + "</td>";
        f += "</tr></table>";
        f += c.autoSizeTextArea({
            classes: "thankyou",
            label: "thank you note",
            attributes: 'placeholder="Click to add a thank you note..."',
            content: g && g.surveyTexts && g.surveyTexts.thankYouNote ? g.surveyTexts.thankYouNote.def : "Thank you."
        });
        return f + "</div>"
    }, c.surveyEditor.questions = function (h, j) {
        if (h && h.questions && h.questions.length == 0) {
            return ""
        }
        var e = "";
        var g = h && h.report && h.report.responseCount > 0;
        if (h == null || (h != null && h.questions != null && h.questions.length == 0)) {
            e += b + c.questionEditor(null, 1, g)
        }
        for (var f = 0; h != null && h.questions != null && f < h.questions.length; f++) {
            e += b + c.questionEditor(h.questions[f], (f + 1), g, j)
        }
        return e
    };
    c.fn.surveyEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (e) {
            var f = c(this).prop("enabled", true).prop("hasResponses", false).prop("questionId", 0).prop("changeCounter", 0).get(0);
            this.eventBus = e ? e : new c.ObjectPlanet.EventBus();
            this.json = {
                surveyTexts: {
                    surveyHeading: {
                        def: ""
                    },
                    surveyIntro: {
                        def: ""
                    },
                    submit: {
                        def: "Submit"
                    },
                    thankYouNote: {
                        def: "Thank you."
                    }
                },
                questions: [{}]
            };
            this.surveyName = c(this).find(".surveyName input").inputBox({
                defaultText: "type survey name"
            }).bind("keyup change", d.changeSurveyName).prop("self", this).get(0);
            this.heading = c(this).find(".heading").prop("widget", this).parent().inputBox({
                disabled: false
            }).find("input").bind("change blur", d.setHeading).end().get(0);
            this.includeHeading = c(this).find(".heading-table div.include").bind("click", function () {
                c(this).toggleClass("active");
                if (f.json.surveyTexts.surveyHeading.includeInSections != null) {
                    delete f.json.surveyTexts.surveyHeading.includeInSections
                }
                if (c(this).hasClass("active")) {
                    f.json.surveyTexts.surveyHeading.includeInSections = true
                }
                if (f.preview != null) {
                    c(f.preview.web).webSurvey("includeHeadingInSections", c(this).hasClass("active"))
                }
                if (f.overview != null) {
                    a.addOverview.apply(f, [f.overview])
                }
                c(this).trigger("change")
            }).get(0);
            this.introduction = c(this).find(".introduction").prop("widget", this).parent().autoSizeTextArea({
                horizontal: false,
                disabled: false
            }).find("textarea").bind("change blur", d.setIntro).end().get(0);
            this.questionContainer = c(this).find("div.questions").get(0);
            this.questions = [c(this.questionContainer).find(".question-editor").get(0)];
            this.questions[0].separator = c(this.questionContainer).find(".separator").get(0);
            c(this.questions[0]).prop("questionId", this.questionId++).prop("changeCounter", this.changeCounter);
            a.configureQuestion.apply(this, [this.questions[0], 0]);
            this.lastSeparator = c(this).find(".last-separator").get(0);
            this.addQuestion = c(this).find(".last-separator a:eq(0)").get(0);
            this.addCopy = c(this).find(".last-separator a:eq(1)").get(0);
            c(this.addQuestion).add(this.addCopy).bind("click keydown", function (g) {
                if (g.type == "click" || (g.type == "keydown" && g.keyCode == c.ObjectPlanet.KEY.ENTER)) {
                    a.addQuestion.apply(f, [{
                        requestFocus: true,
                        copy: g.target == f.addCopy
                    }])
                }
                if (g.keyCode == c.ObjectPlanet.KEY.ENTER) {
                    return false
                }
            });
            this.addSection = c(this).find(".last-separator a:eq(2)").bind("click keydown", function (g) {
                if (g.type == "click" || (g.type == "keydown" && g.keyCode == c.ObjectPlanet.KEY.ENTER)) {
                    a.createSection.apply(f, [-1])
                }
                if (g.keyCode == c.ObjectPlanet.KEY.ENTER) {
                    return false
                }
            }).get(0);
            this.questionMap = [this.questions[0]];
            this.thankyou = c(this).find(".thankyou").prop("widget", this).parent().autoSizeTextArea({
                horizontal: false,
                reset: false,
                disabled: false,
                defaultText: "Thank you."
            }).find("textarea").bind("change blur", d.setThankYou).end().get(0);
            this.start = c(this).find(".surveyEditor-start").prop("widget", this).parent().inputBox({
                disabled: false,
                defaultText: "Start"
            }).find("input").bind("change blur", d.setStart).end().get(0);
            this.back = c(this).find(".surveyEditor-back").prop("widget", this).parent().inputBox({
                disabled: false,
                defaultText: "Back"
            }).find("input").bind("change blur", d.setBack).end().get(0);
            this.next = c(this).find(".surveyEditor-next").prop("widget", this).parent().inputBox({
                disabled: false,
                defaultText: "Next"
            }).find("input").bind("change blur", d.setNext).end().get(0);
            this.submit = c(this).find(".submit").prop("widget", this).parent().inputBox({
                disabled: false,
                defaultText: "Submit"
            }).find("input").bind("change blur", d.setSubmit).end().get(0);
            c(this).bind("showMover", function (g) {
                c(this).find(".question-mover").hide();
                if (this.json.questions.length > 1) {
                    c(g.question).questionEditor("showMover", this.json)
                }
            }).bind("move", function (g) {
                a.move.apply(f, [g]);
                f.questions[g.to].numberLabel.mover = null;
                c(f.questions[g.to].questionText).focus()
            });
            this.help = c(this).find(".main-help-button").helpButton().bind("click", function () {
                c.murveyHelp({
                    sections: ["create-survey", "undo", "sections"]
                })
            }).get(0);
            c(this).hover(function () {
                c(f.help).css("visibility", "visible")
            }, function () {
                c(f.help).css("visibility", "hidden")
            });
            this.eventBus.listen("module.movedTo", function (g) {
                if (g.index == c.ObjectPlanet.POS_SURVEY) {
                    a.adjust.apply(f)
                }
            });
            this.eventBus.listen("question.delete", function (g) {
                a.deleteQuestion.apply(f, [g])
            });
            c(this).bind("focusin", function (h) {
                if (f.surveyFocus == null) {
                    f.surveyFocus = {}
                }
                if (h.target != null && f.eventBus != null) {
                    var i = c(h.target).closest(".section-intro").get(0);
                    var g = c(h.target).closest(".question-editor").get(0);
                    f.surveyFocus.section = i != null ? i.number + 1 : null;
                    f.surveyFocus.question = g != null ? g.number : null;
                    f.surveyFocus.heading = h.target === f.heading.input;
                    f.surveyFocus.introduction = h.target === f.introduction.input;
                    f.surveyFocus.start = h.target === f.start.input;
                    f.surveyFocus.submit = h.target === f.submit.input;
                    f.surveyFocus.thankyou = h.target === f.thankyou.input;
                    if (h.target === f.back.input || h.target === f.next.input) {
                        f.surveyFocus.section = 1
                    }
                    f.eventBus.trigger("survey.focus", f.surveyFocus)
                }
            });
            this.eventBus.listen("overview.clicked", function (g) {
                if (g != null && typeof g.question == "number") {
                    c(f.questions[g.question - 1].questionText).focus()
                } else {
                    if (g != null && typeof g.section == "number" && f.sections != null) {
                        if (g.heading == true) {
                            c(f.sections[g.section].heading.input).focus()
                        }
                        if (g.intro == true) {
                            c(f.sections[g.section].intro.input).focus()
                        }
                    } else {
                        if (g != null && g.heading == true) {
                            c(f.heading.input).focus()
                        } else {
                            if (g != null && g.introduction == true) {
                                c(f.introduction.input).focus()
                            } else {
                                if (g != null && g.thankyou == true) {
                                    c(f.thankyou.input).focus()
                                }
                            }
                        }
                    }
                }
            })
        },
        reset: function (h, k) {
            this.json = h ? h : {};
            if (!this.json.surveyTexts) {
                this.json.surveyTexts = {}
            }
            if (!this.json.surveyTexts.surveyHeading) {
                this.json.surveyTexts.surveyHeading = {
                    def: ""
                }
            }
            if (!this.json.surveyTexts.surveyIntro) {
                this.json.surveyTexts.surveyIntro = {
                    def: ""
                }
            }
            if (!this.json.surveyTexts.submit) {
                this.json.surveyTexts.submit = {
                    def: "Submit"
                }
            }
            if (!this.json.surveyTexts.thankYouNote) {
                this.json.surveyTexts.thankYouNote = {
                    def: "Thank you."
                }
            }
            if (!this.json.questions) {
                this.json.questions = [{}]
            }
            this.hasResponses = h && h.report && h.report.responseCount > 0;
            if (this.hasResponsesDialog != null) {
                c(this.hasResponsesDialog).dialogBox("hide");
                delete this.hasResponsesDialog
            }
            if (!c(this).is(":visible") && k != true) {
                this.needsUpdate = true;
                return
            }
            c(this.surveyName).val(this.json.surveyName != null ? this.json.surveyName : "type survey name");
            c(this.heading.input).val(this.json.surveyTexts.surveyHeading.def);
            c(this.introduction.input).val(this.json.surveyTexts.surveyIntro.def);
            c(this.thankyou.input).val(this.json.surveyTexts.thankYouNote.def);
            c(this.submit.input).val(this.json.surveyTexts.submit.def);
            c(this.introduction).add(this.thankyou).autoSizeTextArea("adjust");
            c(this.addQuestion).add(this.addCopy).toggle(this.hasResponses != true);
            this.questions = [];
            var m = c(this.questionContainer).find(".question-editor").width();
            var e = c(c.surveyEditor.questions(h, m - 44));
            for (var g = 0; g < this.json.questions.length; g++) {
                this.questions[g] = e.get(g * 2 + 1);
                this.questions[g].separator = e.get(g * 2);
                a.configureQuestion.apply(this, [this.questions[g], g])
            }
            c(this.questionContainer).html(e);
            this.questionId = this.changeCounter = 0;
            this.questionMap = [];
            for (var g = 0; g < this.questions.length; g++) {
                this.questions[g].questionId = this.questionId++;
                this.questions[g].changeCounter = 0;
                this.questionMap[this.questionId - 1] = this.questions[g];
                this.questions[g].json.undo = {
                    changeCounter: 0,
                    questionId: this.questionId - 1
                };
                c(this.questions[g]).questionEditor("paint")
            }
            if (this.sections != null) {
                delete this.sections
            }
            if (this.json.sections && this.json.sections.section != null) {
                this.sections = [];
                var l = 0;
                for (var g = 0; g < this.json.sections.section.length; g++) {
                    var j = this.json.sections.section[g];
                    if (j != null) {
                        this.sections[g] = c(a.createSectionElement.apply(this, [{
                            heading: j.heading != null ? j.heading.def : "",
                            intro: j.intro != null ? j.intro.def : ""
                        }])).prop("number", g).get(0);
                        if (j.questions && j.questions.length > 0) {
                            c(this.sections[g]).insertBefore(this.questions[j.questions[0]].separator);
                            l = j.questions[j.questions.length - 1]
                        } else {
                            if (g < this.json.sections.section.length - 1) {
                                c(this.sections[g]).insertBefore(this.questions[l].separator)
                            } else {
                                c(this.sections[g]).appendTo(this.questionContainer)
                            }
                        }
                        c(this.sections[g].intro).autoSizeTextArea("adjust")
                    }
                }
            }
            c(this.start).closest("td").toggle(this.sections != null && this.sections.length > 0);
            c(this.back).closest("td").toggle(this.sections != null && this.sections.length > 0);
            c(this.next).closest("td").toggle(this.sections != null && this.sections.length > 0);
            c(this.start.input).val(this.json.surveyTexts.start != null ? this.json.surveyTexts.start.def : "Start");
            c(this.back.input).val(this.json.surveyTexts.back != null ? this.json.surveyTexts.back.def : "Back");
            c(this.next.input).val(this.json.surveyTexts.next != null ? this.json.surveyTexts.next.def : "Next");
            c(this.includeHeading).closest("td").toggle(this.sections != null && this.sections.length > 0);
            c(this.includeHeading).toggleClass("active", this.json.surveyTexts.surveyHeading && this.json.surveyTexts.surveyHeading.includeInSections == true);
            var f = this;
            if (this.preview != null && c.ObjectPlanet.testMode == true) {
                a.updatePreview.apply(this)
            } else {
                if (this.preview != null) {
                    setTimeout(function () {
                        a.updatePreview.apply(f)
                    }, 5)
                }
            } if (this.overview != null && c.ObjectPlanet.testMode == true) {
                a.addOverview.apply(this, [this.overview])
            } else {
                if (this.overview != null) {
                    setTimeout(function () {
                        a.addOverview.apply(f, [f.overview])
                    }, 5)
                }
            }
            this.changed = false
        },
        adjust: function () {
            var f = [this.introduction, this.thankyou];
            for (var e = 0; e < this.questions.length; e++) {
                f.push(this.questions[e].questionText);
                if (this.questions[e].responseEditor != null && this.questions[e].responseEditor.commentEditor != null) {
                    f.push(this.questions[e].responseEditor.commentEditor.label)
                }
            }
            if (c.ObjectPlanet.testMode != true) {
                setTimeout(function () {
                    c(f).autoSizeTextArea("adjust")
                }, 20)
            } else {
                c(f).autoSizeTextArea("adjust")
            }
        },
        align: function () {
            for (var e = 0; e < this.questions.length; e++) {
                c(this.questions[e]).questionEditor("adjust")
            }
        },
        change: function (f, e) {
            if (c(e).val() != f) {
                c(e).val(f)
            }
        },
        update: function (n) {
            if (n == null) {
                return
            }
            if (c(this.surveyName.input).val() != n.surveyName || n.surveyName == null) {
                c(this.surveyName.input).val(n.surveyName != null ? n.surveyName : "type survey name")
            }
            if (n.surveyTexts != null) {
                if (n.surveyTexts.surveyHeading != null) {
                    a.change(n.surveyTexts.surveyHeading.def, this.heading.input)
                }
                if (n.surveyTexts.surveyIntro != null) {
                    a.change(n.surveyTexts.surveyIntro.def, this.introduction.input)
                }
                if (n.surveyTexts.thankYouNote != null) {
                    a.change(n.surveyTexts.thankYouNote.def, this.thankyou.input)
                }
                if (n.surveyTexts.submit != null) {
                    a.change(n.surveyTexts.submit.def, this.submit.input)
                }
                if (n.surveyTexts.surveyHeading != null) {
                    c(this.includeHeading).toggleClass("active", n.surveyTexts.surveyHeading.includeInSections == true)
                }
            }
            c(this.introduction).add(this.thankyou).autoSizeTextArea("adjust");
            if (this.preview != null) {
                c(this.preview.web).webSurvey("setTexts", n)
            }
            for (var h = 0, f = [], k = 0; n.questions instanceof Array && h < n.questions.length; h++, k++) {
                var g = this.questionMap[n.questions[h].undo != null ? n.questions[h].undo.questionId : "none"];
                if (g != null && n.questions[h].undo.changeCounter != g.changeCounter) {
                    c(g).questionEditor("update", n.questions[h]).prop("changeCounter", n.questions[h].undo.changeCounter)
                }
                if (g != null) {
                    c(g).prop("json", n.questions[h]);
                    c(g.responseEditor).responseEditor("setJSON", n.questions[h])
                }
                if (g == null && h == this.questions.length) {
                    a.addQuestion.apply(this, [{
                        json: n.questions[h],
                        speed: 0,
                        preventChangeEvent: true
                    }])
                } else {
                    if (g == null) {
                        a.addQuestion.apply(this, [{
                            json: n.questions[h],
                            index: k++,
                            speed: 0,
                            preventChangeEvent: true
                        }])
                    }
                } if (n.questions[h].undo != null) {
                    f[n.questions[h].undo.questionId] = true
                }
            }
            for (var h = 0; h < this.questions.length; h++) {
                if (f[this.questions[h].questionId] != true) {
                    var g = this.questionMap[this.questions[h].questionId];
                    d.questionDeleted.apply(this, [g, g.number]);
                    if (this.preview) {
                        c(this.preview.web).webSurvey("deleteQuestion", g.number)
                    }
                    h--
                }
            }
            for (var h = 0; n.questions instanceof Array && h < n.questions.length; h++) {
                var g = this.questionMap[n.questions[h].undo != null ? n.questions[h].undo.questionId : "none"];
                if (g != null && g.number - 1 != h) {
                    a.move.apply(this, [{
                        from: g.number - 1,
                        to: h,
                        preventChangeEvent: true
                    }])
                }
            }
            var j = c(this).find(".section-intro");
            var m = j.size() > 0;
            if (m == true) {
                j.remove()
            }
            c(this).removeProp("sections", null);
            if (m && this.preview) {
                c(this.preview.web).find(".section").remove()
            }
            var e = this.preview && this.preview.web.sections ? this.preview.web.sections.length : 0;
            if (n.sections && n.sections.section && n.sections.section.length > 0) {
                this.sections = [];
                for (var h = 0; h < n.sections.section.length; h++) {
                    var o = n.sections.section[h];
                    if (o.questions && o.questions.length > 0) {
                        this.sections[h] = c(a.createSectionElement.apply(this, [{
                            heading: o.heading != null ? o.heading.def : "",
                            intro: o.intro != null ? o.intro.def : ""
                        }])).prop("number", h).insertBefore(this.questions[o.questions[0]].separator).get(0);
                        c(this.sections[h].intro).autoSizeTextArea("adjust")
                    }
                }
                if (this.preview) {
                    c(this.preview.web).webSurvey("reset", n);
                    if (this.preview.web.sections != null && this.preview.web.sections.length > 1) {
                        var l = this.preview.web.currentSection;
                        if (e > this.preview.web.sections.length && l == this.preview.web.sections.length - 1) {
                            l--
                        }
                        c(this.preview.web).webSurvey("showSection", {
                            section: l
                        })
                    }
                }
            }
            c(this.includeHeading).closest("td").toggle(this.sections != null && this.sections.length > 0);
            if (m && n.sections == null && this.preview) {
                c(this.preview.web).webSurvey("reset", n)
            }
            this.json = n;
            a.addPreview.apply(this, [this.preview]);
            if (this.overview != null) {
                a.addOverview.apply(this, [this.overview])
            }
        },
        addQuestion: function (g) {
            var f = this.questions.length;
            if (g.index >= 0 && g.index < this.questions.length) {
                this.questions.splice(g.index, 0, {});
                this.json.questions.splice(g.index, 0, {});
                f = g.index
            }
            var j = null;
            if (g.copy == true && this.questions.length > 0) {
                j = c.extend(true, {}, this.questions[f > 0 ? f - 1 : 1].json);
                delete j.undo
            }
            if (g && g.json != null) {
                j = g.json
            }
            this.questions[f] = c(c.questionEditor(j)).toggle(g && g.speed == 0).questionEditor(j).questionEditor("setNumber", f + 1).bind("delete", d.deleteQuestion).prop("changeCounter", this.changeCounter).prop("widget", this).get(0);
            if (j != null && j.undo != null && j.undo.questionId >= 0) {
                this.questions[f].questionId = j.undo.questionId
            } else {
                this.questions[f].questionId = this.questionId++
            }
            this.questionMap[this.questions[f].questionId] = this.questions[f];
            var k = a.createSeparator.apply(this);
            if (f == this.questions.length - 1) {
                c(this.questionContainer).append(k).append(this.questions[f])
            } else {
                c(this.questions[f]).insertBefore(this.questions[f + 1].separator);
                c(k).insertBefore(this.questions[f])
            }
            c(this.questions[f]).questionEditor("paint");
            this.json.questions[f] = this.questions[f].json;
            this.questions[f].separator = k;
            for (var h = 0; h < this.questions.length; h++) {
                this.questions[h].separator.index = h;
                this.questions[h].number = (h + 1);
                c(this.questions[h].numberLabel).find("label").text((h + 1) + ".")
            }
            var e = this;
            c(this.questions[f]).show(g && g.speed ? g.speed : c.ObjectPlanet.SPEED / 5, function () {
                c(this.questionText).autoSizeTextArea("adjust");
                if (g && g.requestFocus == true && f == e.questions.length - 1) {
                    var l = c.ObjectPlanet.unitLess(c(this).css("margin-top")) + c.ObjectPlanet.unitLess(c(this).css("margin-bottom"));
                    var i = c(this).outerHeight() + c(this.separator).outerHeight() + l;
                    e.parentNode.scrollTop += i;
                    if (c(this).position().top < e.parentNode.scrollTop) {
                        e.parentNode.scrollTop -= e.parentNode.scrollTop - c(this).position().top
                    }
                }
            });
            if (this.json.sections != null) {
                a.updateSectionJson.apply(this)
            }
            if (g && g.requestFocus == true) {
                c(this.questions[f].questionText).focus().trigger("select")
            }
            if (this.preview != null) {
                c(this.preview.web).webSurvey("addQuestion", this.json.questions[f], f).webSurvey("adjust");
                c(this.questions[f]).questionEditor("addPreview", {
                    web: this.preview.web.questions[f]
                })
            }
            if (this.overview != null) {
                a.addOverview.apply(this, [this.overview])
            }
            if (g == null || g.preventChangeEvent != true) {
                this.eventBus.trigger("survey.focus", {
                    question: f + 1
                })
            }
            if (g == null || g.preventChangeEvent != true) {
                c(this).trigger("change")
            }
        },
        copy: function () {
            if (this.json.surveyName) {
                this.json.surveyName = "Copy of " + this.json.surveyName
            }
            this.changed = true;
            delete this.json._id;
            delete this.json.report;
            delete this.json.surveySetup;
            if (this.hasResponses == true) {
                a.setHasResponses.apply(this, [false])
            }
        },
        move: function (e) {
            if (e == null || typeof e.from != "number" || e.from < 0 || e.from >= this.questions.length) {
                return
            }
            if (typeof e.to != "number" || e.to < 0 || e.to >= this.questions.length) {
                return
            }
            if (this.json == null || this.json.questions == null || this.json.questions.length <= 1) {
                return
            }
            var j = this.questions[e.from];
            if (e.to == 0 && e.from > 0) {
                c(j).add(j.separator).insertBefore(this.questions[e.to].separator)
            } else {
                if (e.to > e.from) {
                    c(j).add(j.separator).insertAfter(this.questions[e.to])
                } else {
                    c(j).add(j.separator).insertAfter(this.questions[e.to - 1])
                }
            }
            this.json.questions.splice(e.to, 0, this.json.questions.splice(e.from, 1)[0]);
            this.questions.splice(e.to, 0, this.questions.splice(e.from, 1)[0]);
            for (var g = 0; g < this.questions.length; g++) {
                c(this.questions[g]).questionEditor("setNumber", g + 1);
                c(this.questions[g].numberLabel.mover).remove();
                this.questions[g].separator.index = g
            }
            if (this.json.sections != null && typeof e.section == "number") {
                a.moveSectionQuestion.apply(this, [{
                    sections: this.json.sections.section,
                    from: e.from,
                    to: e.to,
                    section: e.section
                }]);
                for (var g = 1; g < this.sections.length; g++) {
                    var h = this.json.sections.section[g - 1];
                    var f = this.sections[g - 1];
                    if (h.questions != null && h.questions.length > 0) {
                        f = this.questions[h.questions[h.questions.length - 1]]
                    }
                    c(this.sections[g]).insertAfter(f)
                }
                if (this.sections.length == 1) {
                    var h = this.json.sections.section[0];
                    var f = this.sections[0];
                    if (h.questions != null && h.questions.length > 0) {
                        f = this.questions[h.questions[0]];
                        c(this.sections[0]).insertBefore(f.separator)
                    }
                }
            }
            if (this.preview != null) {
                c(this.preview.web).webSurvey("move", e);
                if (this.json.sections != null) {
                    c(this.preview.web).webSurvey("showSection", {
                        question: e.to
                    })
                }
            }
            if (this.overview != null) {
                a.addOverview.apply(this, [this.overview])
            }
            if (e == null || e.preventChangeEvent != true) {
                c(this).trigger("change")
            }
        },
        moveSectionQuestion: function (n) {
            if (n == null || n.sections == null || n.sections.length < 1) {
                return
            }
            if (typeof n.section != "number" || n.section < -1 || n.section >= n.sections.length) {
                return
            }
            var f = a.getQuestionSection.apply(this, [n.from]);
            if (f == n.section) {
                return
            }
            var l = n.sections;
            for (var m = 0; m < l.length; m++) {
                for (var e = 0; l[m] && l[m].questions && e < l[m].questions.length; e++) {
                    if (l[m].questions[e] == n.from) {
                        l[m].questions[e] = "x"
                    }
                }
            }
            var h = c.fn.questionMover.firstSectionQuestion(l);
            for (var g = 0, j = 0; g < n.section - 1; g++) {
                j += l[g] && l[g].questions instanceof Array ? l[g].questions.length : 0
            }
            if (h == -1) {
                j = this.questions.length
            }
            var k = n.to - j;
            if (n.section >= 0) {
                l[n.section].questions.splice(k, 0, "n")
            }
            for (var m = 0; m < l.length; m++) {
                for (var e = 0; l[m].questions && e < l[m].questions.length; e++) {
                    if (l[m].questions[e] == "x") {
                        l[m].questions.splice(e, 1);
                        break
                    }
                }
            }
            for (var m = 0, g = (h == -1 ? j - 1 : 0); m < l.length; m++) {
                for (var e = 0; l[m].questions && e < l[m].questions.length; e++) {
                    l[m].questions[e] = g++
                }
            }
        },
        getQuestionSection: function (h) {
            var k = -1;
            for (var f = 0; this.json.sections && this.json.sections.section && f < this.json.sections.section.length; f++) {
                var g = this.json.sections.section[f];
                for (var e = 0; g && g.questions && e < g.questions.length; e++) {
                    if (g.questions[e] == h) {
                        k = f;
                        break
                    }
                }
            }
            return k
        },
        configureQuestion: function (e, f) {
            c(e).prop("widget", this).questionEditor(this.json.questions[f]).bind("delete", d.deleteQuestion);
            if (e.responseEditor != null) {
                e.number = e.responseEditor.number = (f + 1)
            }
            a.configureSeparator.apply(this, [e.separator]);
            e.separator.index = f
        },
        deleteQuestion: function (f) {
            var e = this;
            c(this).find(".question-editor").eq(f - 1).hide(c.ObjectPlanet.SPEED, function () {
                d.questionDeleted.apply(e, [this, f]);
                if (e.json.sections != null) {
                    a.updateSectionJson.apply(e)
                }
                if (e.preview != null) {
                    c(e.preview.web).webSurvey("deleteQuestion", f)
                }
                if (e.overview != null) {
                    a.addOverview.apply(e, [e.overview])
                }
                c(e).trigger("change")
            })
        },
        updateSectionJson: function () {
            var h = c(this.questionContainer).find(".section-intro");
            if (h.size() == 0) {
                if (this.json.sections != null) {
                    delete this.json.sections
                }
                if (this.sections != null) {
                    delete this.sections
                }
                return
            }
            if (this.json.sections == null) {
                this.json.sections = {}
            }
            this.json.sections.section = [];
            this.sections = [];
            var f = this;
            h.each(function (i) {
                f.sections[i] = c(this).prop("number", i).get(0);
                f.json.sections.section[i] = {
                    questions: []
                };
                if (c(this.heading.input).val() != "") {
                    f.json.sections.section[i].heading = {
                        def: c(f.sections[i].heading.input).val()
                    }
                }
                if (c(this.intro.input).val() != "") {
                    f.json.sections.section[i].intro = {
                        def: c(f.sections[i].intro.input).val()
                    }
                }
            });
            var g = -1;
            var e = h.first().prevAll(".question-editor").size();
            c(this.questionContainer).find("> div").each(function (i) {
                if (c(this).hasClass("section-intro")) {
                    g++
                } else {
                    if (g >= 0 && c(this).hasClass("question-editor")) {
                        f.json.sections.section[g].questions.push(e++)
                    }
                }
            })
        },
        createSectionElement: function (f) {
            var e = this;
            var i = f && f.heading != null ? f.heading : "";
            var g = f && f.intro != null ? f.intro : "";
            var h = c('<div class="section-intro"><span class="delete-button" style="visibility: hidden;"></span>' + c.inputBox({
                label: "section heading",
                classes: "fullWidth",
                attributes: 'value="' + i + '"'
            }) + c.autoSizeTextArea({
                label: "section introduction",
                content: g,
                classes: "fullWidth",
                attributes: 'rows="1"'
            }) + "</div>").bind("change", function (j) {
                if (j.target == this.heading.input) {
                    if (e.json.sections.section[this.number].heading == null) {
                        e.json.sections.section[this.number].heading = {
                            def: ""
                        }
                    }
                    e.json.sections.section[this.number].heading.def = c(this.heading.input).val();
                    if (e.preview != null) {
                        c(e.preview.web.sections[this.number + 1].heading).text(c(this.heading.input).val().replace(/&lt;/g, "<")).toggle(c(this.heading.input).val() != "")
                    }
                    if (e.overview != null) {
                        c(e.overview).surveyOverview("updateSection", this.number)
                    }
                }
                if (j.target == this.intro.input) {
                    if (e.json.sections.section[this.number].intro == null) {
                        e.json.sections.section[this.number].intro = {
                            def: ""
                        }
                    }
                    e.json.sections.section[this.number].intro.def = c(this.intro.input).val();
                    if (e.preview != null) {
                        var k = c.ObjectPlanet.spaces(c(this.intro.input).val().replace(/&lt;/g, "<").replace(/\n/g, "<br>"));
                        c(e.preview.web.sections[this.number + 1].intro).html(k).toggle(k != "")
                    }
                    if (e.overview != null) {
                        c(e.overview).surveyOverview("updateSection", this.number)
                    }
                }
            }).get(0);
            h.heading = c(h).find("input").parent().inputBox({
                disabled: false
            }).get(0);
            h.intro = c(h).find("textarea").parent().autoSizeTextArea({
                horizontal: false,
                disabled: false
            }).get(0);
            h.deleteButton = c(h).find(".delete-button").deleteButton().popdown({
                align: "left",
                standalone: true,
                offsetX: 3,
                offsetY: 2,
                items: [{
                    label: "Delete section split",
                    callback: function () {
                        var j = c(this).closest(".section-intro").prop("number");
                        a.deleteSection.apply(e, [j])
                    }
                }]
            }).get(0);
            c(h).hover(function () {
                c(h.deleteButton).css("visibility", "visible").deleteButton("paint")
            }, function () {
                c(h.deleteButton).css("visibility", "hidden")
            });
            return h
        },
        createSection: function (e) {
            var f = a.createSectionElement.apply(this);
            if (e == -1) {
                c(f).appendTo(this.questionContainer)
            }
            if (e >= 0) {
                c(f).insertBefore(this.questions[e].separator)
            }
            a.updateSectionJson.apply(this);
            c(this.includeHeading).closest("td").toggle(this.sections != null && this.sections.length > 0);
            c(this.start).closest("td").toggle(this.sections != null && this.sections.length > 0);
            c(this.back).closest("td").toggle(this.sections != null && this.sections.length > 0);
            c(this.next).closest("td").toggle(this.sections != null && this.sections.length > 0);
            if (this.preview) {
                c(this.preview.web).webSurvey("reset", this.json);
                a.addPreview.apply(this, [this.preview])
            }
            if (this.overview != null) {
                a.addOverview.apply(this, [this.overview])
            }
            c(f.heading.input).trigger("focus");
            c(this).trigger("change");
            if (this.preview != null) {
                c(this.preview.web).webSurvey("showSection", {
                    question: e
                })
            }
        },
        deleteSection: function (e) {
            c(this).find(".section-intro").eq(e).remove();
            a.updateSectionJson.apply(this);
            if (this.sections == null) {
                c(this.back).closest("td").hide();
                c(this.start).closest("td").hide();
                c(this.next).closest("td").hide();
                c(this.includeHeading).closest("td").hide()
            }
            c(this).trigger("change");
            if (this.preview) {
                c(this.preview.web).webSurvey("reset", this.json);
                a.addPreview.apply(this, [this.preview]);
                if (this.sections != null) {
                    if (e == this.sections.length) {
                        e--
                    }
                    c(this.preview.web).webSurvey("showSection", {
                        section: e + 1
                    })
                }
            }
            if (this.overview != null) {
                a.addOverview.apply(this, [this.overview])
            }
        },
        setChanged: function (e) {
            this.changed = e == true
        },
        hasChanged: function () {
            return this.changed == true
        },
        setHasResponses: function (g) {
            if (g == true || g != this.hasResponses) {
                if (!this.hasResponses && g) {
                    var e = this;
                    var h = "This survey now has responses and the structure can no longer be changed. Do you want to remove the responses?";
                    this.hasResponsesDialog = c('<div class="survey-editor-has-responses"></div>').html(h).dialogBox({
                        title: "Responses detected!",
                        cancel: {
                            label: "No"
                        },
                        ok: {
                            label: "Yes",
                            callback: function () {
                                e.eventBus.trigger("response.deleteAll");
                                return true
                            }
                        }
                    }).dialogBox("show", {
                        parent: c(this).closest(".op-module").get(0)
                    }).get(0)
                } else {
                    if (!g && c(this.hasResponsesDialog).is(":visible")) {
                        c(this.hasResponsesDialog.dialog.closeButton).trigger("click")
                    }
                }
                this.hasResponses = g == true;
                c(this.questions).questionEditor("setEnabled", g == false);
                c(this.addQuestion).add(this.addCopy).toggle(g == false);
                for (var f = 0; f < this.questions.length; f++) {
                    c(this.questions[f].separator).css("visibility", g != true ? "visible" : "hidden")
                }
            }
        },
        updatePreview: function () {
            if (this.preview != null) {
                c(this.preview.web).webSurvey("reset", this.json).webSurvey("adjust").webSurvey("adjustSectionTable");
                a.addPreview.apply(this, [this.preview])
            }
        },
        addPreview: function (g) {
            this.preview = g;
            for (var f = 0; g && f < this.questions.length; f++) {
                var e = {};
                if (g.web.questions) {
                    e.web = g.web.questions[f]
                }
                c(this.questions[f]).questionEditor("addPreview", e)
            }
        },
        addOverview: function (f) {
            this.overview = f;
            if (this.overview != null) {
                c(this.overview).surveyOverview("set", this.json)
            }
            for (var e = 0; f && e < this.questions.length; e++) {
                this.questions[e].overview = f.questions[e]
            }
        },
        getJSON: function () {
            return this.json
        },
        createSeparator: function () {
            var e = c(b).get(0);
            a.configureSeparator.apply(this, [e]);
            return e
        },
        configureSeparator: function (e) {
            e.widget = this;
            e.insert = c(e).find(":eq(0)").bind("click", function (f) {
                a.addQuestion.apply(this.parentNode.widget, [{
                    requestFocus: true,
                    index: this.parentNode.index
                }])
            }).get(0);
            e.copy = c(e).find(":eq(1)").bind("click", function (f) {
                a.addQuestion.apply(this.parentNode.widget, [{
                    requestFocus: true,
                    copy: true,
                    index: this.parentNode.index
                }])
            }).get(0);
            e.split = c(e).find(":eq(2)").bind("click", function (f) {
                a.createSection.apply(this.parentNode.widget, [this.parentNode.index])
            }).get(0)
        }
    };
    var d = {
        changeSurveyName: function (e) {
            this.self.json.surveyName = c(this).val();
            c(this).removeClass("error")
        },
        setHeading: function () {
            this.widget.json.surveyTexts.surveyHeading.def = c(this).val();
            var e = c.ObjectPlanet.spaces(c(this).val());
            if (this.widget.preview) {
                c(this.widget.preview.web).webSurvey("setHeading", e)
            }
            if (this.widget.overview) {
                c(this.widget.overview).surveyOverview("setHeading", e)
            }
        },
        setIntro: function () {
            this.widget.json.surveyTexts.surveyIntro.def = c(this).val();
            var e = c.ObjectPlanet.spaces(c(this).val().replace(/\n/g, "<br>"));
            if (this.widget.preview) {
                c(this.widget.preview.web.introduction).html(e).toggle(e != "")
            }
            if (this.widget.overview) {
                c(this.widget.overview).surveyOverview("setIntro", e)
            }
        },
        setStart: function () {
            this.widget.json.surveyTexts.start = {
                def: c(this).val()
            };
            if (this.widget.preview && this.widget.preview.web.submit.value == "start") {
                c(this.widget.preview.web.submit).text(c(this).val().replace(/&lt;/g, "<"))
            }
        },
        setBack: function () {
            this.widget.json.surveyTexts.back = {
                def: c(this).val()
            };
            if (this.widget.preview) {
                c(this.widget.preview.web.back).text(c(this).val().replace(/&lt;/g, "<"))
            }
        },
        setNext: function () {
            this.widget.json.surveyTexts.next = {
                def: c(this).val()
            };
            if (this.widget.preview && this.widget.preview.web.submit.value == "next") {
                c(this.widget.preview.web.submit).text(c(this).val().replace(/&lt;/g, "<"))
            }
        },
        setSubmit: function () {
            this.widget.json.surveyTexts.submit.def = c(this).val();
            if (this.widget.preview && this.widget.preview.web.submit.value == "submit") {
                c(this.widget.preview.web.submit).text(c(this).val().replace(/&lt;/g, "<"))
            }
        },
        setThankYou: function () {
            this.widget.json.surveyTexts.thankYouNote.def = c(this).val();
            var e = c.ObjectPlanet.spaces(c(this).val().replace(/\n/g, "<br>"));
            if (this.widget.preview) {
                c(this.widget.preview.web.thankyou).html(e)
            }
            if (this.widget.overview) {
                c(this.widget.overview).surveyOverview("setThankYou", e)
            }
        },
        deleteQuestion: function (e) {
            a.deleteQuestion.apply(this.widget, [e.number])
        },
        questionDeleted: function (e, g) {
            c(e.separator).remove();
            c(e).remove();
            this.questions.splice(g - 1, 1);
            this.json.questions.splice(g - 1, 1);
            this.questionMap[e.questionId] = null;
            for (var f = 0; f < this.questions.length; f++) {
                this.questions[f].separator.index = f;
                c(this.questions[f]).questionEditor("setNumber", f + 1)
            }
        },
        setOpaque: function () {
            if (!this.widget.hasResponses) {
                c(this).css("opacity", "1")
            }
            if (this.widget.hasResponses && this.control.popdown != null) {
                c(this.control).popdown("setEnabled", false)
            }
            c(this.control).css("cursor", this.widget.hasResponses ? "default" : "pointer")
        },
        setTranslucent: function () {
            c(this).css("opacity", "0.5")
        }
    }
})(jQuery);
(function (c) {
    var b = c("<label></label>").css({
        "font-size": "12px",
        "font-family": "Arial",
        padding: "3px",
        "border-width": "0px",
        "line-height": "14.5px"
    }).get(0);
    c.questionEditor = function (g, i, f, h) {
        var j = g != null && g.questionText != null ? g.questionText.def : "Question text";
        var k = f ? ' style="display: none;"' : "";
        var e = c.autoSizeTextArea.outer(j, b, h);
        return ('<div class="question-editor"><table class="header" cellspacing="0" cellpadding="0"><tr><td class="number top"><span class="hand borderBox"><label>' + (i != null ? i + "." : "") + '</label><span class="arrow" style="display: none;"></span></span></td><td class="top" style="width: 100%; ">' + c.autoSizeTextArea({
            attributes: 'style="height: ' + e + 'px;" rows="1"',
            content: j
        }) + '</td><td class="menu top"' + k + '><span class="help-button" style="visibility: hidden;">?</span><span class="delete-button" style="visibility: hidden;"></span></td></tr></table>' + c.responseEditor(g, f, h) + "</div>")
    };
    c.fn.questionEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (f) {
            var e = this;
            this.enabled = c(this).find(".menu").css("display") != "none";
            this.json = f ? f : {};
            if (!this.json.questionText) {
                this.json.questionText = {
                    def: "Question text"
                }
            }
            if (!this.json.choice && !this.json.rating && !this.json.dropdown && !this.json.fields && !this.json.comment) {
                this.json.choice = {}
            }
            this.question = c(this).find("table").get(0);
            this.numberLabel = c(this.question).find("td.number span").get(0);
            this.numberArrow = c(this.question).find("td.number .arrow").get(0);
            this.questionText = c(this.question).find("textarea").bind("change blur", d.updatePreviewQuestionText).bind("focus", d.questionTextGotFocus).bind("blur", d.removeFocus).autoSizeTextArea({
                horizontal: false,
                disabled: false,
                reset: false,
                defaultText: "Question text"
            }).prop("widget", this).get(0);
            this.responseEditor = c(this).find(".response-editor").responseEditor(this.json).bind("validationChange", d.setValidationState).prop("widget", this).get(0);
            c(this.responseEditor).bind("change", function (g) {
                if (e.overview != null) {
                    c(e.overview).questionOverview(e.json)
                }
            });
            c(this).hover(d.addHoverState, d.removeHoverState);
            this.deleteButton = c(this.question).find(".delete-button").deleteButton().popdown({
                align: "left",
                standalone: true,
                offsetX: 3,
                offsetY: 2,
                items: [{
                    label: "Delete question",
                    callback: d.triggerDelete
                }]
            }).prop("widget", this).get(0);
            this.helpButton = c(this.question).find("td .help-button").helpButton().bind("click", function () {
                c.murveyHelp({
                    sections: ["question", "inserting"]
                })
            }).get(0);
            c(this.numberLabel).bind("click", function (g) {
                if (g.target == e.numberLabel || g.target.parentNode == e.numberLabel) {
                    c(e).trigger({
                        type: "showMover",
                        question: e
                    })
                }
            })
        },
        paint: function () {
            c(this.responseEditor).responseEditor("paint")
        },
        update: function (e) {
            if (e == null) {
                return
            }
            this.json = e;
            if (e.questionText && e.questionText.def && e.questionText.def != c(this.questionText.input).val()) {
                c(this.questionText.input).val(e.questionText.def);
                c(this.questionText).autoSizeTextArea("adjust")
            }
            c(this.responseEditor).responseEditor("update", e)
        },
        setNumber: function (e) {
            this.number = this.responseEditor.number = e;
            c(this.numberLabel).find("label").text(e + ".")
        },
        setEnabled: function (e) {
            this.enabled = e;
            c(this.responseEditor).responseEditor("setEnabled", e);
            c(this.deleteButton).toggle(e);
            c(this.deleteButton.parentNode).toggle(e)
        },
        isEnabled: function () {
            return this.enabled
        },
        addPreview: function (e) {
            this.preview = e;
            c(this.responseEditor).responseEditor("addPreview", e)
        },
        getJSON: function () {
            return this.json
        },
        showMover: function (f) {
            if (this.enabled == false || f == null || f.questions == null) {
                return
            }
            if (this.numberLabel.mover == null) {
                this.numberLabel.mover = c("<div></div>").hide().get(0)
            }
            c(this.numberLabel.mover).questionMover().appendTo(this.numberLabel);
            var e = {
                current: this.number,
                questions: f.questions
            };
            if (f.sections != null) {
                e.sections = f.sections.section
            }
            c(this.numberLabel.mover).questionMover("set", e);
            c(this.numberLabel.mover).toggle(this.numberLabel.mover.shown != true);
            this.numberLabel.mover.shown = !this.numberLabel.mover.shown
        },
        adjust: function () {
            c(this.responseEditor).responseEditor("adjust", c(this).width())
        }
    };
    var d = {
        updatePreviewQuestionText: function () {
            this.widget.json.questionText.def = c(this).val();
            var e = c.ObjectPlanet.spaces(c(this).val().replace(/\n/g, "<br>"));
            if (this.widget.preview) {
                c(this.widget.preview.web.questionNumber).text(this.widget.number ? this.widget.number + "." : "1.");
                c(this.widget.preview.web.questionText).html(e)
            }
            if (this.widget.overview) {
                c(this.widget.overview.text).html(e)
            }
        },
        questionTextGotFocus: function () {
            c(this).addClass("focus")
        },
        setValidationState: function () {
            var e = c(this.widget.responseEditor.currentResponse.validation).is(":visible");
            if (this.widget.preview) {
                c(this.widget.preview.web).questionForm("showValidation", false)
            }
            if (this.widget.overview) {
                c(this.widget.overview).questionOverview("setValidationState", this.json)
            }
        },
        addHoverState: function () {
            var e = this.enabled == true;
            c(this.deleteButton).add(this.helpButton).add(this.responseEditor.help).css("visibility", "visible");
            c(this.deleteButton).deleteButton("paint");
            c(this.responseEditor.controls).addClass("active");
            if (c(this).closest(".survey-editor").prop("questions") != null && c(this).closest(".survey-editor").prop("questions").length > 1) {
                c(this.numberArrow).toggle(e == true).closest(".number").toggleClass("active", e == true)
            }
            if (this.responseEditor.currentResponse === this.responseEditor.choiceEditor) {
                c(this.responseEditor.choiceEditor).choiceEditor("showControls", this.enabled)
            } else {
                if (this.responseEditor.currentResponse === this.responseEditor.ratingEditor) {
                    c(this.responseEditor.ratingEditor).ratingEditor("showControls", this.enabled)
                } else {
                    if (this.responseEditor.currentResponse === this.responseEditor.dropdownEditor) {
                        c(this.responseEditor.dropdownEditor).dropdownEditor("showControls", this.enabled)
                    } else {
                        if (this.responseEditor.currentResponse === this.responseEditor.fieldsEditor) {
                            c(this.responseEditor.fieldsEditor).fieldsEditor("showControls", this.enabled)
                        }
                    }
                }
            }
        },
        removeHoverState: function () {
            if (c(this.deleteButton.popdown).is(":visible")) {
                return
            }
            c(this.deleteButton).add(this.helpButton).add(this.responseEditor.help).css("visibility", "hidden");
            c(this.numberArrow).hide().closest(".number").removeClass("active");
            c(this.responseEditor.controls).removeClass("active");
            if (this.responseEditor.currentResponse === this.responseEditor.choiceEditor) {
                c(this.responseEditor.choiceEditor).choiceEditor("showControls", false)
            } else {
                if (this.responseEditor.currentResponse === this.responseEditor.ratingEditor) {
                    c(this.responseEditor.ratingEditor).ratingEditor("showControls", false)
                } else {
                    if (this.responseEditor.currentResponse === this.responseEditor.dropdownEditor) {
                        c(this.responseEditor.dropdownEditor).dropdownEditor("showControls", false)
                    } else {
                        if (this.responseEditor.currentResponse === this.responseEditor.fieldsEditor) {
                            c(this.responseEditor.fieldsEditor).fieldsEditor("showControls", false)
                        }
                    }
                }
            }
        },
        removeFocus: function () {
            c(this).removeClass("focus")
        },
        hide: function () {
            c(this).hide()
        },
        triggerDelete: function () {
            c(this.widget).trigger({
                type: "delete",
                number: this.widget.number
            })
        }
    }
})(jQuery);
(function (b) {
    b.fn.questionMover = function () {
        return this.opWidget(a, arguments)
    };
    b.fn.questionMover.firstSectionQuestion = function (f) {
        var e = -1;
        for (var d = 0; f != null && d < f.length; d++) {
            for (var c = 0; f[d] != null && f[d].questions != null && c < f[d].questions.length; c++) {
                if (f[d].questions[c] >= 0) {
                    return f[d].questions[c]
                }
            }
        }
        return e
    };
    var a = {
        init: function () {
            var c = b(this).addClass("question-mover noSelect").get(0);
            b(this).bind("mousemove", function (d) {
                if (b(d.target).hasClass("current")) {
                    b(c).find("label.current").removeClass("visible");
                    b(d.target).addClass("visible")
                }
            });
            b(this).bind("mouseleave", function (d) {
                a.set.apply(this, [this.options])
            });
            b(this).bind("click", function (d) {
                if (b(d.target).hasClass("current") && b(d.target).hasClass("visible")) {
                    var e = {
                        type: "move",
                        from: c.current - 1,
                        to: b(d.target).attr("index") - 0
                    };
                    if (b(d.target).attr("section") != null) {
                        e.section = b(d.target).attr("section") - 0
                    }
                    b(c).trigger(e)
                }
            })
        },
        set: function (o) {
            if (o == null || o.questions == null || o.questions.length < 1) {
                return
            }
            if (typeof o.current != "number" || o.current < 1 || o.current > o.questions.length) {
                return
            }
            this.options = o;
            var m = '<label class="break move-title">Move question</label>';
            for (var f = 0; f < o.questions.length; f++) {
                m += '<label class="break question">' + (f + 1) + ". " + o.questions[f].questionText.def + "</label>"
            }
            b(this).html('<span class="up-arrow"></span>' + m);
            this.current = o.current != null ? o.current : 1;
            var d = false;
            var e = 0;
            if (o != null && o.sections && o.sections.length > 0) {
                var g = b.fn.questionMover.firstSectionQuestion.apply(this, [o.sections]);
                if (g == -1) {
                    b("<hr>").insertAfter(b(this).find("label.question:last"))
                }
                if (g > 0) {
                    b("<hr>").insertBefore(b(this).find("label.question").eq(g));
                    d = g == this.current - 1
                }
                for (var f = 0; f < o.sections.length; f++) {
                    var n = o.sections[f];
                    if (n.questions && n.questions.length > 0 && f < o.sections.length - 1) {
                        var h = n.questions[n.questions.length - 1];
                        var j = b(this).find("label.question").eq(h).get(0);
                        b("<hr>").insertAfter(j)
                    }
                    if (n.questions && n.questions.length == 0 && f < o.sections.length - 1) {
                        var j = b(this).find(".move-title").get(0);
                        if (f > 0 && o.sections[f - 1].questions && o.sections[f - 1].questions.length > 0) {
                            var h = o.sections[f - 1].questions[o.sections[f - 1].questions.length - 1];
                            j = b(this).find("label.question").eq(h).get(0)
                        }
                        b("<hr>").insertAfter(j)
                    }
                    if (n.questions && n.questions.length > 1 && n.questions[0] == this.current - 1) {
                        d = true
                    } else {
                        if (n.questions && n.questions.length > 0 && f > 0 && n.questions[0] == this.current - 1) {
                            d = true
                        }
                    }
                }
            }
            b(this).find("label").eq(o.current).remove();
            var l = this;
            var h = -1;
            b(this).find("> *").not(".up-arrow").each(function () {
                if (b(this).is("label")) {
                    h++
                }
                var p = l.current + ". " + o.questions[l.current - 1].questionText.def;
                var i = b('<label class="break question current" index="' + h + '">' + p + "</label>").insertAfter(this).get(0)
            });
            var c = b(this).find("label.current[index=" + (this.current - 1) + "]");
            c.eq(c.size() > 1 && d == true ? 1 : 0).addClass("visible");
            var g = b.fn.questionMover.firstSectionQuestion.apply(this, [o.sections]);
            var k = g != 0 ? -1 : 0;
            b(this).find("> *").not(".up-arrow").not(".move-title").each(function () {
                if (b(this).is("hr")) {
                    k++
                }
                if (b(this).hasClass("current")) {
                    b(this).attr("section", k)
                }
            })
        }
    };
    b(document).bind("click", function (d) {
        var c = d.target.mover != null || (d.target.parentNode && d.target.parentNode.mover != null);
        c = c || d.target == b(d.target.parentNode).find(".arrow").get(0);
        if (b(d.target).closest(".question-mover").size() == 0 && c != true) {
            b(document).find(".question-mover").prop("shown", false).hide()
        }
    })
})(jQuery);
(function (b) {
    b.responseEditor = function (g, f, h) {
        var e = f == true ? ' style="display: none;"' : "";
        var d = '<table class="response-editor" cellspacing="0" cellpadding="0"><tr>';
        d += '<td class="controls"' + e + ">" + b.responseTypeControls(g, f) + "</td>";
        d += '<td class="editors">' + b.responseEditorCurrent(g, f) + '<div class="commentContainer">';
        if (g != null && g.comment != null) {
            d += b.commentEditor(g.comment, true, h)
        }
        d += "</div>";
        d += '<span class="help-button" style="visibility: hidden;">?</span>';
        return d + "</td></tr></table>"
    }, b.responseEditorCurrent = function (f, e) {
        var d = "";
        if (f == null || f != null && f.choice != null) {
            d += b.choiceEditor(f != null ? f.choice : null, true, e)
        }
        if (f != null && f.rating != null) {
            d += b.ratingEditor(f.rating, true, e)
        }
        if (f != null && f.dropdown != null) {
            d += b.dropdownEditor(f.dropdown, true, e)
        }
        if (f != null && f.fields != null) {
            d += b.fieldsEditor(f.fields, true, e)
        }
        return d
    }, b.fn.responseEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (e) {
            var d = b(this).prop("enabled", true).prop("json", e).get(0);
            this.controls = b(this).find(".controls").get(0);
            if (this.types == null) {
                this.types = b(this).find(".types").responseTypeControls().bind("click", function (f) {
                    if (b(f.target).hasClass("type-icon")) {
                        a.showResponse.apply(d, [f.target])
                    }
                }).get(0)
            }
            this.editors = b(this).find(".editors").get(0);
            this.commentContainer = b(this.editors).find(".commentContainer").get(0);
            if (b(this).find(".choice-editor").size() == 1) {
                this.choiceEditor = this.types.choice.editor = this.currentResponse = b(this).find(".choice-editor").choiceEditor(e != null ? e.choice : null).prop("self", this).get(0)
            }
            if (b(this).find(".rating-editor").size() == 1) {
                this.ratingEditor = this.types.rating.editor = this.currentResponse = b(this).find(".rating-editor").ratingEditor(e.rating).prop("self", this).get(0)
            }
            if (b(this).find(".dropdown-editor").size() == 1) {
                this.dropdownEditor = this.types.dropdown.editor = this.currentResponse = b(this).find(".dropdown-editor").dropdownEditor(e.dropdown).prop("self", this).get(0)
            }
            if (b(this).find(".fields-editor").size() == 1) {
                this.fieldsEditor = this.types.fields.editor = this.currentResponse = b(this).find(".fields-editor").fieldsEditor(e.fields).prop("self", this).get(0)
            }
            if (b(this).find(".comment-editor").size() == 1) {
                this.commentEditor = this.types.comment.editor = b(this).find(".comment-editor").commentEditor().bind("change", c.setPreviewComment).prop("self", this).get(0)
            }
            this.help = b(this).find(".help-button").helpButton().bind("click", function (f) {
                var g = b(d.commentEditor).is(":visible") ? ["free-text"] : [];
                if (b(d.choiceEditor).is(":visible")) {
                    g = ["choice", "validation-choice"].concat(g)
                } else {
                    if (b(d.ratingEditor).is(":visible")) {
                        g = ["rating", "validation-rating"].concat(g)
                    } else {
                        if (b(d.dropdownEditor).is(":visible")) {
                            g = ["dropdown", "validation-dropdown"].concat(g)
                        } else {
                            if (b(d.fieldsEditor).is(":visible")) {
                                g = ["fields", "validation-field"].concat(g)
                            }
                        }
                    }
                }
                b.murveyHelp({
                    sections: g
                })
            }).get(0)
        },
        paint: function () {
            b(this.types).responseTypeControls("paint")
        },
        update: function (d) {
            if (d == null || (d.choice && this.choiceEditor == this.currentResponse)) {
                b(this.choiceEditor).choiceEditor("update", d.choice)
            } else {
                if (d && d.rating && this.ratingEditor == this.currentResponse) {
                    b(this.ratingEditor).ratingEditor("update", d.rating)
                } else {
                    if (d && d.dropdown && this.dropdownEditor == this.currentResponse) {
                        b(this.dropdownEditor).dropdownEditor("update", d.dropdown)
                    } else {
                        if (d && d.fields && this.fieldsEditor == this.currentResponse) {
                            b(this.fieldsEditor).fieldsEditor("update", d.fields)
                        } else {
                            b(this.editors).find(".editor").not(".comment-editor").remove();
                            b(this.editors).prepend(b.responseEditorCurrent(d, false));
                            b(this).responseEditor("init", d);
                            if (d.choice != null) {
                                b(this.types).responseTypeControls("setActive", "choice")
                            }
                            if (d.rating != null) {
                                b(this.types).responseTypeControls("setActive", "rating")
                            }
                            if (d.dropdown != null) {
                                b(this.types).responseTypeControls("setActive", "dropdown")
                            }
                            if (d.fields != null) {
                                b(this.types).responseTypeControls("setActive", "fields")
                            }
                            if (d.comment != null) {
                                b(this.types).responseTypeControls("setActive", "comment")
                            }
                        }
                    }
                }
            } if (d != null && d.comment != null && this.commentEditor != null) {
                b(this.commentEditor).commentEditor("update", d.comment).show()
            } else {
                if (d != null && d.comment != null) {
                    this.commentEditor = b(b.commentEditor(d.comment, true)).commentEditor().appendTo(this.commentContainer).get(0);
                    b(this.commentEditor).bind("change", c.setPreviewComment).prop("self", this)
                } else {
                    b(this.commentEditor).hide();
                    b(this.types).responseTypeControls("setActive", "comment", false)
                }
            } if (this.preview) {
                b(this.preview.web).html(b.questionFormHtml(d, this.number)).questionForm(d, this.number)
            }
        },
        setJSON: function (d) {
            if (d == null) {
                return
            }
            this.json = d;
            if (d.choice != null && this.choiceEditor != null) {
                this.choiceEditor.json = d.choice
            }
            if (d.rating != null && this.ratingEditor != null) {
                this.ratingEditor.json = d.rating
            }
            if (d.dropdown != null && this.dropdownEditor != null) {
                this.dropdownEditor.json = d.dropdown
            }
            if (d.fields != null && this.fieldsEditor != null) {
                this.fieldsEditor.json = d.fields
            }
        },
        showResponse: function (d) {
            if (this.enabled == false) {
                return
            }
            if (b(d).hasClass("choice") && (this.choiceEditor == null || this.choiceEditor.parentNode != this.editors)) {
                this.choiceEditor = d.editor = b(b.choiceEditor(null, false)).choiceEditor().prependTo(this.editors).get(0)
            } else {
                if (b(d).hasClass("rating") && (this.ratingEditor == null || this.ratingEditor.parentNode != this.editors)) {
                    this.ratingEditor = d.editor = b(b.ratingEditor(null, false)).ratingEditor().prependTo(this.editors).get(0)
                } else {
                    if (b(d).hasClass("dropdown") && (this.dropdownEditor == null || this.dropdownEditor.parentNode != this.editors)) {
                        this.dropdownEditor = d.editor = b(b.dropdownEditor(null, false)).dropdownEditor().prependTo(this.editors).get(0)
                    } else {
                        if (b(d).hasClass("fields") && (this.fieldsEditor == null || this.fieldsEditor.parentNode != this.editors)) {
                            this.fieldsEditor = d.editor = b(b.fieldsEditor(null, false)).fieldsEditor().prependTo(this.editors).get(0)
                        }
                    }
                }
            } if (d != this.types.comment) {
                d.editor.preview = this.preview;
                d.editor.self = this;
                if (this.currentResponse != d.editor) {
                    b(this.currentResponse).hide();
                    this.currentResponse = b(d.editor).show().get(0);
                    a.updateJSON.apply(this);
                    if (this.currentResponse != this.fieldEditor) {
                        b(this.currentResponse.validationToggle).css("visibility", "visible")
                    }
                    if (this.currentResponse == this.dropdownEditor) {
                        b(this.dropdownEditor).dropdownEditor("showControls", true)
                    }
                } else {
                    b(this.currentResponse).toggle(b.ObjectPlanet.SPEED, c.updateJSON)
                }
            } else {
                a.showCommentEditor.apply(this)
            }
            b(this).trigger("change")
        },
        showCommentEditor: function () {
            if (this.enabled == true) {
                if (this.commentEditor == null) {
                    this.commentEditor = b(b.commentEditor(null, false)).commentEditor().bind("change", c.setPreviewComment).appendTo(this.commentContainer).get(0);
                    this.commentEditor.self = this
                }
                var f = b(this.commentEditor).is(":visible");
                b(this.commentEditor).toggle(b.ObjectPlanet.SPEED);
                if (this.json != null && this.json.comment != null) {
                    delete this.json.comment
                }
                if (this.json != null && !f) {
                    var e = b(this.commentEditor.label.input).val();
                    var d = b(this.commentEditor.label.input).attr("placeholder");
                    if (d != null && d.length > 0 && d == e) {
                        b(this.commentEditor.label.input).val("");
                        e = ""
                    }
                    this.json.comment = {
                        label: {
                            def: e
                        }
                    }
                }
                if (this.preview) {
                    b(this.preview.web).questionForm("toggleComment", !f)
                }
            }
        },
        updateJSON: function () {
            if (this.json) {
                delete this.json.choice;
                delete this.json.rating;
                delete this.json.dropdown;
                delete this.json.fields;
                if (b(this.choiceEditor).is(":visible")) {
                    this.json.choice = b(this.choiceEditor).choiceEditor("getJSON")
                }
                if (b(this.ratingEditor).is(":visible")) {
                    this.json.rating = b(this.ratingEditor).ratingEditor("getJSON")
                }
                if (b(this.dropdownEditor).is(":visible")) {
                    this.json.dropdown = b(this.dropdownEditor).dropdownEditor("getJSON")
                }
                if (b(this.fieldsEditor).is(":visible")) {
                    this.json.fields = b(this.fieldsEditor).fieldsEditor("getJSON")
                }
            }
            if (this.preview) {
                b(this.preview.web).html(b.questionFormHtml(this.json, this.number)).questionForm(this.json, this.number)
            }
        },
        setEnabled: function (d) {
            this.enabled = d;
            b(this.types).add(this.types.parentNode).toggle(d == true);
            b(this.choiceEditor).choiceEditor("setEnabled", d);
            b(this.ratingEditor).ratingEditor("setEnabled", d);
            b(this.dropdownEditor).dropdownEditor("setEnabled", d);
            b(this.fieldsEditor).fieldsEditor("setEnabled", d)
        },
        isEnabled: function () {
            return this.enabled
        },
        addPreview: function (d) {
            this.preview = d;
            if (this.choiceEditor) {
                this.choiceEditor.preview = d
            }
            if (this.ratingEditor) {
                this.ratingEditor.preview = d
            }
            if (this.dropdownEditor) {
                this.dropdownEditor.preview = d
            }
            if (this.fieldsEditor) {
                b(this.fieldsEditor).fieldsEditor("addPreview", d)
            }
            if (this.commentEditor) {
                this.commentEditor.preview = d
            }
        },
        hasValidation: function () {
            return this.currentResponse != null && this.currentResponse.json != null && this.currentResponse.json.validation != null && ((this.currentResponse.json.validation.required != null && this.currentResponse.json.validation.required.on == true) || (this.currentResponse.json.validation.min != null && this.currentResponse.json.validation.min.value > 0) || (this.currentResponse.json.validation.max != null && this.currentResponse.json.validation.max.value > 0))
        },
        getJSON: function () {
            return this.json
        },
        adjust: function (e) {
            if (this.currentResponse === this.choiceEditor) {
                var d = b(this.controls).outerWidth();
                var f = b(this.editors).outerWidth() - b(this.editors).width();
                b(this.choiceEditor).choiceEditor("adjust", e - d - f)
            }
        }
    };
    var c = {
        setPreviewComment: function () {
            if (this.self.json != null && this.self.json.comment != null && this.self.json.comment.label != null) {
                this.self.json.comment.label.def = b(this.label.input).val()
            }
            if (this.self.preview) {
                b(this.self.preview.web).questionForm("setComment", this.self.json.comment)
            }
        },
        showResponse: function (d) {
            if (b(d.target).hasClass("tab")) {
                a.showResponse.apply(this.self, [b(d.target).trigger("focus").get(0)])
            }
            return false
        },
        updateJSON: function () {
            a.updateJSON.apply(this.self)
        }
    }
})(jQuery);
(function (b) {
    b.responseTypeControls = function (d, c) {
        return ('<div class="types"><div class="radio"><canvas class="choice' + (d == null || d != null && d.choice != null ? " active" : "") + '"></canvas><canvas class="rating' + (d != null && d.rating != null ? " active" : "") + '"></canvas><canvas class="dropdown' + (d != null && d.dropdown != null ? " active" : "") + '"></canvas><canvas class="fields' + (d != null && d.fields != null ? " active" : "") + '"></canvas></div><div class="check"><canvas class="comment' + (d != null && d.comment != null ? " active" : "") + '"></canvas></div></div>')
    };
    b.fn.responseTypeControls = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function () {
            this.choice = b(this).find(".choice").typeIcon({
                type: "choice"
            }).get(0);
            this.rating = b(this).find(".rating").typeIcon({
                type: "rating"
            }).get(0);
            this.dropdown = b(this).find(".dropdown").typeIcon({
                type: "dropdown"
            }).get(0);
            this.fields = b(this).find(".fields").typeIcon({
                type: "fields"
            }).get(0);
            this.comment = b(this).find(".comment").typeIcon({
                type: "comment"
            }).get(0);
            b(this.choice).floatLabel({
                label: "Turn off choice",
                free: true
            });
            b(this.rating).floatLabel({
                label: "Switch to rating",
                free: true
            });
            b(this.dropdown).floatLabel({
                label: "Switch to dropdown",
                free: true
            });
            b(this.fields).floatLabel({
                label: "Switch to fields",
                free: true
            });
            b(this.comment).floatLabel({
                label: "Turn on free-text",
                free: true
            });
            a.setFloatingLabels.apply(this);
            var c = this;
            b(this).bind("click", function (d) {
                if (!b(d.target).hasClass("type-icon")) {
                    return
                }
                if (b(d.target).closest(".radio").size() == 1) {
                    if (b(d.target).hasClass("active")) {
                        b(d.target).removeClass("active")
                    } else {
                        b(c).find(".radio canvas").removeClass("active");
                        b(d.target).addClass("active")
                    }
                } else {
                    b(d.target).toggleClass("active", !b(d.target).hasClass("active"))
                }
                a.setFloatingLabels.apply(this)
            })
        },
        paint: function () {
            b(this.choice).add(this.rating).add(this.dropdown).add(this.fields).add(this.comment).typeIcon("paint")
        },
        setActive: function (c, d) {
            if (c == "comment") {
                b(this.comment).toggleClass("active", d !== false)
            } else {
                b(this.choice).toggleClass("active", c == "choice");
                b(this.rating).toggleClass("active", c == "rating");
                b(this.dropdown).toggleClass("active", c == "dropdown");
                b(this.fields).toggleClass("active", c == "fields")
            }
            a.setFloatingLabels.apply(this)
        },
        setFloatingLabels: function () {
            if (!b(this).find(".type-icon").not(this.comment).hasClass("active")) {
                b(this.choice).floatLabel("setLabel", "Turn on choice");
                b(this.rating).floatLabel("setLabel", "Turn on rating");
                b(this.dropdown).floatLabel("setLabel", "Turn on dropdown");
                b(this.fields).floatLabel("setLabel", "Turn on fields")
            } else {
                b(this.choice).floatLabel("setLabel", b(this.choice).hasClass("active") ? "Turn off choice" : "Switch to choice");
                b(this.rating).floatLabel("setLabel", b(this.rating).hasClass("active") ? "Turn off rating" : "Switch to rating");
                b(this.dropdown).floatLabel("setLabel", b(this.dropdown).hasClass("active") ? "Turn off dropdown" : "Switch to dropdown");
                b(this.fields).floatLabel("setLabel", b(this.fields).hasClass("active") ? "Turn off fields" : "Switch to fields")
            }
            b(this.comment).floatLabel("setLabel", b(this.comment).hasClass("active") ? "Turn off free-text" : "Turn on free-text")
        }
    }
})(jQuery);
(function (c) {
    var b = c("<label></label>").css({
        "font-size": "12px",
        "font-family": "Arial",
        "line-height": "19px",
        padding: "3px",
        border: "1px solid transparent"
    }).get(0);
    c.choiceEditor = function (w, t, h) {
        var r = "Choice one\nChoice two...";
        var l = a.choiceMarkup(2);
        if (w && w.options && w.options.length > 0) {
            for (var u = 0, r = "", l = ""; u < w.options.length; u++) {
                r += w.options[u].def + (u < w.options.length - 1 ? "\n" : "");
                l += a.choiceMarkup(1, w.multipleOn, u, h == true)
            }
        }
        var n = c.autoSizeTextArea.outer(r, b);
        var q = c.autoSizeInput.outer(r, b) + 16;
        var v = c.browser.msie ? " white-space: pre; " : "";
        var g = h == true ? " disabled" : "";
        var j = h == true ? "" : " hand";
        var s = (w && w.options && w.options.length > 0 && w.options[w.options.length - 1].other ? w.options[w.options.length - 1].other.on : false);
        var m = w && w.columns != null && w.columns.value > 1;
        var e = w && w.randomize && w.randomize.on == true;
        var f = ' style="display: none;"';
        if (s == true || m == true || e == true) {
            f = ""
        }
        var o = "<select" + f + ">";
        for (var u = 1; u <= 9; u++) {
            var p = (w && w.columns && w.columns.value == u) ? ' selected="selected"' : "";
            o += '<option value="' + u + '"' + p + ">" + u + (u == 1 ? " column" : " columns") + "</option>"
        }
        o += "</select>";
        var k = h == true ? ' responses="responses"' : "";
        return ('<div class="editor choice-editor"' + k + (t == false ? ' style="display: none;"' : "") + '><table cellspacing="0" cellpadding="0" class="fullWidth"><tr><td class="options top" style="width: 10px;"><span class="boxes borderBox' + j + '" tabindex="0">' + l + "</span>" + c.autoSizeTextArea({
            classes: "choices",
            attributes: 'style="width: ' + q + "px; height: " + n + "px;" + v + '"' + g,
            content: r
        }) + '</td><td class="bottom">' + c.checkLabel({
            attr: ' tabindex="0"' + f,
            label: "Other field"
        }) + c.checkLabel({
            attr: ' tabindex="0"' + f,
            label: "Randomize"
        }) + "<br>" + o + '</td></tr><tr><td colspan="2"><div class="validation-toggle" tabindex="0" style="visibility: hidden;">[<span>+</span>] Validation</div></td></tr></table></div>')
    };
    c.fn.choiceEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (f) {
            this.json = f ? f : {};
            if (!this.json.options) {
                this.json.options = [{
                    def: "Choice one"
                }, {
                    def: "Choice two..."
                }]
            }
            var e = c(this).prop("enabled", true).prop("multipleOn", f && f.multipleOn == true).get(0);
            this.boxes = c(this).find("span.boxes").prop("self", this).bind("click keydown", d.toggleSingleMultiple).hover(d.hoverSingleMultipleIn, d.hoverSingleMultipleOut).bind("focus", d.hoverSingleMultipleIn).bind("blur", d.hoverSingleMultipleOut).floatLabel({
                position: "bottom.left",
                label: this.json.multipleOn == true ? "Multiple choice" : "Single choice"
            }).get(0);
            this.textarea = c(this).find("textarea").prop("widget", this).autoSizeTextArea({
                disabled: false,
                useMaxWidth: false,
                reset: false,
                defaultText: "Choice one\nChoice two..."
            }).bind("focus", d.showControls).bind("blur", d.removeEmptyLine).bind("keyup change", d.updateChoices).get(0);
            var g = (f && f.options && f.options.length > 0 && f.options[f.options.length - 1].other ? f.options[f.options.length - 1].other.on : false);
            this.other = c(this).find(".op-check:contains(Other field)").prop("widget", this).checkLabel({
                checked: g == true
            }).bind("change", d.toggleOtherField).get(0);
            c(this.other).checkLabel("setEnabled", c(this).attr("responses") != "responses");
            this.randomize = c(this).find(".op-check:contains(Randomize)").prop("widget", this).checkLabel({
                checked: f && f.randomize && f.randomize.on == true
            }).addClass("randomize").bind("change", d.toggleRandomize).get(0);
            this.columns = c(this).find("table select").bind("change", function (h) {
                var i = c(this).val();
                if (i - 0 <= 1) {
                    delete e.json.columns
                }
                if (i - 0 > 1) {
                    e.json.columns = {
                        value: i - 0
                    }
                }
                c(e.preview && e.preview.web && e.preview.web.choice).html(c.choiceFormHtml(e.json)).choiceForm(e.json)
            }).get(0);
            this.validationToggle = c(this).find(".validation-toggle").bind("click keydown", d.toggleValidation).prop("self", this).get(0);
            c(this).hover(d.addHoverEffect, d.removeHoverEffect);
            if (!this.json.validation) {
                this.json.validation = {
                    min: {
                        value: 0,
                        message: {
                            def: ""
                        }
                    }
                }
            }
            a.setValidation.apply(this, [this.json])
        },
        setValidation: function (g) {
            if (g && g.validation && (g.validation.min != null || g.validation.max != null)) {
                this.json.validation = g.validation;
                var f = g.validation.min != null && (g.validation.min.value > 0 || (g.validation.min.message && g.validation.min.message.def != ""));
                var e = g.validation.max != null && g.multipleOn == true && (g.validation.max.value > 0 || (g.validation.max.message && g.validation.max.message.def != ""));
                a.toggleValidation.apply(this, [0, f == true || e == true, true]);
                if (f == true) {
                    c(this.validation.required.check).checkLabel("toggle", g.validation.min.value > 0, false);
                    c(this.validation.min.value).val(g.validation.min.value > 0 ? g.validation.min.value : "");
                    var h = g.validation.min.message && g.validation.min.message.def ? g.validation.min.message.def : "";
                    c(this.validation.min.message).val(h);
                    c(this.validation.required.message).val(h)
                }
                if (e == true) {
                    c(this.validation.max.value).val(g.validation.max.value > 0 ? g.validation.max.value : "");
                    c(this.validation.max.message).val(g.validation.max.message && g.validation.max.message.def ? g.validation.max.message.def : "")
                }
            } else {
                c(this.validation).hide(0)
            }
        },
        toggleValidation: function (g, e, h) {
            g = g != null ? g : c.ObjectPlanet.SPEED;
            if (this.validation == null) {
                var f = this;
                this.validation = c(c.validationEditor({
                    required: true,
                    min: true,
                    max: true,
                    displayRequired: this.json.multipleOn != true,
                    displayMin: this.json.multipleOn == true,
                    displayMax: this.json.multipleOn == true,
                    display: false
                })).validationEditor(this.json.validation, function () {
                    if (!f.json.multipleOn) {
                        delete f.json.validation.max;
                        delete f.json.validation.required;
                        f.json.validation.min.value = f.validation.required.check.checked == true ? 1 : 0;
                        f.json.validation.min.message.def = c(f.validation.required.message).val();
                        c(f.validation.min.value).val(f.json.validation.min.value)
                    }
                }).appendTo(this).prop("self", this).get(0);
                c(this.validation.min.value).attr("max", this.json.multipleOn == true ? this.json.options.length : 1);
                if (!this.json.multipleOn) {
                    delete this.json.validation.max;
                    delete this.json.validation.required
                }
            }
            if (this.validation.max && this.validation.max.value != null && this.json && this.json.options) {
                c(this.validation.max.value).attr("max", this.json.options.length)
            }
            var f = this;
            e = (e == null ? c(this.validationToggle).find("span").text() == "+" : e);
            if (e == true) {
                c(this.validation).show(g, function () {
                    if (h != true) {
                        c(f.validation).find("input[type=number]:eq(0)").trigger("focus")
                    }
                })
            } else {
                c(this.validation).hide(g)
            }
            c(this.validationToggle).find("span").text(e ? "-" : "+")
        },
        choiceMarkup: function (l, n, e, k) {
            var h = k == true ? ' disabled="disabled"' : "";
            for (var j = 0, o = "", e = e != null ? e : 0; j < l; j++) {
                var p = n ? " display:none;" : "";
                var f = n ? "" : " display:none;";
                var m = c.browser.msie == true ? " margin: 0px;" : "";
                var g = k == true ? "" : " hand";
                o += '<input class="checkbox' + g + '" type="radio" tabindex="-1" style="' + p + m + '"' + h + ">";
                o += '<input class="checkbox' + g + '" type="checkbox" tabindex="-1" style="' + f + m + '"' + h + ">"
            }
            return o
        },
        updateChoices: function () {
            var j = c.trim(c(this.textarea).val());
            var h = c.ObjectPlanet.lineCount(j);
            if (h != c(this.boxes).find("input[type=radio]").size()) {
                var f = this;
                var l = c(a.choiceMarkup(h, this.multipleOn)).each(function (i) {
                    c(this).prop("self", f)
                });
                c(this).find("span.boxes").html(l);
                if (this.json.multipleOn && this.validation != null) {
                    c(this.validation.min.value).add(this.validation.max.value).attr("max", h);
                    if (c(this.validation.min.value).val() - 0 > h) {
                        c(this.validation.min.value).val(h);
                        this.json.validation.min.value = h
                    }
                    if (c(this.validation.max.value).val() - 0 > h) {
                        c(this.validation.max.value).val(h);
                        this.json.validation.max.value = h
                    }
                } else {
                    if (this.validation != null) {
                        c(f.validation.min.value).attr("max", 1)
                    }
                }
            }
            a.adjust.apply(this, [c(this).width()]);
            var k = false;
            if (this.json.options instanceof Array && this.json.options.length == 1 && this.json.options[0] != null && this.json.options[0].def == "") {
                k = true
            }
            var e = j.split("\n");
            this.json.options = [];
            for (var g = 0; g < e.length; g++) {
                this.json.options[g] = {
                    def: e[g]
                }
            }
            if (this.other.checked == true) {
                this.json.options[this.json.options.length - 1].other = {
                    on: true
                }
            }
            if (j.length == 0 || (j.length > 0 && k == true)) {
                c(this).trigger("validationChange")
            }
        },
        showControls: function (e) {
            if ((this.textarea == document.activeElement || this.other == document.activeElement) && e == false) {
                return
            }
            if (e != true) {
                c(this.validationToggle).blur()
            }
            if (this.other.checked == true || c(this.columns).val() != "1" || this.randomize.checked == true) {
                if (e == true) {
                    c(this.other).add(this.randomize).add(this.columns).show()
                }
                c(this.validationToggle).css("visibility", e == true ? "visible" : "hidden")
            } else {
                c(this.other).add(this.randomize).add(this.columns).toggle(e == true);
                c(this.validationToggle).css("visibility", e == true ? "visible" : "hidden")
            }
            c(this.helpButton).toggle(e)
        },
        update: function (f) {
            if (f == null) {
                return
            }
            for (var e = 0, g = ""; e < f.options.length; e++) {
                g += f.options[e].def + (e < f.options.length - 1 ? "\n" : "")
            }
            c(this.textarea).val(g).autoSizeTextArea("adjust");
            a.updateChoices.apply(this);
            a.toggleMultiple.apply(this, [f.multipleOn == true]);
            c(this.other).checkLabel("toggle", f.options[f.options.length - 1].other != null && f.options[f.options.length - 1].other.on == true, false);
            c(this.randomize).checkLabel("toggle", f.randomize != null && f.randomize.on == true, false);
            c(this.columns).val(f.columns && f.columns.value ? f.columns.value : 1);
            c(this.other).toggle(this.other.checked == true);
            c(this.randomize).toggle(this.randomize.checked == true);
            c(this.columns).toggle(c(this.columns).val() != 1);
            a.setValidation.apply(this, [f]);
            this.json = f
        },
        getJSON: function () {
            return this.json
        },
        setEnabled: function (e) {
            this.enabled = (e == true);
            if (this.enabled == true) {
                c(this.boxes).addClass("hand").find("input").removeAttr("disabled").addClass("hand")
            }
            if (this.enabled != true) {
                c(this.boxes).removeClass("hand").find("input").attr("disabled", "disabled").removeClass("hand")
            }
            c(this.textarea).prop("disabled", (e == false ? true : false));
            c(this.textarea).css("cursor", this.enabled != true ? "default" : "cursor");
            c(this.other).add(this.randomize).checkLabel("setEnabled", this.enabled);
            if (this.enabled == true) {
                c(this.other).add(this.randomize).attr("tabindex", "0")
            }
            if (this.enabled != true) {
                c(this.other).add(this.randomize).removeAttr("tabindex")
            }
            c(this.boxes).floatLabel("setEnabled", this.enabled).attr("tabindex", this.enabled ? "0" : "-1");
            c(this.validationToggle).css("visibility", this.enabled == true ? "visible" : "hidden");
            if (this.validation != null) {
                if (this.enabled) {
                    c(this.validation.min.value).add(this.validation.max.value).removeAttr("disabled")
                }
                if (!this.enabled) {
                    c(this.validation.min.value).add(this.validation.max.value).attr("disabled", "disabled")
                }
                c(this.validation.required.check).checkLabel("setEnabled", this.enabled == true)
            }
        },
        isEnabled: function () {
            return this.enabled
        },
        toggleMultiple: function (e) {
            if (e == true || e == false) {
                this.multipleOn = e
            }
            if (e == null) {
                this.multipleOn = !this.multipleOn
            }
            c(this.boxes).find("input[type=checkbox]").removeAttr("checked").toggle(this.multipleOn == true);
            c(this.boxes).find("input[type=radio]").removeAttr("checked").toggle(this.multipleOn != true);
            if (this.multipleOn == true) {
                this.json.multipleOn = true
            }
            if (this.multipleOn != true) {
                delete this.json.multipleOn
            }
            c(this.boxes).floatLabel("setLabel", this.multipleOn ? "Multiple choice" : "Single choice");
            if (this.multipleOn && this.validation != null) {
                c(this.validation).validationEditor("showRequired", false).validationEditor("showMin", true).validationEditor("showMax", true);
                c(this.validation.min.value).add(this.validation.max.value).attr("max", this.json.options.length)
            } else {
                if (this.validation != null) {
                    c(this.validation).validationEditor("showRequired", true).validationEditor("showMin", false).validationEditor("showMax", false);
                    c(this.validation.min.value).attr("max", 1)
                }
            }
        },
        adjust: function (f) {
            var e = c(this.randomize).outerWidth();
            var h = c.ObjectPlanet.unitLess(c(this.randomize).css("margin-right"));
            var i = c.ObjectPlanet.unitLess(c(this).find("td.options").css("padding-right"));
            var g = f - e - h - i;
            c(this.textarea).css("max-width", g + "px")
        }
    };
    var d = {
        hoverSingleMultipleIn: function (e) {
            if (c(this).hasClass("hand")) {
                c(this).addClass("hover")
            }
        },
        hoverSingleMultipleOut: function (e) {
            if (c(this).hasClass("hand")) {
                c(this).removeClass("hover")
            }
        },
        toggleSingleMultiple: function (e) {
            if (!c(this).hasClass("hand")) {
                return
            }
            if (e.type == "keydown" && e.keyCode != c.ObjectPlanet.KEY.ENTER && e.keyCode != c.ObjectPlanet.KEY.SPACE) {
                return
            }
            a.toggleMultiple.apply(this.self);
            if (this.self.preview) {
                c(this.self.preview.web.choice).html(c.choiceFormHtml(this.self.json)).choiceForm(this.self.json)
            }
            if (e.type == "keydown" && e.keyCode == c.ObjectPlanet.KEY.SPACE) {
                return false
            }
        },
        showControls: function () {
            a.showControls.apply(this.widget, [this.widget.enabled])
        },
        removeEmptyLine: function () {
            c(this).val(c.trim(c(this).val()))
        },
        addHoverEffect: function () {
            c(this.textarea).toggleClass("border", this.enabled)
        },
        removeHoverEffect: function () {
            c(this.textarea).removeClass("border")
        },
        toggleOtherField: function (e) {
            if (this.checked == true) {
                this.widget.json.options[this.widget.json.options.length - 1].other = {
                    on: true
                }
            }
            if (this.checked != true) {
                delete this.widget.json.options[this.widget.json.options.length - 1].other
            }
            if (this.widget.preview) {
                c(this.widget.preview.web.choice).html(c.choiceFormHtml(this.widget.json)).choiceForm(this.widget.json)
            }
        },
        toggleRandomize: function (e) {
            if (this.checked == true) {
                this.widget.json.randomize = {
                    on: true
                }
            }
            if (this.checked != true) {
                delete this.widget.json.randomize;
                delete this.widget.json.copy
            }
            if (this.widget.preview) {
                c(this.widget.preview.web.choice).html(c.choiceFormHtml(this.widget.json)).choiceForm(this.widget.json)
            }
        },
        toggleValidation: function (e) {
            if (e.type == "click" || (e.type == "keydown" && e.keyCode == c.ObjectPlanet.KEY.ENTER)) {
                a.toggleValidation.apply(this.self)
            }
            if (e.type == "keydown" && e.keyCode == c.ObjectPlanet.KEY.SPACE) {
                return false
            }
        },
        updateChoices: function () {
            a.updateChoices.apply(this.widget);
            if (this.widget.preview != null) {
                c(this.widget.preview.web.choice).html(c.choiceFormHtml(this.widget.json)).choiceForm(this.widget.json)
            }
        }
    }
})(jQuery);
(function (c) {
    var b = c("<label></label>").css({
        "font-size": "12px",
        "font-family": "Arial",
        "padding-left": "7px",
        "padding-right": "7px",
        border: "1px solid transparent"
    }).get(0);
    c.ratingEditor = function (r, p, m) {
        var n = m == true ? ' responses="true"' : "";
        var j = m == true ? ' disabled="disabled"' : "";
        var f = r && r.labels && r.labels[0] ? r.labels[0].def : "Bad";
        var q = r && r.maxRating != null ? Math.min(20, Math.max(1, r.maxRating)) : 5;
        var h = r && r.labels && r.labels.length == q ? r.labels[q - 1].def : "Good";
        var l = r && r.naLabel ? r.naLabel.def : "N/A";
        var o = r && r.showNA == true ? ' checked="checked"' : "";
        var e = r == null || !r.showNA ? ' disabled="disabled"' : "";
        var k = c.autoSizeInput.outer(f, b);
        var i = c.autoSizeInput.outer(h, b);
        var g = c.autoSizeInput.outer(l, b);
        return ('<div class="editor rating-editor"' + (p == false ? ' style="display: none;"' : "") + n + '><table cellspacing="0" cellpadding="0"><tr><td>' + c.inputBox({
            classes: "input bad-input",
            attributes: 'type="text" value="' + f + '" style="max-width: 10em; width: ' + k + 'px;"'
        }) + "</td><td>" + c.rangeEditor(r && r.maxRating ? r.maxRating : 5) + "</td><td>" + c.inputBox({
            classes: "input good-input",
            attributes: 'type="text" value="' + h + '" style="max-width: 10em; width: ' + i + 'px;"'
        }) + '</td><td><input class="na-check" type="checkbox"' + j + o + "></td><td>" + c.inputBox({
            classes: "input na-input",
            attributes: 'type="text" ' + e + ' value="' + l + '" style="max-width: 10em; width: ' + g + 'px;"'
        }) + '</td></tr></table><div class="validation-toggle" tabindex="0" style="visibility: hidden;">[<span>+</span>] Validation</div></div>')
    };
    c.fn.ratingEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (g) {
            var e = c(this).prop("enabled", true).get(0);
            this.bad = c(this).find("input.bad-input").bind("change", d.setBad).inputBox({
                reset: false,
                disabled: false,
                defaultText: "Bad"
            }).get(0);
            this.good = c(this).find("input.good-input").bind("change", d.setGood).inputBox({
                reset: false,
                disabled: false,
                defaultText: "Good"
            }).get(0);
            this.NA = c(this).find("input.na-input").bind("change", d.setNA).inputBox({
                reset: false,
                disabled: false,
                defaultText: "N/A"
            }).get(0);
            c(this.bad).add(this.good).add(this.NA).autoSizeInput();
            this.checkbox = c(this).find("input.na-check").bind("change", d.toggleNA).get(0);
            this.range = c(this).find(".range").rangeEditor("init", g && g.maxRating ? g.maxRating : 5, c(this.checkbox).attr("disabled") == "disabled").bind("change", d.setRange).get(0);
            this.bad.parent = this.good.parent = this.NA.parent = this.checkbox.self = this.range.self = this;
            this.validationToggle = c(this).find(".validation-toggle").bind("click keydown", d.toggleValidation).prop("self", this).get(0);
            this.json = g != null ? g : {};
            if (this.json.minRating == null) {
                this.json.minRating = 1
            }
            if (this.json.maxRating == null) {
                this.json.maxRating = 5
            }
            if (!this.json.showNA) {
                this.json.showNA = false
            }
            if (!this.json.naLabel) {
                this.json.naLabel = {
                    def: "N/A"
                }
            }
            if (!this.json.labels) {
                this.json.labels = [{
                    def: "Bad"
                }];
                for (var f = 1; f < this.json.maxRating - 1; f++) {
                    this.json.labels[f] = null
                }
                this.json.labels[this.json.maxRating - 1] = {
                    def: "Good"
                }
            }
            this.json.labels.length = this.json.maxRating;
            if (!this.json.validation) {
                this.json.validation = {
                    required: {
                        on: false,
                        message: {
                            def: ""
                        }
                    }
                }
            }
            if (this.json && this.json.validation && this.json.validation.required && this.json.validation.required.on == true) {
                a.toggleValidation.apply(this, [0])
            }
        },
        update: function (e) {
            if (e == null) {
                return
            }
            c(this.bad).val(e.labels && e.labels[0] && e.labels[0].def ? e.labels[0].def : "Bad");
            c(this.good).val(e.labels && e.labels[e.labels.length - 1] && e.labels[e.labels.length - 1].def ? e.labels[e.labels.length - 1].def : "Good");
            c(this.NA).val(e.naLabel && e.naLabel.def != null ? e.naLabel.def : "N/A");
            if (e.showNA == true) {
                c(this.checkbox).attr("checked", "checked")
            }
            if (e.showNA != true) {
                c(this.checkbox).removeAttr("checked")
            }
            c(this.bad).add(this.good).add(this.NA).autoSizeInput("adjust");
            c(this.range).rangeEditor("setRange", typeof e.maxRating == "number" ? e.maxRating : 5);
            if (e && e.validation && e.validation.required && e.validation.required.on == true) {
                a.toggleValidation.apply(this, [0, true, false]);
                c(this.validation.required.check).checkLabel("toggle", true, false);
                c(this.validation.required.message).val(e.validation.required.message && e.validation.required.message.def != null ? e.validation.required.message.def : "")
            } else {
                c(this.validation).hide();
                if (this.validation != null) {
                    c(this.validation.required.check).checkLabel("toggle", false, false)
                }
            }
        },
        showControls: function (e) {
            if (c(this).attr("responses") == "true") {
                return
            }
            if (e != true) {
                c(this.validationToggle).blur()
            }
            c(this.validationToggle).css("visibility", e == true && this.enabled == true ? "visible" : "hidden");
            c(this.helpButton).toggle(e == true)
        },
        toggleValidation: function (f, e) {
            f = f != null ? f : c.ObjectPlanet.SPEED;
            if (this.validation == null) {
                this.validation = c(c.validationEditor({
                    required: true,
                    display: false
                })).validationEditor(this.json.validation).appendTo(this).get(0);
                this.validation.self = this.self
            }
            e = (e == null ? c(this.validationToggle).find("span").text() == "+" : e);
            if (e == true) {
                c(this.validation).show(f)
            } else {
                c(this.validation).hide(f)
            }
            c(this.validationToggle).find("span").text(e ? "-" : "+")
        },
        setEnabled: function (e) {
            this.enabled = e == true;
            c(this.range).rangeEditor("setEnabled", e);
            c(this.checkbox).prop("disabled", !(e == true));
            if (this.validation != null) {
                c(this.validation.required.check).checkLabel("setEnabled", this.enabled)
            }
        },
        isEnabled: function () {
            return this.range.enabled
        },
        getJSON: function () {
            return this.json
        }
    };
    var d = {
        setRange: function () {
            this.self.json.maxRating = c(this).find("input[type=radio]").size();
            var e = [this.self.json.labels[0]];
            e[this.self.json.maxRating - 1] = this.self.json.labels[this.self.json.labels.length - 1];
            this.self.json.labels = e;
            c(this.self.good).trigger("focus");
            if (this.self.preview) {
                c(this.self.preview.web.rating).ratingForm("setRange", this.self.json.maxRating)
            }
        },
        setBad: function () {
            this.parent.json.labels[0].def = c(this).val();
            if (this.parent.preview) {
                var e = c.ObjectPlanet.spaces(c(this).val());
                c(this.parent.preview.web.rating.bad).html(e)
            }
        },
        setGood: function () {
            this.parent.json.labels[this.parent.json.maxRating - 1].def = c(this).val();
            if (this.parent.preview) {
                var e = c.ObjectPlanet.spaces(c(this).val());
                c(this.parent.preview.web.rating.good).html(e)
            }
        },
        setNA: function () {
            this.parent.json.naLabel.def = c(this).val();
            if (this.parent.preview) {
                var e = c.ObjectPlanet.spaces(c(this).val());
                c(this.parent.preview.web.rating.naContainer).toggle(this.parent.json.showNA == true);
                c(this.parent.preview.web.rating.naLabel).html(e)
            }
        },
        toggleNA: function (e) {
            this.self.json.showNA = e.target.checked == true;
            c(this.self.NA).prop("disabled", !e.target.checked);
            if (e.target.checked == true) {
                c(this.self.NA).focus()
            }
            if (this.self.preview) {
                c(this.self.preview.web.rating.naContainer).toggle(this.self.json.showNA == true)
            }
        },
        toggleValidation: function (e) {
            if (e.type == "click" || (e.type == "keydown" && e.keyCode == c.ObjectPlanet.KEY.ENTER)) {
                a.toggleValidation.apply(this.self)
            }
            if (e.type == "keydown" && e.keyCode == c.ObjectPlanet.KEY.SPACE) {
                return false
            }
        }
    }
})(jQuery);
(function (c) {
    var b = ('<option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option><option value="11">11</option><option value="12">12</option><option value="13">13</option><option value="14">14</option><option value="15">15</option><option value="16">16</option><option value="17">17</option><option value="18">18</option><option value="19">19</option><option value="20">20</option>');
    c.rangeEditor = function (f) {
        if (f == undefined) {
            f = 5
        }
        f = Math.max(2, Math.min(f, 20));
        for (var g = 1, e = '<span class="range"><span>'; g <= f; g++) {
            e += "<label>" + g + '<input disabled="disabled" type="radio" name="rating" value="' + g + '"></label>'
        }
        return e + '</span><select class="invisible"></select></span>'
    }, c.fn.rangeEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (f, g) {
            var e = this;
            this.enabled = g != true;
            this.range = (f != undefined ? f : 5);
            this.range = Math.max(2, Math.min(this.range, 20));
            this.rangeNumbers = c(this).find("> span").get(0);
            this.select = c(this).find("select").bind("change", d.setRange).bind("blur", d.hideSelect).get(0);
            this.select.self = this;
            c(this).hover(d.hoverShow, d.hoverHide).get(0).widget = this;
            c(this.select).bind("focus", d.hoverShow).get(0).widget = this
        },
        setRange: function (f) {
            if (f != this.currentRange) {
                f = Math.max(2, Math.min(f, 20));
                for (var g = 1, e = ""; g <= f; g++) {
                    e += "<label>" + g + '<input disabled="disabled" type="radio" name="rating" value="' + g + '"></label>'
                }
                c(this.rangeNumbers).html(e);
                c(this).find("option").prop("selected", "").eq(f - 2).prop("selected", true);
                this.currentRange = this.range = f
            }
        },
        getRange: function () {
            return c(this.rangeNumbers).find("input").size()
        },
        setEnabled: function (e) {
            this.enabled = e;
            if (e == false) {
                c(this.select).attr("disabled", "disabled")
            }
            if (e != false) {
                c(this.select).removeAttr("disabled")
            }
        }
    };
    var d = {
        setRange: function () {
            a.setRange.apply(this.self, [c(this).trigger("blur").val()])
        },
        showSelect: function () {
            c(this).removeClass("invisible").prop("hasFocus", true).width(c(this.self).width()).show()
        },
        hideSelect: function () {
            c(this).addClass("invisible").prop("hasFocus", false)
        },
        hoverShow: function () {
            if (this.widget.selectInited != true) {
                c(this.widget.select).html(b);
                c(this.widget.select).find("option").eq(this.widget.range - 2).prop("selected", true);
                this.widget.selectInited = true
            }
            if (this.widget.enabled == true) {
                c(this.widget.select).removeClass("invisible").width(c(this.widget).width()).show()
            }
        },
        hoverHide: function () {
            if (!this.select.hasFocus || this.select.hasFocus == false) {
                c(this.select).addClass("invisible")
            }
        }
    }
})(jQuery);
(function (d) {
    var c = d("<label></label>").css({
        "font-size": "12px",
        "font-family": "Arial",
        "padding-left": "6px",
        "padding-right": "6px",
        "border-left-width": "1px",
        "border-right-width": "1px"
    }).get(0);
    var b = d("<label></label>").css({
        "font-size": "12px",
        "font-family": "Arial",
        "padding-left": "6px",
        "padding-right": "6px",
        "border-width": "1px"
    }).get(0);
    d.dropdownEditor = function (s, n, k) {
        var h = k == true ? " disabled" : "";
        var l = k == true ? ' responses="true"' : "";
        var o = s && s.label && s.label.def != null ? d.autoSizeInput.outer(s.label.def, c) : 0;
        var p = s != null && s.label != null ? ' value="' + s.label.def + '"' : "";
        for (var j = 0, m = ""; s != null && s.options != null && j < s.options.length; j++) {
            m += s.options[j].def != undefined ? s.options[j].def : "";
            m += s.options[j].value != undefined ? (";" + s.options[j].value) : "";
            if (j < s.options.length - 1) {
                m += "\n"
            }
        }
        var g = d.autoSizeInput.outer(m, b) + 16;
        var f = d.browser.msie ? " white-space: pre; " : "";
        var q = s && s.multipleOn == true || s && s.randomize && s.randomize.on == true ? "" : ' style="display: none;"';
        var r = '<div class="editor dropdown-editor"' + (n == false ? ' style="display: none;"' : "") + l + '><table cellspacing="0" cellpadding="0"><tr><td><input type="text" class="label borderBox" placeholder="Dropdown label..."' + p + h + ' style="width: ' + o + 'px; ">' + d.autoSizeTextArea({
            attributes: 'placeholder="Type in your options..." style="width: ' + g + "px; " + f + '"' + h,
            content: m
        }) + '</td><td class="bottom multiple">' + d.checkLabel({
            attr: ' tabindex="0"' + q,
            label: "Multiple selections"
        }) + "<br>" + d.checkLabel({
            attr: ' tabindex="0"' + q,
            label: "Randomize"
        }) + '</td></tr><tr><td colspan="2"><div class="validation-toggle" tabindex="0" style="visibility: hidden;">[<span>+</span>] Validation</div></td></tr></table></div>';
        return r
    };
    d.fn.dropdownEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (g) {
            var f = this;
            this.json = g != null ? g : {};
            if (!this.json.label) {
                this.json.label = {
                    def: ""
                }
            }
            if (!this.json.options) {
                this.json.options = []
            }
            this.label = d(this).find("input.label").prop("dropdown", this).inputBox().autoSizeInput().bind("change", e.setLabel).bind("focus keyup", e.adjustOptions).bind("keyup", e.updatePreview).get(0);
            this.options = d(this).find("textarea").prop("dropdown", this).autoSizeTextArea({
                vertical: false,
                disabled: false
            }).bind("change", e.setOptions).get(0);
            this.multiple = d(this).find(".op-check:contains(Multiple selections)").checkLabel({
                checked: g != null && g.multipleOn == true
            }).bind("change", function (h) {
                f.json.multipleOn = this.checked == true;
                d(f.label).removeAttr("disabled");
                if (f.json.multipleOn == true) {
                    d(f.label).attr("disabled", "disabled")
                }
                e.updatePreview.apply(this)
            }).prop("dropdown", this).get(0);
            this.randomize = d(this).find(".op-check:contains(Randomize)").checkLabel({
                checked: g && g.randomize && g.randomize.on == true
            }).bind("change", e.toggleRandomize).prop("dropdown", this).get(0);
            if (!this.json.validation) {
                this.json.validation = {
                    required: {
                        on: false,
                        message: {
                            def: ""
                        }
                    }
                }
            }
            this.validationToggle = d(this).find(".validation-toggle").bind("click keydown", e.toggleValidation).prop("self", this).get(0);
            d(this.options).add(this.label).bind("change", e.updatePreview);
            if (this.json && this.json.validation && this.json.validation.required && this.json.validation.required.on == true) {
                a.toggleValidation.apply(this, [0])
            }
        },
        update: function (g) {
            if (g == null) {
                return
            }
            d(this.label).val(g.label && g.label.def != null ? g.label.def : "");
            if (g.options instanceof Array) {
                for (var f = 0, h = ""; f < g.options.length; f++) {
                    h += g.options[f].def + "\n"
                }
                d(this.options).val(d.trim(h))
            }
            d(this.randomize).checkLabel("toggle", g.randomize && g.randomize.on == true, false).toggle(g.randomize && g.randomize.on == true);
            d(this.multiple).checkLabel("toggle", g.multipleOn == true, false).toggle(g.multipleOn == true);
            if (g.validation && g.validation.required && g.validation.required.on == true) {
                a.toggleValidation.apply(this, [0, true]);
                d(this.validation.required.check).checkLabel("toggle", true, false);
                d(this.validation.required.message).val(g.validation.required.message && g.validation.required.message.def ? g.validation.required.message.def : "")
            } else {
                d(this.validation).hide()
            }
            d(this.options).autoSizeTextArea("adjust");
            e.adjustOptions.apply(d(this.label).autoSizeInput("adjust").get(0))
        },
        showControls: function (g) {
            if (!this.enabled && d(this).attr("responses") == "true") {
                return
            }
            if (g != true) {
                d(this.validationToggle).blur()
            }
            var f = g == true || this.multiple.checked == true || this.randomize.checked == true;
            d(this.multiple).add(this.randomize).toggle(f);
            d(this.helpButton).toggle(g == true);
            d(this.validationToggle).css("visibility", g ? "visible" : "hidden")
        },
        toggleValidation: function (g, f) {
            g = g != null ? g : d.ObjectPlanet.SPEED;
            if (this.validation == null) {
                this.validation = d(d.validationEditor({
                    required: true,
                    display: false
                })).validationEditor(this.json.validation).appendTo(this).get(0)
            }
            f = f == null ? d(this.validationToggle).find("span").text() == "+" : f;
            if (f == true) {
                d(this.validation).show(g)
            }
            if (f != true) {
                d(this.validation).hide(g)
            }
            d(this.validationToggle).find("span").text(f ? "-" : "+")
        },
        setOptions: function (f) {
            f = f.length > 0 ? f.split("\n") : [];
            this.json.options.length = 0;
            for (var g = 0; g < f.length; g++) {
                this.json.options[g] = a.createOption(f[g])
            }
        },
        createOption: function (f) {
            var g = {
                def: f
            };
            if (f != null && f.indexOf(";") >= 0) {
                g.value = f.substring(f.indexOf(";") + 1);
                g.def = f.substring(0, f.indexOf(";"))
            }
            return g
        },
        getJSON: function () {
            return this.json
        },
        setEnabled: function (f) {
            this.enabled = f == true;
            if (this.enabled) {
                d(this.label).add(this.options).removeAttr("disabled")
            }
            if (!this.enabled) {
                d(this.label).add(this.options).attr("disabled", "disabled")
            }
            d(this.multiple).add(this.randomize).checkLabel("setEnabled", this.enabled);
            if (this.enabled) {
                d(this.multiple).add(this.randomize).attr("tabindex", "0")
            }
            if (!this.enabled) {
                d(this.multiple).add(this.randomize).removeAttr("tabindex")
            }
            if (this.validation != null) {
                d(this.validation.required.check).checkLabel("setEnabled", this.enabled)
            }
        }
    };
    var e = {
        setLabel: function () {
            this.dropdown.json.label = {
                def: d(this).val()
            }
        },
        adjustOptions: function () {
            d(this.dropdown.options).css("min-width", d(this).outerWidth() + "px")
        },
        setOptions: function () {
            var g = this.dropdown.json;
            var h = g == null || (g != null && g.options instanceof Array && g.options.length == 0);
            var f = d.trim(d(this).val());
            if (typeof f == "string") {
                f = f.replace(/&lt;/g, "<")
            }
            a.setOptions.apply(this.dropdown, [f]);
            if (f.length == 0 || (f.length > 0 && h == true)) {
                d(this.dropdown).trigger("validationChange")
            }
        },
        updatePreview: function () {
            if (this == this.dropdown.label) {
                this.dropdown.json.label = {
                    def: d(this).val()
                }
            }
            if (this.dropdown.preview) {
                var f = d(this.dropdown.preview.web.dropdown).width() - 2;
                d(this.dropdown.preview.web.dropdown).html(d.dropdownFormHtml(this.dropdown.json)).dropdownForm(this.dropdown.json);
                d(this.dropdown.preview.web.dropdown.select).css("max-width", f + "px")
            }
        },
        toggleValidation: function (f) {
            if (f.type == "click" || (f.type == "keydown" && f.keyCode == d.ObjectPlanet.KEY.ENTER)) {
                a.toggleValidation.apply(this.self)
            }
            if (f.type == "keydown" && f.keyCode == d.ObjectPlanet.KEY.SPACE) {
                return false
            }
        },
        toggleRandomize: function (f) {
            if (this.checked == true) {
                this.dropdown.json.randomize = {
                    on: true
                }
            }
            if (this.checked != true) {
                delete this.dropdown.json.randomize;
                delete this.dropdown.json.copy
            }
            if (this.dropdown.preview) {
                d(this.dropdown.preview.web.dropdown).html(d.dropdownFormHtml(this.dropdown.json)).dropdownForm(this.dropdown.json)
            }
        }
    }
})(jQuery);
(function (b) {
    b.fieldsEditor = function (f, h, e) {
        var g = e || f == null || f.length < 2 ? ' style="display: none;"' : "";
        var d = '<div class="editor fields-editor"' + (h == false ? ' style="display: none;"' : "") + ">";
        d += b.fieldsEditorHtml(f, h, e);
        return d + "</div>"
    };
    b.fieldsEditorHtml = function (g, k, f) {
        var j = f ? ' style="display: none;"' : "";
        var h = (g == null || g.length < 2) ? ' style="display: none;"' : j;
        var d = b.fieldEditor({
            json: g && g.length > 0 ? g[0] : null,
            append: b.fieldsEditor.createButtons(j, h),
            hasResponses: f
        });
        for (var e = 1; g != null && e < g.length; e++) {
            d += b.fieldEditor({
                json: g && g.length > 0 ? g[e] : null,
                append: b.fieldsEditor.createButtons(j, h),
                hasResponses: f
            })
        }
        return d
    }, b.fieldsEditor.createButtons = function (e, d) {
        if (e == null) {
            e = ""
        }
        if (d == null) {
            d = ""
        }
        return ('<span tabindex="0" class="addField button"' + e + '"><canvas></canvas></span><span tabindex="0" class="deleteField button"' + d + '><canvas></canvas></span><span class="more">...</span>')
    };
    b.fn.fieldsEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (e) {
            var d = this;
            this.enabled = true;
            this.json = e ? e : [];
            if (!this.json[0]) {
                this.json[0] = {}
            }
            this.fields = [];
            b(this).find(".field-editor").each(function (f) {
                d.fields[f] = b(this).fieldEditor(d.json[f]).get(0);
                a.configureField.apply(d, [d.fields[f], f, false, d.json.length > 1])
            });
            b(this).bind("change", function (f) {
                a.getJSON.apply(d);
                if ((f.target.nodeName == "SELECT" || b(f.target).attr("type") == "checkbox") && d.preview && d.preview.web != null) {
                    b(d.preview.web.fields).html(b.fieldsFormHtml(d.json)).fieldsForm(d.json).fieldsForm("adjust");
                    if (b(f.target).hasClass("required")) {
                        b(d).trigger("validationChange")
                    }
                } else {
                    if (b(f.target).hasClass("message") && d.preview && d.preview.web != null) {
                        b(d.preview.web.fields).html(b.fieldsFormHtml(d.json)).fieldsForm(d.json)
                    }
                }
            })
        },
        update: function (d) {
            b(this).html(b.fieldsEditorHtml(d, true)).fieldsEditor("init", d)
        },
        configureField: function (h, f, d, g) {
            var e = this;
            h.index = f;
            h.addField = b(h).find(".addField").bind("click keydown", c.addField).get(0);
            b(h.addField).find("canvas").css({
                width: "14px",
                height: "14px"
            }).plusIcon();
            h.deleteField = b(h).find(".deleteField").bind("click keydown", c.deleteField).floatLabel({
                label: "Delete field",
                position: "bottom",
                free: true
            }).get(0);
            b(h.deleteField).find("canvas").css({
                width: "14px",
                height: "14px"
            }).deleteIcon();
            h.more = b(h).find(".more").bind("click", function () {
                b(h).fieldEditor("toggleMoreOptions")
            }).get(0);
            if (d) {
                a.getJSON.apply(this)
            }
            b(h.label).prop("fieldsEditor", this).bind("change keyup", c.updatePreviewLabel);
            b(h.menu).prop("fieldsEditor", this).bind("change", c.clearPreview)
        },
        getJSON: function () {
            if (this.json == null) {
                this.json = []
            }
            for (var d = 0; d < this.fields.length; d++) {
                this.json[d] = b(this.fields[d]).fieldEditor("getJSON")
            }
            return this.json
        },
        addField: function (d) {
            if (!d) {
                d = this.fields.length
            }
            if (d < this.fields.length) {
                this.fields.splice(d, 0, null);
                this.json.splice(d, 0, null)
            }
            this.fields[d] = b(b.fieldEditor({
                append: b.fieldsEditor.createButtons()
            })).fieldEditor().get(0);
            if (d == this.fields.length - 1) {
                b(this.fields[d]).appendTo(this)
            } else {
                b(this.fields[d]).insertBefore(this.fields[d + 1])
            }
            a.configureField.apply(this, [this.fields[d], d, true]);
            for (var e = 0; e < this.fields.length; e++) {
                b(this.fields[e].deleteField).toggle(this.fields.length > 1);
                this.fields[e].index = e
            }
            if (this.preview) {
                b(this.preview.web.fields).html(b.fieldsFormHtml(this.json)).fieldsForm(this.json).fieldsForm("adjust")
            }
            b(this.fields[d]).find("input:eq(0)").trigger("focus");
            b(this).trigger("change")
        },
        deleteField: function (e) {
            this.fields.splice(e.index, 1);
            this.json.splice(e.index, 1);
            b(e).remove();
            b(this).trigger("change").trigger("validationChange");
            for (var d = 0; d < this.fields.length; d++) {
                b(this.fields[d].deleteField).toggle(this.fields.length > 1);
                this.fields[d].index = d
            }
            if (this.preview) {
                b(this.preview.web.fields).html(b.fieldsFormHtml(this.json)).fieldsForm(this.json).fieldsForm("adjust")
            }
        },
        setEnabled: function (d) {
            this.enabled = d;
            b(this.fields).fieldEditor("setEnabled", d);
            b(this.fields).find(".addField").toggle(d);
            b(this.fields).find(".deleteField").toggle(d && this.fields.length > 1)
        },
        isEnabled: function () {
            return this.enabled
        },
        addPreview: function (e) {
            this.preview = e;
            for (var d = 0; this.fields != null && d < this.fields.length; d++) {
                this.fields[d].preview = e
            }
        },
        showControls: function (d) {
            b(this.helpButton).toggle(d == true)
        }
    };
    var c = {
        returnFalse: function () {
            return false
        },
        updatePreviewLabel: function () {
            var d = b(this).closest(".field-editor").get(0).index;
            if (this.fieldsEditor.preview) {
                var e = b.ObjectPlanet.spaces(b(this).val());
                b(this.fieldsEditor.preview.web.fields.fields[d].label).html(e);
                b(this.fieldsEditor.preview.web.fields).fieldsForm("adjust")
            }
        },
        clearPreview: function () {
            var d = b(this).closest(".field-editor").get(0).index;
            b(this.fieldsEditor.fields[d].min).add(this.fieldsEditor.fields[d].max).toggle(this.fieldsEditor.fields[d].json.type == "integer" || this.fieldsEditor.fields[d].json.type == "decimal");
            if (this.fieldsEditor.preview) {
                b(this.fieldsEditor.preview.web.fields.fields[d].input).val("")
            }
        },
        addField: function (e) {
            if (e.type == "keydown" && e.keyCode == b.ObjectPlanet.KEY.ENTER || e.type == "click") {
                var d = b(this).closest(".field-editor").get(0);
                a.addField.apply(d.parentNode, [d.index + 1])
            }
            if (e.type == "keydown" && e.keyCode == b.ObjectPlanet.KEY.SPACE) {
                return false
            }
        },
        deleteField: function (d) {
            if (d.type == "keydown" && d.keyCode == b.ObjectPlanet.KEY.ENTER || d.type == "click") {
                a.deleteField.apply(b(this).closest(".fields-editor").get(0), [b(this).closest(".field-editor").get(0)])
            }
            if (d.type == "keydown" && d.keyCode == b.ObjectPlanet.KEY.SPACE) {
                return false
            }
        }
    }
})(jQuery);
(function (c) {
    var b = c("<label></label>").css({
        "font-size": "12px",
        "font-family": "Arial",
        "padding-left": "5px",
        "padding-right": "5px",
        "border-left-width": "1px",
        "border-right-width": "1px"
    }).get(0);
    c.fieldEditor = function (q) {
        var j = q && q.hasResponses == true ? ' style="display: none;"' : "";
        var o = q && q.hasResponses == true ? "default" : "pointer";
        var m = q && q.json && q.json.label && q.json.label.def ? q.json.label.def : "";
        var e = c.autoSizeInput.outer(m, b);
        var n = m.length > 0 ? 'value="' + m + '" ' : "";
        var g = q && q.json && (q.json.type == "integer" || q.json.type == "decimal") ? "" : ' style="display: none;"';
        var i = "";
        var p = "";
        var f = "";
        var l = "";
        if (q && q.json && q.json.validation) {
            if (q.json.validation.required && q.json.validation.required.on == true) {
                i = ' checked="checked"'
            }
            if (q.json.validation.message && q.json.validation.message.def != null) {
                p = ' value="' + q.json.validation.message.def + '"'
            }
            if (q.json.validation.min && q.json.validation.min.value != null) {
                f = ' value="' + q.json.validation.min.value + '"'
            }
            if (q.json.validation.max && q.json.validation.max.value != null) {
                l = ' value="' + q.json.validation.max.value + '"'
            }
        }
        var h = "";
        if (q && q.hasResponses == true && i != ' checked="checked"') {
            h = ' style="display: none;"'
        }
        var k = "text";
        if (q && q.json && typeof q.json.type == "string" && q.json.type != "") {
            k = q.json.type
        }
        if (q && q.json && q.json.rows == 2) {
            k = "text2"
        }
        if (q && q.json && q.json.rows == 3) {
            k = "text3"
        }
        if (q && q.json && q.json.rows == 4) {
            k = "text4"
        }
        if (q && q.json && q.json.rows == 5) {
            k = "text5"
        }
        return markup = '<div class="field-editor" responses="' + (q && q.hasResponses == true) + '"><table cellspacing="0" cellpadding="0"><tr><td>' + c.inputBox({
            classes: "input",
            attributes: n + 'placeholder="Add a label..." style="width: ' + e + 'px;"'
        }) + '</td><td><select><option value="text"' + (k == "text" ? ' selected="selected"' : "") + '>Text</option><option value="email"' + (k == "email" ? ' selected="selected"' : "") + '>Email</option><option value="integer"' + (k == "integer" ? ' selected="selected"' : "") + '>Integer</option><option value="decimal"' + (k == "decimal" ? ' selected="selected"' : "") + '>Decimal</option><option value="text2"' + (k == "text2" ? ' selected="selected"' : "") + '>2 rows</option><option value="text3"' + (k == "text3" ? ' selected="selected"' : "") + '>3 rows</option><option value="text4"' + (k == "text4" ? ' selected="selected"' : "") + '>4 rows</option><option value="text5"' + (k == "text5" ? ' selected="selected"' : "") + '>5 rows</option></select></td><td><input type="checkbox" class="required hand"' + i + h + "></td><td>" + c.inputBox({
            classes: "message",
            attributes: 'placeholder="Message..."' + p
        }) + "</td><td>" + c.inputBox({
            classes: "min",
            attributes: 'type="text" placeholder="Min.."' + g + f
        }) + "</td><td>" + c.inputBox({
            classes: "max",
            attributes: 'type="text" placeholder="Max.."' + g + l
        }) + "</td>" + (q != null && q.append != null ? ("<td>" + q.append + "</td>") : "") + "</tr></table></div>"
    };
    c.fn.fieldEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (f) {
            var e = this;
            this.table = c(this).find("> table").get(0);
            this.label = c(this).find("input.input").prop("widget", this).inputBox({
                disabled: false
            }).autoSizeInput().bind("change", d.setLabel).get(0);
            this.menu = c(this).find("select").prop("self", this).bind("change", d.setType).get(0);
            this.required = c(this).find("input.required").floatLabel({
                label: "Required",
                position: "bottom",
                free: true
            }).get(0);
            this.message = c(this).find("input.message").inputBox().get(0);
            this.min = c(this).find("input.min").get(0);
            this.max = c(this).find("input.max").get(0);
            c.ObjectPlanet.minMaxPair({
                min: this.min,
                max: this.max,
                decimal: f && f.type == "decimal"
            });
            this.json = f ? f : {};
            if (!this.json.type) {
                this.json.type = "text"
            }
            if (!this.json.label) {
                this.json.label = {
                    def: ""
                }
            }
            if (this.json.width != null && this.json.width != "default") {
                a.toggleMoreOptions.apply(this)
            }
            if (c(this).attr("responses") == "true") {
                a.setEnabled.apply(this, [false])
            }
        },
        hasValidation: function () {
            var e = false;
            if (this.json.validation != null) {
                e = e || (this.json.validation.required != null && this.json.validation.required.on == true);
                e = e || (this.json.validation.min != null && this.json.validation.min.value != "");
                e = e || (this.json.validation.max != null && this.json.validation.max.value != "")
            }
            return e
        },
        setEnabled: function (e) {
            c(this.menu).removeAttr("disabled");
            if (e == false) {
                c(this.menu).attr("disabled", "disabled")
            }
            c(this.menu).css("cursor", e ? "pointer" : "default").popdown("setEnabled", e);
            c(this.menu).find("label").css("cursor", e ? "pointer" : "default");
            c(this.menu).find("span").toggle(e);
            if (e == true) {
                c(this.menu).attr("tabindex", "0");
                c(this.required).removeAttr("disabled").add(this.message).show();
                c(this.min).add(this.max).removeAttr("disabled").toggle(this.json && (this.json.type == "integer" || this.json.type == "decimal"))
            } else {
                c(this.menu).removeAttr("tabindex");
                c(this.required).add(this.min).add(this.max).attr("disabled", "disabled");
                c(this.required).toggle(this.json && this.json.validation != null && this.json.validation.required && this.json.validation.required.on == true);
                c(this.message).toggle(this.json && this.json.validation != null && this.json.validation.message && this.json.validation.message.def != "");
                c(this.min).toggle(c(this.min).val() != "");
                c(this.max).toggle(c(this.max).val() != "")
            }
        },
        createMoreOptions: function (f) {
            var e = '<div class="moreOptions" style="display: inline-block"><select>';
            e += '<option value="default">Default width</option>';
            e += '<option value="5"' + (f && f.width == "5em" ? ' selected="selected"' : "") + ">Width 5</option>";
            e += '<option value="10"' + (f && f.width == "10em" ? ' selected="selected"' : "") + ">Width 10</option>";
            e += '<option value="15"' + (f && f.width == "15em" ? ' selected="selected"' : "") + ">Width 15</option>";
            e += '<option value="20"' + (f && f.width == "20em" ? ' selected="selected"' : "") + ">Width 20</option>";
            e += '<option value="25"' + (f && f.width == "25em" ? ' selected="selected"' : "") + ">Width 25</option>";
            e += '<option value="full"' + (f && f.width == "100%" ? ' selected="selected"' : "") + ">Full width</option>";
            return c(e + "</select></div>").toggle(f != null && f.width != null && f.width != "default")
        },
        toggleMoreOptions: function () {
            if (this.moreOptions == null) {
                this.moreOptions = a.createMoreOptions(this.json).get(0);
                c("<td></td>").html(this.moreOptions).appendTo(c(this.table).find("tr"));
                this.fieldWidth = c(this.moreOptions).find("select").get(0)
            }
            c(this.moreOptions).toggle()
        },
        getJSON: function () {
            if (this.json == null) {
                this.json = {}
            }
            if (this.json.label == null) {
                this.json.label = {
                    def: ""
                }
            }
            if (this.json.validation == null) {
                this.json.validation = {}
            }
            if (this.json.validation.required == null) {
                this.json.validation.required = {}
            }
            if (this.json.validation.message == null) {
                this.json.validation.message = {}
            }
            if (this.json.validation.message.def == null) {
                this.json.validation.message.def = ""
            }
            var e = c(this.menu).val();
            if (e.indexOf("text") == 0 && e != "text") {
                this.json.type = "text";
                this.json.rows = e.substring("text".length) - 0
            } else {
                delete this.json.rows;
                this.json.type = c(this.menu).val()
            }
            this.json.label.def = c(this.label).val();
            this.json.validation.required.on = c(this.required).is(":checked");
            this.json.validation.message.def = c(this.message).val();
            delete this.json.validation.min;
            delete this.json.validation.max;
            if (c(this.min).is(":visible")) {
                if (c(this.min).val() == "") {
                    this.json.validation.min = {}
                }
                if (c(this.min).val() != "") {
                    this.json.validation.min = {
                        value: c(this.min).val() - 0
                    }
                }
                if (isNaN(this.json.validation.min.value)) {
                    this.json.validation.min = {}
                }
            }
            if (c(this.max).is(":visible")) {
                if (c(this.max).val() == "") {
                    this.json.validation.max = {}
                }
                if (c(this.max).val() != "") {
                    this.json.validation.max = {
                        value: c(this.max).val() - 0
                    }
                }
                if (isNaN(this.json.validation.max.value)) {
                    this.json.validation.max = {}
                }
            }
            delete this.json.width;
            if (this.fieldWidth != null && c(this.fieldWidth).val() != "default") {
                if (c(this.fieldWidth).val() == "full") {
                    this.json.width = "100%"
                }
                if (c(this.fieldWidth).val() != "full") {
                    this.json.width = c(this.fieldWidth).val() + "em"
                }
            }
            return this.json
        }
    };
    var d = {
        initMenu: function () {
            if (this.self.fieldInited == true) {
                return
            }
            var e = c(this.popdown).find("label");
            this.self.menu.items = {
                text: e.get(0),
                email: e.get(1),
                integer: e.get(2),
                decimal: e.get(3)
            };
            this.self.fieldInited = true
        },
        setLabel: function () {
            this.widget.json.label.def = c(this).val()
        },
        setType: function (e) {
            this.self.json.type = c(this).val();
            c(this.self.min).add(this.self.max).toggle(c(this).val() == "integer" || c(this).val() == "decimal").numericField("setDecimalOn", c(this).val() == "decimal")
        }
    }
})(jQuery);
(function (c) {
    var b = c("<label></label>").css({
        "font-size": "12px",
        "font-family": "Arial",
        "line-height": "14.5px",
        "padding-top": "12px",
        "padding-bottom": "10px",
        border: "1px solid transparent"
    }).get(0);
    c.commentEditor = function (e, h, g) {
        var f = e != null && e.label != null ? e.label.def : "";
        var d = c.autoSizeTextArea.outer(f, b, g);
        return ('<div class="editor comment-editor borderBox"' + (h == false ? ' style="display: none;"' : "") + ">" + c.autoSizeTextArea({
            start: "<textarea",
            end: "</textarea>",
            label: "free-text response is on",
            attributes: 'placeholder="Click to add a label to the free-text input box..." style="height: ' + d + 'px;"',
            content: f
        }) + "</div>")
    };
    c.fn.commentEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function () {
            this.label = c(this).find("div").autoSizeTextArea({
                disabled: false,
                horizontal: false
            }).get(0)
        },
        update: function (d) {
            c(this.label.input).val(d && d.label && d.label.def != null ? d.label.def : "");
            c(this.label).autoSizeTextArea("adjust")
        }
    }
})(jQuery);
(function (b) {
    b.validationEditor = function (e) {
        var f = b.inputBox({
            attributes: 'type="text" placeholder="Validation message..."'
        });
        var d = '<table class="validation-editor" cellpadding="0" cellspacing="0"';
        if (e && e.display == false) {
            d += ' style="display: none;"'
        }
        d += ">";
        if (e && e.required == true) {
            var g = e.displayRequired == false ? ' style="display: none;" ' : "";
            d += "<tr" + g + '><td class="required">' + b.checkLabel({
                attr: ' tabindex="0"',
                label: "Required"
            }) + "</td><td>" + f + "</td></tr>"
        }
        if (e && e.min == true) {
            var g = e.displayMin == false ? ' style="display: none;" ' : "";
            d += "<tr" + g + '><td class="min right">Select at least:<input type="number" min="0"></td><td>' + f + "</td></tr>"
        }
        if (e && e.max == true) {
            var g = e.displayMax == false ? ' style="display: none;" ' : "";
            d += "<tr" + g + '><td class="max right">Select at most:<input type="number" min="0"></td><td>' + f + "</td></tr>"
        }
        return d + "</table>"
    };
    b.fn.validationEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d, e) {
            b(this).find("input[type=text]").inputBox({
                disabled: false
            }).bind("click", c.returnFalse);
            this.required = b(this).find(".required").get(0);
            this.min = b(this).find(".min").get(0);
            this.max = b(this).find(".max").get(0);
            this.callback = e;
            if (this.required != null) {
                this.required.check = b(this.required).find(".op-check").checkLabel().bind("change", c.toggleRequired).prop("self", this).checkLabel("paint").get(0);
                this.required.message = b(this.required).closest("tr").find("input[type=text]").bind("change", c.setRequiredMessage).prop("self", this).get(0)
            }
            if (this.min != null) {
                this.min.value = b(this.min).find("input[type=number]").bind("change click blur", c.updateMinValue).bind("keydown keypress keyup", c.ensureNumericOnly).prop("self", this).get(0);
                this.min.message = b(this.min).closest("tr").find("input[type=text]").bind("change", c.updateMinMessage).prop("self", this).get(0)
            }
            if (this.max != null) {
                this.max.value = b(this.max).find("input[type=number]").bind("change click blur", c.updateMaxValue).bind("keydown keypress keyup", c.ensureNumericOnly).prop("self", this).get(0);
                this.max.message = b(this.max).closest("tr").find("input[type=text]").bind("change", c.updateMaxMessage).prop("self", this).get(0)
            }
            this.json = d ? d : {};
            if (this.required && !this.json.required) {
                this.json.required = {
                    on: false,
                    message: {
                        def: ""
                    }
                }
            }
            if (this.min && !this.json.min) {
                this.json.min = {
                    value: 0,
                    message: {
                        def: ""
                    }
                }
            }
            if (this.max && this.max.enabled != false && !this.json.max) {
                this.json.max = {
                    value: 0,
                    message: {
                        def: ""
                    }
                }
            }
            if (this.required) {
                b(this.required.check).prop("checked", this.json.required && this.json.required.on).checkLabel("paint");
                b(this.required.message).val(this.json.required && this.json.required.message && this.json.required.message.def ? this.json.required.message.def : "")
            }
            if (this.min) {
                b(this.min.value).val(this.json.min && this.json.min.value > 0 ? this.json.min.value : "");
                b(this.min.message).val(this.json.min && this.json.min.message && this.json.min.message.def ? this.json.min.message.def : "")
            }
            if (this.max && this.max.enabled != false) {
                b(this.max.value).val(this.json.max && this.json.max.value > 0 ? this.json.max.value : "");
                b(this.max.message).val(this.json.max && this.json.max.message && this.json.max.message.def ? this.json.max.message.def : "")
            }
        },
        showRequired: function (d) {
            b(this.required).closest("tr").toggle(d == true)
        },
        showMin: function (d) {
            b(this.min).closest("tr").toggle(d == true)
        },
        showMax: function (d) {
            b(this.max).closest("tr").toggle(d == true)
        },
        getJSON: function () {
            return this.json
        }
    };
    var c = {
        returnFalse: function () {
            return false
        },
        updateMinValue: function () {
            if (!this.self.json.min) {
                this.self.json.min = {}
            }
            var d = b(this).val() - 0;
            if (b(this).attr("max") != null && this.max < d) {
                d = b(this).attr("max") - 0;
                b(this).val(d)
            }
            this.self.json.min.value = d;
            if (this.self.json.max && this.self.json.max.value != 0 && this.self.json.max.value < this.self.json.min.value) {
                this.self.json.max.value = b(this.self.max.value).val(this.self.json.min.value).val() - 0
            }
            b(this.self).trigger("validationChange")
        },
        updateMinMessage: function () {
            if (!this.self.json.min) {
                this.self.json.min = {}
            }
            this.self.json.min.message = {
                def: b(this).val()
            };
            b(this.self).trigger("validationChange")
        },
        updateMaxValue: function () {
            if (!this.self.json.max) {
                this.self.json.max = {}
            }
            var d = b(this).val() - 0;
            if (b(this).attr("max") != null && this.max < d) {
                d = b(this).attr("max") - 0;
                b(this).val(d)
            }
            this.self.json.max.value = d;
            if (this.self.json.min && this.self.json.max.value != 0 && this.self.json.min.value > this.self.json.max.value) {
                this.self.json.min.value = b(this.self.min.value).val(this.self.json.max.value).val() - 0
            }
            b(this.self).trigger("validationChange")
        },
        updateMaxMessage: function (d) {
            if (!this.self.json.max) {
                this.self.json.max = {}
            }
            this.self.json.max.message = {
                def: b(this).val()
            };
            b(this.self).trigger("validationChange")
        },
        ensureNumericOnly: function (e) {
            var d = e.keyCode;
            return d == 0 || (d >= 48 && d <= 57) || (d >= 96 && d <= 105) || d == 8 || d == 9 || d == 37 || d == 39
        },
        toggleRequired: function (d) {
            if (!this.self.json.required) {
                this.self.json.required = {}
            }
            this.self.json.required.on = this.checked == true;
            if (this.self.callback != null) {
                this.self.callback()
            }
            b(this.self).trigger("validationChange")
        },
        setRequiredMessage: function () {
            if (!this.self.json.required) {
                this.self.json.required = {}
            }
            this.self.json.required.message = {
                def: b(this).val()
            };
            if (this.self.callback != null) {
                this.self.callback()
            }
            b(this.self).trigger("validationChange")
        }
    }
})(jQuery);
(function () {
    $.fn.surveySetup = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (e, b) {
            var c = $(this).addClass("survey-setup").prop("json", e).get(0);
            this.eventBus = b ? b : new $.ObjectPlanet.EventBus();
            var d = e && e.surveySetup && e.surveySetup.multipleResponses && e.surveySetup.multipleResponses.on == true;
            var f = e && e.surveySetup && e.surveySetup.sendEmail && e.surveySetup.sendEmail.on == true;
            $(this).html('<div class="allowMultiple op-control-box borderBox"><label class="hand"><input class="multiple hand" type="checkbox"' + (d ? ' checked="checked">' : ">") + 'Allow multiple responses from the same user</label></div><div class="sendEmail op-control-box borderBox"><label><input class="sendEmail" type="checkbox" disabled="disabled"' + (f ? ' checked="checked">' : ">") + "Send me an email for each response</label></div>");
            this.multiple = $(this).find("input.multiple").bind("change", function (g) {
                if (c.json == null) {
                    return
                }
                if ($(this).is(":checked")) {
                    if (c.json.surveySetup == null) {
                        c.json.surveySetup = {}
                    }
                    if (c.json.surveySetup.multipleResponses == null) {
                        c.json.surveySetup.multipleResponses = {}
                    }
                    c.json.surveySetup.multipleResponses.on = true
                } else {
                    if (c.json.surveySetup && c.json.surveySetup.multipleResponses != null) {
                        delete c.json.surveySetup.multipleResponses
                    }
                }
            }).get(0);
            this.sendEmail = $(this).find("input.sendEmail").bind("change", function (g) {
                var h = $.ObjectPlanet.premiumFeature({
                    feature: "responseEmail",
                    callback: function () {
                        if (c.json == null) {
                            return
                        }
                        if ($(c.sendEmail).is(":checked")) {
                            if (c.json.surveySetup == null) {
                                c.json.surveySetup = {}
                            }
                            if (c.json.surveySetup.sendEmail == null) {
                                c.json.surveySetup.sendEmail = {}
                            }
                            c.json.surveySetup.sendEmail.on = true
                        } else {
                            if (c.json.surveySetup && c.json.surveySetup.sendEmail != null) {
                                delete c.json.surveySetup.sendEmail
                            }
                        }
                    }
                });
                if (h != null) {
                    $(c.sendEmail).removeAttr("checked")
                }
            }).get(0);
            this.eventBus.listen("user.loggedIn", function (g) {
                $(c.sendEmail).removeAttr("disabled");
                $(c.sendEmail).add(c.sendEmail.parentNode).css("cursor", "pointer")
            }).listen("user.loggedOut", function () {
                $(c.sendEmail).attr("disabled", "disabled");
                $(c.sendEmail).css("cursor", "auto");
                $(c.sendEmail.parentNode).css("cursor", "default")
            })
        },
        reset: function (b) {
            this.json = b;
            if (b && b.surveySetup && b.surveySetup.multipleResponses && b.surveySetup.multipleResponses.on == true) {
                $(this.multiple).attr("checked", "checked")
            } else {
                $(this.multiple).removeAttr("checked")
            } if (b && b.surveySetup && b.surveySetup.sendEmail && b.surveySetup.sendEmail.on == true) {
                $(this.sendEmail).attr("checked", "checked")
            } else {
                $(this.sendEmail).removeAttr("checked")
            }
        }
    }
})(jQuery);
(function () {
    $.fn.themeEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d, b) {
            var c = $(this).addClass("theme-editor").prop("json", d).get(0);
            this.eventBus = b ? b : new $.ObjectPlanet.EventBus();
            this.tabs = $('<div class="tabs"><label class="active">Browser</label><label>Editor</label></div>').appendTo(this).get(0);
            this.browserTab = $(this.tabs).find("label:contains(Browser)").get(0);
            this.editorTab = $(this.tabs).find("label:contains(Editor)").get(0);
            this.helpButton = $('<span class="help-button">?</span>').helpButton().appendTo(this.tabs).bind("click", function () {
                if ($(c.browserTab).hasClass("active")) {
                    $.murveyHelp({
                        sections: ["theme-browser"]
                    })
                }
                if ($(c.editorTab).hasClass("active")) {
                    $.murveyHelp({
                        sections: ["theme-editor"]
                    })
                }
            }).get(0);
            this.browser = $('<table class="browser fullWidth" cellspacing="0" cellpadding="0"></table>').appendTo(this).get(0);
            this.editor = $('<table class="editor fullWidth" cellspacing="0" cellpadding="0"><caption class="nowrap">' + $.checkLabel({
                label: "Save as reusable theme"
            }) + '<input type="text" placeholder="theme name" class="borderBox" style="visibility: hidden;"><button style="visibility: hidden;">Save</button></caption><tr><td class="left top" style="width: 40%;"></td><td class="right top" style="width: 60%;"></td></tr></table>').hide().appendTo(this).get(0);
            this.left = $(this.editor).find("td:eq(0)").get(0);
            this.right = $(this.editor).find("td:eq(1)").get(0);
            this.survey = $('<div class="active"><label>Survey</label></div>').appendTo(this.left).get(0);
            this.heading = $("<div><label>Heading</label></div>").appendTo(this.left).get(0);
            this.intro = $("<div><label>Introduction</label></div>").appendTo(this.left).get(0);
            this.questionText = $("<div><label>Question text</label></div>").appendTo(this.left).get(0);
            this.response = $("<div><label>Response</label></div>").appendTo(this.left).get(0);
            this.thankYou = $("<div><label>Thank you note</label></div>").appendTo(this.left).get(0);
            this.input = $("<div><label>Input fields</label></div>").appendTo(this.left).get(0);
            this.submit = $("<div><label>Buttons</label></div>").appendTo(this.left).get(0);
            this.sectionHeading = $("<div><label>Section heading</label></div>").appendTo(this.left).get(0);
            this.sectionIntro = $("<div><label>Section introduction</label></div>").appendTo(this.left).get(0);
            this.page = $("<div><label>Background page</label></div>").appendTo(this.left).get(0);
            this.validation = $("<div><label>Validation</label></div>").appendTo(this.left).get(0);
            this.survey.css = $("<div></div>").themeEditorCSS({
                width: true,
                font: true,
                background: true,
                border: true,
                shadow: true,
                padding: true
            }).appendTo(this.right).get(0);
            this.heading.css = $("<div></div>").themeEditorCSS({
                font: true,
                padding: true
            }).hide().appendTo(this.right).get(0);
            this.intro.css = $("<div></div>").themeEditorCSS({
                font: true,
                padding: true
            }).hide().appendTo(this.right).get(0);
            this.questionText.css = $("<div></div>").themeEditorCSS({
                font: true,
                background: true,
                border: true,
                shadow: true,
                padding: true
            }).hide().appendTo(this.right).get(0);
            this.response.css = $("<div></div>").themeEditorCSS({
                font: true,
                background: true,
                border: true,
                padding: true
            }).hide().appendTo(this.right).get(0);
            this.thankYou.css = $("<div></div>").themeEditorCSS({
                font: true,
                padding: true
            }).hide().appendTo(this.right).get(0);
            this.input.css = $("<div></div>").themeEditorCSS({
                font: true,
                background: true,
                border: true,
                shadow: true,
                padding: true
            }).hide().appendTo(this.right).get(0);
            this.submit.css = $("<div></div>").themeEditorCSS({
                font: true,
                background: true,
                border: true,
                padding: true
            }).hide().appendTo(this.right).get(0);
            this.sectionHeading.css = $("<div></div>").themeEditorCSS({
                font: true,
                padding: true,
                border: true
            }).hide().appendTo(this.right).get(0);
            this.sectionIntro.css = $("<div></div>").themeEditorCSS({
                font: true,
                padding: true,
                border: true
            }).hide().appendTo(this.right).get(0);
            this.page.css = $("<div></div>").themeEditorCSS({
                background: true,
                padding: true
            }).hide().appendTo(this.right).get(0);
            this.validation.css = $("<div></div>").themeEditorCSS({
                font: true,
                background: true
            }).hide().appendTo(this.right).get(0);
            this.saveContainer = $(this.editor).find("caption").get(0);
            this.saveName = $(this.saveContainer).find("input").get(0);
            this.save = $(this.saveContainer).find("button").get(0);
            this.saveCheck = $(this.saveContainer).find(".op-check").checkLabel().bind("click", function (e) {
                $(c.saveName).add(c.save).css("visibility", this.checked == true ? "visible" : "hidden");
                if (this.checked == true) {
                    $(c.saveName).focus()
                }
            }).get(0);
            $(this.left).find("> div").bind("click", function (e) {
                $(c.right).find("> div").hide();
                $(c.left).find("div.active").removeClass("active");
                $(this).addClass("active");
                $(this.css).show().themeEditorCSS("adjust")
            });
            $(this.tabs).bind("click", function (e) {
                if ($(e.target).is("label") && e.target != c.tabs) {
                    a.show.apply(c, [$(e.target).text()])
                }
            });
            $(this.editor).bind("change", function (e) {
                if (e.target === c.survey.css.width && $(e.target).val() == "") {
                    $(e.target).val("650px")
                }
                if (e.target === c.survey.css.fontSize && $(e.target).val() == "") {
                    $(e.target).val("12px")
                }
                if (e.target === c.heading.css.fontSize && $(e.target).val() == "") {
                    $(e.target).val("2em")
                }
                if (e.target === c.heading.css.padding && $(e.target).val() == "") {
                    $(e.target).val("0px 0px 15px 0px")
                }
                if (e.target === c.intro.css.padding && $(e.target).val() == "") {
                    $(e.target).val("0px 0px 20px 0px")
                }
                if (e.target === c.input.css.fontName && $(e.target).val() == "") {
                    $(e.target).val("inherit")
                }
                if (e.target === c.input.css.fontSize && $(e.target).val() == "") {
                    $(e.target).val("inherit")
                }
                if (e.target === c.input.css.borderColor && $(e.target).val() == "") {
                    $(e.target).val("#aaa")
                }
                if (e.target === c.input.css.borderWidth && $(e.target).val() == "") {
                    $(e.target).val("1px")
                }
                if (e.target === c.input.css.padding && $(e.target).val() == "") {
                    $(e.target).val("2px")
                }
                if (e.target === c.sectionHeading.css.fontSize && $(e.target).val() == "") {
                    $(e.target).val("1.5em")
                }
                if (e.target === c.page.css.padding && $(e.target).val() == "") {
                    $(e.target).val("25px")
                }
                $(c.browser).find("input").removeAttr("checked");
                delete c.browser.name;
                delete c.browser.themeId;
                $("#surveyTheme").text(a.cssCode.apply(c));
                if (c.json && c.json.appearance != null) {
                    c.json.appearance.css = a.get.apply(c)
                }
            });
            $(this.browser).bind("mousemove", function (e) {
                if (e.target.nodeName == "LABEL" && e.target != c.browser.hovered) {
                    if ($.ObjectPlanet.testMode != true) {
                        setTimeout(function () {
                            $(c).themeEditor("set", e.target.css).themeEditor("apply")
                        }, 5)
                    } else {
                        $(c).themeEditor("set", e.target.css).themeEditor("apply")
                    }
                    c.browser.hovered = e.target
                }
                return false
            }).hover(function (e) {
                this.current = a.get.apply(c)
            }, function (e) {
                $(c).themeEditor("set", this.current).themeEditor("apply");
                delete this.hovered
            });
            $(this.browser).bind("click", function (f) {
                this.current = a.get.apply(c);
                var e = f.target.nodeName == "INPUT" ? f.target.parentNode : f.target;
                $(this).prop("name", $(e).text()).prop("themeId", e.themeId);
                if (f.target.nodeName == "INPUT") {
                    $(c.saveName).val("");
                    $(c.publicTheme).removeAttr("checked");
                    if ($(f.target.parentNode.parentNode.parentNode).attr("public") != "true") {
                        $(c.saveName).val($(f.target.parentNode).text())
                    }
                    if (c.publicTheme != null && $(f.target.parentNode.parentNode.parentNode).attr("public") == "true") {
                        $(c.publicTheme).attr("checked", "checked")
                    }
                }
            });
            this.eventBus.listen("survey.loaded", function (e) {
                if (e == null) {
                    return
                }
                $(c.editor).toggle(e.appearance == null || e.appearance.name == null);
                $(c.browser).toggle(e.appearance != null && e.appearance.name != null);
                $(c.editorTab).toggleClass("active", e.appearance == null || e.appearance.name == null);
                $(c.browserTab).toggleClass("active", e.appearance != null && e.appearance.name != null);
                $(c.browser).find("input").removeAttr("checked");
                $(c).themeEditor("set", e.appearance != null ? e.appearance.css : null).themeEditor("apply");
                if (e.appearance != null && e.appearance.name != null) {
                    $(c.browser).find('tr[name="' + e.appearance.name + '"] input').attr("checked", "checked")
                }
            }).listen("survey.new", function () {
                $(c.browser).show();
                $(c.editor).hide();
                $(c.browserTab).addClass("active");
                $(c.editorTab).removeClass("active")
            });
            $(this.save).bind("click", function (f) {
                if ($.trim($(c.saveName).val()) == "") {
                    $(c.saveName).trigger("focus")
                } else {
                    var g = {
                        name: $(c.saveName).val(),
                        css: a.get.apply(c)
                    };
                    $(c.browser).find("tr:contains(" + $(c.saveName).val() + ")").each(function () {
                        if ($(this).attr("public") != "true") {
                            g._id = {
                                $oid: $(this).attr("tid")
                            }
                        }
                    });
                    if ($(c.publicTheme).is(":checked")) {
                        g.isPublic = true;
                        if (g._id != null) {
                            var e = $(c.browser).find("tr[tid=" + g._id.$oid + "]").attr("user");
                            if (e != "admin") {
                                delete g._id
                            }
                        }
                    }
                    $.serverPost({
                        action: "theme.store",
                        data: JSON.stringify(g)
                    }, function (h) {
                        $(c.browser).find("tr input").attr("checked");
                        if (g._id != null) {
                            var i = a.get.apply(c);
                            var j = $(c.browser).find("tr[tid=" + h.data._id + "]");
                            j.find("input").attr("checked", "checked").end().find("label").prop("css", i);
                            j.find("td").attr("style", $.ObjectPlanet.css.getValues(i.survey, {
                                font: true,
                                background: true
                            }))
                        } else {
                            a.loadThemes.apply(c, [
                                function () {
                                    a.show.apply(c, ["browser"]);
                                    if (h.data != null) {
                                        $(c.browser).find("tr[tid=" + h.data._id + "] input").attr("checked", "checked")
                                    }
                                }
                            ])
                        }
                    })
                }
            });
            a.set.apply(this)
        },
        show: function (b) {
            b = b != null ? b.toLowerCase() : b;
            $(this.editor).toggle(b == "editor");
            $(this.browser).toggle(b == "browser");
            $(this.editorTab).toggleClass("active", b == "editor");
            $(this.browserTab).toggleClass("active", b == "browser");
            if ($.ObjectPlanet.session && $.ObjectPlanet.session.login == "admin" && this.publicTheme == null) {
                this.publicTheme = $('<label><input type="checkbox">public</label>').appendTo(this.saveContainer).find("input").get(0)
            }
        },
        loadThemes: function (d) {
            var c = this;
            var b = function (e) {
                if (e && e.data instanceof Array) {
                    for (var f = 0; f < e.data.length; f++) {
                        var g = e.data[f];
                        if (g && g.name == "Default" && g.isPublic == true) {
                            e.data.splice(f, 1);
                            e.data = [g].concat(e.data);
                            break
                        }
                    }
                    a.setThemes.apply(c, [e.data]);
                    if (d != null) {
                        d()
                    }
                }
            };
            if ($.ObjectPlanet.session && $.ObjectPlanet.session.login != null) {
                $.serverRequest({
                    get: {
                        collection: "themes",
                        sort: {
                            name: 1
                        },
                        limit: 0
                    }
                }, b)
            } else {
                $._serverRequest(b, null, {
                    data: {
                        query: JSON.stringify({
                            get: {
                                collection: "themes",
                                sort: {
                                    name: 1
                                },
                                limit: 0
                            }
                        })
                    }
                })
            }
        },
        setThemes: function (b) {
            this.themes = b;
            for (var d = 0, c = ""; b instanceof Array && d < b.length; d++) {
                c += '<tr name="' + b[d].name + '" tid="' + b[d]._id.$oid;
                c += '" public="' + (b[d].isPublic == true) + '"';
                if (b[d].user && b[d].user.login != null) {
                    c += ' user="' + b[d].user.login + '"'
                }
                if (b[d].css.survey && b[d].css.survey.color == null) {
                    b[d].css.survey.color = "black"
                }
                c += '><td style="' + $.ObjectPlanet.css.getValues(b[d].css.survey, {
                    font: true,
                    background: true,
                    color: true
                }) + '">';
                c += '<label class="borderBox"><input type="radio" name="theme">' + b[d].name + "</label></td></tr>"
            }
            $(this.browser).html(c);
            for (var d = 0; b instanceof Array && d < b.length; d++) {
                $(this.browser).find("label").eq(d).prop("css", b[d].css).prop("themeId", b[d]._id.$oid)
            }
        },
        reset: function () {
            a.set.apply(this);
            $(this.browser).find("input").removeAttr("checked");
            $(this.browser).find("tr[name=Default] input").attr("checked", "checked")
        },
        set: function (b) {
            $(this.survey.css.width).val(b && b.survey && b.survey.width != null ? b.survey.width : "650px");
            if (b == null) {
                $(this.survey.css.fontName).val("Arial")
            }
            if (b != null) {
                $(this.survey.css.fontName).val(b.survey && b.survey["font-family"] != null ? b.survey["font-family"] : "")
            }
            $(this.survey.css.fontSize).val(b && b.survey && b.survey["font-size"] != null ? b.survey["font-size"] : "12px");
            $(this.survey.css.fontWeight).val(b && b.survey && b.survey["font-weight"] != null ? b.survey["font-weight"] : "normal");
            $(this.survey.css.fontColor).val(b && b.survey && b.survey.color != null ? b.survey.color : "");
            $(this.survey.css.lineHeight).val(b && b.survey && b.survey["line-height"] != null ? b.survey["line-height"] : "");
            if (b == null) {
                $(this.survey.css.backgroundColor).val("#e1e8ea,#9dacad")
            }
            if (b != null) {
                $(this.survey.css.backgroundColor).val(b.survey && b.survey["background-color"] != null ? b.survey["background-color"] : "")
            }
            $(this.survey.css.borderColor).val(b && b.survey && b.survey["border-color"] != null ? b.survey["border-color"] : "");
            $(this.survey.css.borderWidth).val(b && b.survey && b.survey["border-width"] != null ? b.survey["border-width"] : "");
            if (b == null) {
                $(this.survey.css.borderRadius).val("8px")
            }
            if (b != null) {
                $(this.survey.css.borderRadius).val(b.survey && b.survey["border-radius"] != null ? b.survey["border-radius"] : "")
            }
            $(this.survey.css.borderStyle).val(b && b.survey && b.survey["border-style"] != null ? b.survey["border-style"] : "none");
            if (b == null) {
                $(this.survey.css.shadow).val("2px 2px 5px rgba(80,80,80,0.25)")
            }
            if (b != null) {
                $(this.survey.css.shadow).val(b.survey && b.survey.shadow != null ? b.survey.shadow : "")
            }
            if (b == null) {
                $(this.survey.css.padding).val("20px")
            }
            if (b != null) {
                $(this.survey.css.padding).val(b.survey && b.survey.padding != null ? b.survey.padding : "")
            }
            $(this.heading.css.fontName).val(b && b.heading && b.heading["font-family"] != null ? b.heading["font-family"] : "");
            $(this.heading.css.fontSize).val(b && b.heading && b.heading["font-size"] != null ? b.heading["font-size"] : "2em");
            $(this.heading.css.fontWeight).val(b && b.heading && b.heading["font-weight"] != null ? b.heading["font-weight"] : "bold");
            $(this.heading.css.fontColor).val(b && b.heading && b.heading.color != null ? b.heading.color : "");
            $(this.heading.css.lineHeight).val(b && b.heading && b.heading["line-height"] != null ? b.heading["line-height"] : "");
            $(this.heading.css.padding).val(b && b.heading && b.heading.padding != null ? b.heading.padding : "0px 0px 15px 0px");
            $(this.intro.css.fontName).val(b && b.introduction && b.introduction["font-family"] != null ? b.introduction["font-family"] : "");
            $(this.intro.css.fontSize).val(b && b.introduction && b.introduction["font-size"] != null ? b.introduction["font-size"] : "");
            $(this.intro.css.fontWeight).val(b && b.introduction && b.introduction["font-weight"] != null ? b.introduction["font-weight"] : "normal");
            $(this.intro.css.fontColor).val(b && b.introduction && b.introduction.color != null ? b.introduction.color : "");
            $(this.intro.css.lineHeight).val(b && b.introduction && b.introduction["line-height"] != null ? b.introduction["line-height"] : "");
            $(this.intro.css.padding).val(b && b.introduction && b.introduction.padding != null ? b.introduction.padding : "0px 0px 20px 0px");
            $(this.questionText.css.fontName).val(b && b["question-text"] && b["question-text"]["font-family"] != null ? b["question-text"]["font-family"] : "");
            $(this.questionText.css.fontSize).val(b && b["question-text"] && b["question-text"]["font-size"] != null ? b["question-text"]["font-size"] : "");
            $(this.questionText.css.fontWeight).val(b && b["question-text"] && b["question-text"]["font-weight"] != null ? b["question-text"]["font-weight"] : "");
            $(this.questionText.css.fontColor).val(b && b["question-text"] && b["question-text"]["color"] != null ? b["question-text"]["color"] : "");
            $(this.questionText.css.lineHeight).val(b && b["question-text"] && b["question-text"]["line-height"] != null ? b["question-text"]["line-height"] : "");
            if (b == null) {
                $(this.questionText.css.backgroundColor).val("#eee")
            }
            if (b != null) {
                $(this.questionText.css.backgroundColor).val(b["question-text"] && b["question-text"]["background-color"] != null ? b["question-text"]["background-color"] : "")
            }
            $(this.questionText.css.borderColor).val(b && b["question-text"] && b["question-text"]["border-color"] != null ? b["question-text"]["border-color"] : "");
            $(this.questionText.css.borderWidth).val(b && b["question-text"] && b["question-text"]["border-width"] != null ? b["question-text"]["border-width"] : "");
            if (b == null) {
                $(this.questionText.css.borderRadius).val("5px")
            }
            if (b != null) {
                $(this.questionText.css.borderRadius).val(b["question-text"] && b["question-text"]["border-radius"] != null ? b["question-text"]["border-radius"] : "")
            }
            $(this.questionText.css.borderStyle).val(b && b["question-text"] && b["question-text"]["border-style"] != null ? b["question-text"]["border-style"] : "none");
            if (b == null) {
                $(this.questionText.css.padding).val("6px")
            }
            if (b != null) {
                $(this.questionText.css.padding).val(b["question-text"] && b["question-text"].padding != null ? b["question-text"].padding : "")
            }
            $(this.questionText.css.shadow).val(b && b["question-text"] && b["question-text"].shadow != null ? b["question-text"].shadow : "");
            $(this.response.css.fontName).val(b && b.response && b.response["font-family"] != null ? b.response["font-family"] : "");
            $(this.response.css.fontSize).val(b && b.response && b.response["font-size"] != null ? b.response["font-size"] : "");
            $(this.response.css.fontWeight).val(b && b.response && b.response["font-weight"] != null ? b.response["font-weight"] : "");
            $(this.response.css.fontColor).val(b && b.response && b.response.color != null ? b.response.color : "");
            $(this.response.css.lineHeight).val(b && b.response && b.response["line-height"] != null ? b.response["line-height"] : "");
            $(this.response.css.backgroundColor).val(b && b.response && b.response["background-color"] != null ? b.response["background-color"] : "");
            $(this.response.css.borderColor).val(b && b.response && b.response["border-color"] != null ? b.response["border-color"] : "");
            $(this.response.css.borderWidth).val(b && b.response && b.response["border-width"] != null ? b.response["border-width"] : "");
            $(this.response.css.borderRadius).val(b && b.response && b.response["border-radius"] != null ? b.response["border-radius"] : "");
            $(this.response.css.borderStyle).val(b && b.response && b.response["border-style"] != null ? b.response["border-style"] : "none");
            $(this.response.css.padding).val(b && b.response && b.response.padding != null ? b.response.padding : "");
            $(this.thankYou.css.fontName).val(b && b.thankYou && b.thankYou["font-family"] != null ? b.thankYou["font-family"] : "");
            $(this.thankYou.css.fontSize).val(b && b.thankYou && b.thankYou["font-size"] != null ? b.thankYou["font-size"] : "");
            $(this.thankYou.css.fontWeight).val(b && b.thankYou && b.thankYou["font-weight"] != null ? b.thankYou["font-weight"] : "normal");
            $(this.thankYou.css.fontColor).val(b && b.thankYou && b.thankYou.color != null ? b.thankYou.color : "");
            $(this.thankYou.css.lineHeight).val(b && b.thankYou && b.thankYou["line-height"] != null ? b.thankYou["line-height"] : "");
            $(this.thankYou.css.padding).val(b && b.thankYou && b.thankYou.padding != null ? b.thankYou.padding : "");
            $(this.input.css.fontName).val(b && b.input && b.input["font-family"] != null ? b.input["font-family"] : "inherit");
            $(this.input.css.fontSize).val(b && b.input && b.input["font-size"] != null ? b.input["font-size"] : "inherit");
            $(this.input.css.fontWeight).val(b && b.input && b.input["font-weight"] != null ? b.input["font-weight"] : "normal");
            $(this.input.css.fontColor).val(b && b.input && b.input.color != null ? b.input.color : "");
            $(this.input.css.backgroundColor).val(b && b.input && b.input["background-color"] != null ? b.input["background-color"] : "");
            $(this.input.css.borderWidth).val(b && b.input && b.input["border-width"] != null ? b.input["border-width"] : "1px");
            $(this.input.css.borderStyle).val(b && b.input && b.input["border-style"] != null ? b.input["border-style"] : "solid");
            if (b == null) {
                $(this.input.css.borderRadius).val("3px")
            }
            if (b != null) {
                $(this.input.css.borderRadius).val(b.input && b.input["border-radius"] != null ? b.input["border-radius"] : "")
            }
            if (b == null) {
                $(this.input.css.borderColor).val("transparent")
            }
            if (b != null) {
                $(this.input.css.borderColor).val(b.input && b.input["border-color"] != null ? b.input["border-color"] : "#aaa")
            }
            $(this.input.css.shadow).val(b && b.input && b.input.shadow != null ? b.input.shadow : "");
            if (b == null) {
                $(this.input.css.padding).val("2px")
            }
            if (b != null) {
                $(this.input.css.padding).val(b.input && b.input.padding != null ? b.input.padding : "")
            }
            $(this.submit.css.fontName).val(b && b["submit-button"] && b["submit-button"]["font-family"] != null ? b["submit-button"]["font-family"] : "");
            $(this.submit.css.fontSize).val(b && b["submit-button"] && b["submit-button"]["font-size"] != null ? b["submit-button"]["font-size"] : "");
            $(this.submit.css.fontWeight).val(b && b["submit-button"] && b["submit-button"]["font-weight"] != null ? b["submit-button"]["font-weight"] : "normal");
            $(this.submit.css.fontColor).val(b && b["submit-button"] && b["submit-button"].color != null ? b["submit-button"].color : "");
            $(this.submit.css.backgroundColor).val(b && b["submit-button"] && b["submit-button"]["background-color"] != null ? b["submit-button"]["background-color"] : "");
            $(this.submit.css.borderWidth).val(b && b["submit-button"] && b["submit-button"]["border-width"] != null ? b["submit-button"]["border-width"] : "");
            $(this.submit.css.borderStyle).val(b && b["submit-button"] && b["submit-button"]["border-style"] != null ? b["submit-button"]["border-style"] : "");
            $(this.submit.css.borderRadius).val(b && b["submit-button"] && b["submit-button"]["border-radius"] != null ? b["submit-button"]["border-radius"] : "");
            $(this.submit.css.borderColor).val(b && b["submit-button"] && b["submit-button"]["border-color"] != null ? b["submit-button"]["border-color"] : "");
            $(this.submit.css.padding).val(b && b["submit-button"] && b["submit-button"].padding != null ? b["submit-button"].padding : "");
            $(this.sectionHeading.css.fontName).val(b && b["section-heading"] && b["section-heading"]["font-family"] != null ? b["section-heading"]["font-family"] : "");
            $(this.sectionHeading.css.fontSize).val(b && b["section-heading"] && b["section-heading"]["font-size"] != null ? b["section-heading"]["font-size"] : "1.5em");
            $(this.sectionHeading.css.fontWeight).val(b && b["section-heading"] && b["section-heading"]["font-weight"] != null ? b["section-heading"]["font-weight"] : "");
            $(this.sectionHeading.css.fontColor).val(b && b["section-heading"] && b["section-heading"]["color"] != null ? b["section-heading"]["color"] : "");
            $(this.sectionHeading.css.lineHeight).val(b && b["section-heading"] && b["section-heading"]["line-height"] != null ? b["section-heading"]["line-height"] : "");
            $(this.sectionHeading.css.borderColor).val(b && b["section-heading"] && b["section-heading"]["border-color"] != null ? b["section-heading"]["border-color"] : "");
            $(this.sectionHeading.css.borderWidth).val(b && b["section-heading"] && b["section-heading"]["border-width"] != null ? b["section-heading"]["border-width"] : "");
            $(this.sectionHeading.css.borderRadius).val(b && b["section-heading"] && b["section-heading"]["border-radius"] != null ? b["section-heading"]["border-radius"] : "");
            $(this.sectionHeading.css.borderStyle).val(b && b["section-heading"] && b["section-heading"]["border-style"] != null ? b["section-heading"]["border-style"] : "none");
            $(this.sectionHeading.css.padding).val(b && b["section-heading"] && b["section-heading"].padding != null ? b["section-heading"].padding : "");
            $(this.sectionIntro.css.fontName).val(b && b["section-intro"] && b["section-intro"]["font-family"] != null ? b["section-intro"]["font-family"] : "");
            $(this.sectionIntro.css.fontSize).val(b && b["section-intro"] && b["section-intro"]["font-size"] != null ? b["section-intro"]["font-size"] : "");
            $(this.sectionIntro.css.fontWeight).val(b && b["section-intro"] && b["section-intro"]["font-weight"] != null ? b["section-intro"]["font-weight"] : "");
            $(this.sectionIntro.css.fontColor).val(b && b["section-intro"] && b["section-intro"]["color"] != null ? b["section-intro"]["color"] : "");
            $(this.sectionIntro.css.lineHeight).val(b && b["section-intro"] && b["section-intro"]["line-height"] != null ? b["section-intro"]["line-height"] : "");
            $(this.sectionIntro.css.borderColor).val(b && b["section-intro"] && b["section-intro"]["border-color"] != null ? b["section-intro"]["border-color"] : "");
            $(this.sectionIntro.css.borderWidth).val(b && b["section-intro"] && b["section-intro"]["border-width"] != null ? b["section-intro"]["border-width"] : "");
            $(this.sectionIntro.css.borderRadius).val(b && b["section-intro"] && b["section-intro"]["border-radius"] != null ? b["section-intro"]["border-radius"] : "");
            $(this.sectionIntro.css.borderStyle).val(b && b["section-intro"] && b["section-intro"]["border-style"] != null ? b["section-intro"]["border-style"] : "none");
            $(this.sectionIntro.css.padding).val(b && b["section-intro"] && b["section-intro"].padding != null ? b["section-intro"].padding : "");
            $(this.page.css.backgroundColor).val(b && b.page && b.page["background-color"] != null ? b.page["background-color"] : "");
            $(this.page.css.padding).val(b && b.page && b.page.padding != null ? b.page.padding : "25px");
            $(this.validation.css.fontName).val(b && b.validation && b.validation["font-family"] != null ? b.validation["font-family"] : "");
            $(this.validation.css.fontSize).val(b && b.validation && b.validation["font-size"] != null ? b.validation["font-size"] : "");
            $(this.validation.css.fontWeight).val(b && b.validation && b.validation["font-weight"] != null ? b.validation["font-weight"] : "bold");
            $(this.validation.css.fontColor).val(b && b.validation && b.validation.color != null ? b.validation.color : "#933");
            $(this.validation.css.lineHeight).val(b && b.validation && b.validation["line-height"] != null ? b.validation["line-height"] : "");
            $(this.validation.css.backgroundColor).val(b && b.validation && b.validation["background-color"] != null ? b.validation["background-color"] : "rgba(153, 51, 51, 0.2)");
            if (this.json != null) {
                if (this.json.appearance == null) {
                    this.json.appearance = {}
                }
                if (this.json.appearance.css == null) {
                    this.json.appearance.css = {}
                }
                this.json.appearance.css = a.get.apply(this)
            }
        },
        apply: function () {
            $("#surveyTheme").text(a.cssCode.apply(this));
            this.eventBus.trigger("theme.applied", a.get.apply(this))
        },
        getCSSJson: function (c, b) {
            if (c == null) {
                return
            }
            if (c.fontName != null && $(c.fontName).val() != "") {
                b["font-family"] = $(c.fontName).val()
            }
            if (c.fontSize != null && $(c.fontSize).val() != "") {
                b["font-size"] = $(c.fontSize).val()
            }
            if (c.fontColor != null && $(c.fontColor).val() != "") {
                b.color = $(c.fontColor).val()
            }
            if (c.fontWeight != null) {
                b["font-weight"] = $(c.fontWeight).val()
            }
            if (c.lineHeight != null && $(c.lineHeight).val() != "") {
                b["line-height"] = $(c.lineHeight).val()
            }
            if (c.width != null && $(c.width).val() != "") {
                b.width = $(c.width).val()
            }
            if (c.backgroundColor != null && $(c.backgroundColor).val() != "") {
                b["background-color"] = $(c.backgroundColor).val()
            }
            if (c.borderColor != null && $(c.borderColor).val() != "") {
                b["border-color"] = $(c.borderColor).val()
            }
            if (c.borderWidth != null && $(c.borderWidth).val() != "") {
                b["border-width"] = $(c.borderWidth).val()
            }
            if (c.borderRadius != null && $(c.borderRadius).val() != "") {
                b["border-radius"] = $(c.borderRadius).val()
            }
            if (c.borderStyle != null && $(c.borderStyle).val() != "none") {
                b["border-style"] = $(c.borderStyle).val()
            }
            if (c.shadow != null && $(c.shadow).val() != "") {
                b.shadow = $(c.shadow).val()
            }
            if (c.padding != null && $(c.padding).val() != "") {
                b.padding = $(c.padding).val()
            }
        },
        get: function () {
            var b = {
                survey: {
                    color: "black"
                },
                heading: {},
                introduction: {},
                "question-text": {},
                response: {},
                thankYou: {},
                input: {},
                "submit-button": {},
                "section-heading": {},
                "section-intro": {},
                page: {},
                validation: {}
            };
            a.getCSSJson(this.survey.css, b.survey);
            a.getCSSJson(this.heading.css, b.heading);
            a.getCSSJson(this.intro.css, b.introduction);
            a.getCSSJson(this.questionText.css, b["question-text"]);
            a.getCSSJson(this.response.css, b.response);
            a.getCSSJson(this.thankYou.css, b.thankYou);
            a.getCSSJson(this.input.css, b.input);
            a.getCSSJson(this.submit.css, b["submit-button"]);
            a.getCSSJson(this.sectionHeading.css, b["section-heading"]);
            a.getCSSJson(this.sectionIntro.css, b["section-intro"]);
            a.getCSSJson(this.page.css, b.page);
            a.getCSSJson(this.validation.css, b.validation);
            return b
        },
        cssCode: function () {
            return $.ObjectPlanet.css.get(a.get.apply(this))
        }
    }
})(jQuery);
(function () {
    $.fn.themeEditorCSS = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            var b = $(this).addClass("theme-editor-css").get(0);
            if (c == null || c.width == true) {
                this.width = $('<div class="option width"><label>Survey width:</label><input type="text"></div>').appendTo(this).find("input").get(0)
            }
            if (c == null || c.font == true) {
                $(this).append('<div class="option font-name"><label>Font name:</label><input type="text"></div><div class="option font-size"><label>Font size:</label><input type="text"></div><div class="option font-weight"><label>Font weight:</label><select><option value="normal">Normal</option><option value="bold">Bold</option><option value="bolder">Bolder</option><option value="lighter">Lighter</option></select></div><div class="option font-color"><label>Font color:</label><input type="text"></div><div class="option line-height"><label>Line height:</label><input type="text"></div>');
                this.fontName = $(this).find(".font-name input").get(0);
                this.fontSize = $(this).find(".font-size input").get(0);
                this.fontWeight = $(this).find(".font-weight select").get(0);
                this.fontColor = $(this).find(".font-color input").get(0);
                this.lineHeight = $(this).find(".line-height input").get(0)
            }
            if (c == null || c.background == true) {
                this.backgroundColor = $('<div class="option background-color"><label>Background color:</label><input type="text"></div>').appendTo(this).find("input").get(0)
            }
            if (c == null || c.border == true) {
                $(this).append('<div class="option border-color"><label>Border color:</label><input type="text"></div><div class="option border-width"><label>Border width:</label><input type="text"></div><div class="option border-radius"><label>Border radius:</label><input type="text"></div><div class="option border-style"><label>Border style:</label><select><option value="none">None</option><option value="solid">Solid</option><option value="dotted">Dotted</option><option value="dashed">Dashed</option><option value="double">Double</option></select></div>');
                this.borderColor = $(this).find(".border-color input").get(0);
                this.borderWidth = $(this).find(".border-width input").get(0);
                this.borderRadius = $(this).find(".border-radius input").get(0);
                this.borderStyle = $(this).find(".border-style select").get(0)
            }
            if (c == null || c.shadow == true) {
                this.shadow = $('<div class="option shadow"><label>Shadow:</label><input type="text"></div>').appendTo(this).find("input").get(0);
                $(this.shadow).bind("keyup", function (d) {
                    $(this.picker).shadow("set", $(this).val())
                })
            }
            if (c == null || c.padding == true) {
                this.padding = $('<div class="option padding"><label>Padding:</label><input type="text"></div>').appendTo(this).find("input").get(0)
            }
            if (this.fontName != null) {
                this.fontPicker = $("<div></div>").fontPicker().hide().appendTo($(this.fontName).parent()).bind("mousedown", function (d) {
                    $(b.fontName).val($(d.target).text()).trigger("change")
                }).get(0);
                $(this.fontName).bind("click", function () {
                    $(b.fontPicker).show()
                }).bind("blur", function () {
                    $(b.fontPicker).hide()
                });
                this.fontColor.picker = $("<table></table>").colorPicker().hide().appendTo(this.fontColor.parentNode).get(0);
                $(this.fontColor).bind("click", function () {
                    $(b.fontColor.picker).colorPicker("setColor", $(this).val()).show()
                }).bind("blur", function () {
                    $(b.fontColor.picker).hide()
                });
                $(this.fontColor.picker).bind("change", function (d) {
                    $(b.fontColor).val(d.colorOne)
                })
            }
            if (this.backgroundColor != null) {
                this.backgroundColor.picker = $("<table></table>").colorPicker({
                    count: 2
                }).hide().appendTo(this.backgroundColor.parentNode).get(0);
                $(this.backgroundColor).bind("click", function () {
                    $(b.backgroundColor.picker).colorPicker("setColor", $(this).val()).show()
                }).bind("blur", function () {
                    $(b.backgroundColor.picker).hide()
                });
                $(this.backgroundColor.picker).bind("change", function (d) {
                    var g = $(b.backgroundColor).val();
                    if (g.indexOf("rgb") == 0) {
                        $(b.backgroundColor).val(d.colorOne)
                    } else {
                        var f = g.indexOf(",") > 0 ? g.substring(0, g.indexOf(",")) : g;
                        var e = g.indexOf(",") > 0 ? g.substring(g.indexOf(",") + 1) : null;
                        if (d.colorOne != null) {
                            $(b.backgroundColor).val(e != null ? d.colorOne + "," + e : d.colorOne)
                        }
                        if (d.colorTwo != null) {
                            $(b.backgroundColor).val(f + "," + d.colorTwo)
                        }
                    }
                })
            }
            if (this.borderColor != null) {
                this.borderColor.picker = $("<table></table>").colorPicker().hide().appendTo(this.borderColor.parentNode).get(0);
                $(this.borderColor).bind("click", function () {
                    $(b.borderColor.picker).colorPicker("setColor", $(this).val()).show()
                }).bind("blur", function () {
                    $(b.borderColor.picker).hide()
                });
                $(this.borderColor.picker).bind("change", function (d) {
                    $(b.borderColor).val(d.colorOne)
                })
            }
            if (this.borderWidth != null) {
                this.borderWidth.picker = $("<table></table>").pixelPicker().hide().appendTo($(this.borderWidth).parent()).bind("mousedown", function (d) {
                    $(b.borderWidth).val($(d.target).attr("pixels") + "px").trigger("change")
                }).get(0);
                $(this.borderWidth).bind("click", function () {
                    $(b.borderWidth.picker).show()
                }).bind("blur", function () {
                    $(b.borderWidth.picker).hide()
                })
            }
            if (this.borderRadius != null) {
                this.borderRadius.picker = $("<table></table>").radiusPicker().hide().appendTo($(this.borderRadius).parent()).bind("mousedown", function (d) {
                    $(b.borderRadius).val($(d.target).attr("radius") + "px").trigger("change")
                }).get(0);
                $(this.borderRadius).bind("click", function () {
                    $(b.borderRadius.picker).show()
                }).bind("blur", function () {
                    $(b.borderRadius.picker).hide()
                })
            }
            if (this.shadow != null) {
                this.shadow.picker = $("<table></table>").shadow().hide().appendTo(this.shadow.parentNode).get(0);
                $(this.shadow).bind("click", function () {
                    $(b.shadow.picker).show().shadow("adjust")
                }).bind("blur", function (d) {
                    $(b.shadow.picker).hide()
                });
                $(this.shadow.picker).bind("change", function (d) {
                    $(b.shadow).val($(this).shadow("get"))
                }).bind("mousedown", function (d) {
                    return false
                })
            }
        }
    }
})(jQuery);
(function () {
    $.fn.fontPicker = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            $(this).addClass("font-picker picker borderBox");
            var b = "";
            b += a.font("Arial");
            b += a.font("Verdana");
            b += a.font("Tahoma");
            b += a.font("Times", "Times New Roman");
            b += a.font("Trebuchet MS");
            b += a.font("Courier");
            b += a.font("Comic Sans MS");
            b += a.font("Lucida Console");
            b += a.font("Lucida Sans Unicode");
            b += a.font("Impact");
            b += a.font("Century Gothic");
            b += a.font("Arial Narrow");
            b += a.font("Copperplate");
            $(this).html(b)
        },
        font: function (c, b) {
            return '<div style="font-family: ' + (b != null ? b : c) + ';">' + c + "</div>"
        }
    }
})(jQuery);
(function () {
    $.fn.pixelPicker = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d) {
            var c = $(this).addClass("pixel-picker picker").attr("cellspacing", "0").get(0);
            var b = "";
            b += a.pixels(0);
            b += a.pixels(1);
            b += a.pixels(2);
            b += a.pixels(3);
            b += a.pixels(4);
            b += a.pixels(5);
            $(this).html(b);
            $(this).find("td").hover(function (e) {
                $(c).find("td[pixels=" + $(e.target).attr("pixels") + "]").addClass("hover")
            }, function (e) {
                $(c).find("td").removeClass("hover")
            })
        },
        pixels: function (c) {
            var b = '<tr><td class="label" pixels="' + c + '">' + c + "px</td>";
            b += '<td pixels="' + c + '" class="line" style="border-bottom: ' + c + 'px solid #222;"></td>';
            c = c + 6;
            b += '<td class="label" pixels="' + c + '">' + c + "px</td>";
            return b + '<td pixels="' + c + '" class="line" style="border-bottom: ' + c + 'px solid #222;"></td></tr>'
        }
    }
})(jQuery);
(function () {
    $.fn.radiusPicker = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d) {
            var c = $(this).addClass("radius-picker picker").attr("cellspacing", "0").get(0);
            var b = "";
            b += a.radius(0);
            b += a.radius(1);
            b += a.radius(2);
            b += a.radius(3);
            b += a.radius(4);
            b += a.radius(5);
            $(this).html(b);
            $(this).find("td").hover(function (e) {
                $(c).find("td[radius=" + $(e.target).attr("radius") + "]").addClass("hover")
            }, function (e) {
                $(c).find("td").removeClass("hover")
            })
        },
        radius: function (b) {
            var c = "<tr>";
            c += a.td(b);
            c += a.td(b + 6);
            return c + "</tr>"
        },
        td: function (b) {
            var c = '<td class="label" radius="' + b + '">' + b + "px</td>";
            c += '<td class="radius" radius="' + b + '"><span radius="' + b + '" style="border-radius: ' + b + 'px;"></span></td>';
            return c
        }
    }
})(jQuery);
(function () {
    $.fn.colorPicker = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            var b = $(this).addClass("color-picker picker").html("<tr><td></td><td></td></tr>").get(0);
            this.one = $.farbtastic($(this).find("td:eq(0)"), function (d) {
                $(b).trigger({
                    type: "change",
                    colorOne: d
                })
            });
            if (c != null && c.count > 1) {
                this.two = $.farbtastic($(this).find("td:eq(1)"), function (d) {
                    $(b).trigger({
                        type: "change",
                        colorTwo: d
                    })
                })
            }
        },
        setColor: function (b) {
            if (b != null && b.indexOf("rgb") == 0) {
                $(this).find("td:eq(1)").hide()
            } else {
                var d = b != null && b.indexOf(",") > 0 ? b.substring(0, b.indexOf(",")) : b;
                var c = b != null && b.indexOf(",") > 0 ? b.substring(b.indexOf(",") + 1) : null;
                this.one.setColor(a.colorCode(d));
                if (c != null && this.two != null) {
                    $(this).find("td:eq(1)").show();
                    this.two.setColor(a.colorCode(c))
                }
            }
        },
        colorCode: function (b) {
            return $.ObjectPlanet.color.nameToHex(b)
        }
    }
})(jQuery);
(function () {
    $.fn.shadow = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            var b = $(this).addClass("shadow-editor borderBox picker").html('<tr><td class="label">Size:</td><td class="fullWidth"><div class="size"></div></td><td rowspan="6" class="picker"></td></tr><tr><td class="label">Horizontal:</td><td class="fullWidth"><div class="horizontal"></div></td></tr><tr><td class="label">Vertical:</td><td class="fullWidth"><div class="vertical"></div></td></tr><tr><td class="label">Blur:</td><td class="fullWidth"><div class="blur"></div></td></tr><tr><td class="label">Transparency:</td><td class="fullWidth"><div class="transparency"></div></td></tr><tr><td class="label inside">Inside:</td><td class="inside left"><input class="inside" type="checkbox"></td></tr>').get(0);
            this.size = $(this).find(".size").addClass("fullWidth").rangeSlider({
                current: 0,
                max: 25
            }).get(0);
            this.horizontal = $(this).find(".horizontal").addClass("fullWidth").rangeSlider({
                current: 27,
                max: 50
            }).get(0);
            this.vertical = $(this).find(".vertical").addClass("fullWidth").rangeSlider({
                current: 27,
                max: 50
            }).get(0);
            this.blur = $(this).find(".blur").addClass("fullWidth").rangeSlider({
                current: 5,
                max: 50
            }).get(0);
            this.transparency = $(this).find(".transparency").addClass("fullWidth").rangeSlider({
                current: 75
            }).get(0);
            this.inside = $(this).find("input.inside").get(0);
            this.colorPicker = $.farbtastic($(this).find(".picker"), function (d) {
                $(b).trigger("change")
            });
            this.colorPicker.setColor("#505050")
        },
        adjust: function () {
            $(this).find(".range-slider").rangeSlider("adjust")
        },
        set: function (e) {
            if (e == null || $.trim(e) == "") {
                return
            }
            try {
                e = $.trim(e);
                $(this.inside).removeAttr("checked");
                if (e.indexOf("inset ") == 0) {
                    $(this.inside).attr("checked", "checked");
                    e = e.substring("inside".length)
                }
                if (e.indexOf(" rgba(") > 0 && e.charAt(e.length - 1) == ")") {
                    var c = e.substring(e.indexOf("rgba(") + "rgba(".length);
                    c = c.substring(0, c.length - 1);
                    e = e.substring(0, e.indexOf(" rgba("));
                    var b = c.split(",");
                    this.colorPicker.setColor("#" + a.hex(b[0]) + a.hex(b[1]) + a.hex(b[2]));
                    if (b.length == 4) {
                        $(this.transparency).rangeSlider("set", 100 - b[3] * 100)
                    }
                }
                var b = e.split(" ");
                $(this.horizontal).rangeSlider("set", $.ObjectPlanet.unitLess(b[0]) + 25);
                $(this.vertical).rangeSlider("set", $.ObjectPlanet.unitLess(b[1]) + 25);
                $(this.blur).rangeSlider("set", $.ObjectPlanet.unitLess(b[2]));
                if (b.length == 4) {
                    $(this.size).rangeSlider("set", $.ObjectPlanet.unitLess(b[3]))
                }
            } catch (d) {}
        },
        get: function () {
            var b = $(this.inside).is(":checked") ? "inset " : "";
            b += ($(this.horizontal).rangeSlider("get") - this.horizontal.max / 2) + "px ";
            b += ($(this.vertical).rangeSlider("get") - this.vertical.max / 2) + "px ";
            b += $(this.blur).rangeSlider("get") + "px ";
            b += $(this.size).rangeSlider("get") + "px ";
            b += "rgba(" + $.ObjectPlanet.color.hexToRgbStr(this.colorPicker.color);
            b += "," + (100 - $(this.transparency).rangeSlider("get")) / 100 + ")";
            return b
        },
        hex: function (b) {
            return parseInt(b) < 16 ? ("0" + parseInt(b).toString(16)) : parseInt(b).toString(16)
        }
    }
})(jQuery);
(function () {
    $.fn.rangeSlider = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d) {
            var c = $(this).addClass("range-slider borderBox").get(0);
            this.max = d != null && d.max != null ? Math.max(0, d.max) : 100;
            this.current = d != null && d.current != null ? Math.min(this.max, Math.max(0, d.current)) : 0;
            var b = '<div class="range">';
            b += '<div class="slider"><span class="arrow"></span>';
            b += '<label class="label borderBox"></label>';
            b += "</div></div>";
            $(this).html(b);
            this.range = $(this).find(".range").get(0);
            this.slider = $(this).find(".slider").get(0);
            this.arrow = $(this.slider).find(".arrow").get(0);
            this.small = $(this.slider).find(".arrowSmall").get(0);
            this.label = $(this.slider).find(".label").hide().get(0);
            $(this).bind("mousedown", function (e) {
                $(c).prop("dragging", true).rangeSlider("moving", e, c);
                $(document).bind("mousemove.slider", function (f) {
                    a.moving.apply(c, [f, c])
                }).bind("mouseup", function (f) {
                    $(document).unbind("mousemove.slider")
                })
            }).bind("mouseup", function (e) {
                $(c).prop("dragging", false).trigger({
                    type: "change",
                    value: a.get.apply(c),
                    dragging: false
                })
            }).bind("mouseenter", function (e) {
                if (e.which == 0) {
                    c.dragging = false
                }
            });
            a.set.apply(this, [this.current])
        },
        moving: function (e, d) {
            if (e.target == this.label) {
                return
            }
            var g = $.ObjectPlanet.unitLess($(d).css("padding-left"));
            var c = $.ObjectPlanet.unitLess($(this).css("border-width"));
            var b = e.clientX - $(d).offset().left - g + c;
            $(this.slider).css("left", Math.min(Math.max(-5, b - 5), $(this.range).width() - 5) + "px");
            var f = a.get.apply(this);
            if (f != this.current) {
                $(this).prop("current", f).trigger({
                    type: "change",
                    value: f,
                    dragging: this.dragging
                })
            }
        },
        set: function (b) {
            $(this).prop("current", Math.min(this.max, Math.max(0, b))).rangeSlider("adjust")
        },
        get: function () {
            return Math.round(($(this.slider).position().left + 5) / ($(this.range).width()) * this.max)
        },
        adjust: function () {
            $(this.slider).css("left", ($(this.range).width() * (this.current / this.max) - 5) + "px")
        },
        toggleLabel: function (b) {
            $(this.label).toggle(b == true).css("left", Math.floor(-$(this.label).width() / 2) + "px")
        },
        setLabel: function (b) {
            $(this.label).text(b).css("left", Math.floor(-$(this.label).width() / 2) + "px")
        }
    }
})(jQuery);
(function (b) {
    b.fn.typeIcon = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            b(this).prop("options", c).addClass("type-icon hand").typeIcon("paint")
        },
        paint: function () {
            this.width = b(this).width();
            this.height = b(this).height();
            var c = this.getContext("2d");
            c.fillStyle = c.strokeStyle = "white";
            c.beginPath();
            if (this.options && this.options.type == "choice") {
                a.paintChoice.apply(this, [c])
            } else {
                if (this.options && this.options.type == "rating") {
                    a.paintRating.apply(this, [c])
                } else {
                    if (this.options && this.options.type == "dropdown") {
                        a.paintDropdown.apply(this, [c])
                    } else {
                        if (this.options && this.options.type == "fields") {
                            a.paintFields.apply(this, [c])
                        } else {
                            if (this.options && this.options.type == "comment") {
                                a.paintComment.apply(this, [c])
                            }
                        }
                    }
                }
            }
        },
        paintChoice: function (d) {
            var c = this.width / 4 / 2;
            d.arc(this.width * 0.2, this.height * 0.2, c, 0, 2 * Math.PI);
            d.arc(this.width * 0.2, this.height * 0.5, c, 0, 2 * Math.PI);
            d.arc(this.width * 0.2, this.height * 0.8, c, 0, 2 * Math.PI);
            d.fill();
            d.lineWidth = c;
            d.lineCap = "round";
            d.beginPath();
            d.moveTo(this.width * 0.5, this.height * 0.2);
            d.lineTo(this.width * 0.9, this.height * 0.2);
            d.moveTo(this.width * 0.5, this.height * 0.5);
            d.lineTo(this.width * 0.9, this.height * 0.5);
            d.moveTo(this.width * 0.5, this.height * 0.8);
            d.lineTo(this.width * 0.9, this.height * 0.8);
            d.stroke()
        },
        paintRating: function (d) {
            var c = this.width / 4 / 2;
            d.arc(this.width * 0.16, this.height * 0.5, c, 0, 2 * Math.PI);
            d.arc(this.width * 0.5, this.height * 0.5, c, 0, 2 * Math.PI);
            d.arc(this.width * 0.84, this.height * 0.5, c, 0, 2 * Math.PI);
            d.fill()
        },
        paintDropdown: function (c) {
            c.lineCap = "round";
            c.lineWidth = this.height / 5;
            c.moveTo(this.width * 0.15, this.height * 0.15);
            c.lineTo(this.width * 0.85, this.height * 0.15);
            c.moveTo(this.width * 0.15, this.height * 0.2);
            c.lineTo(this.width * 0.85, this.height * 0.2);
            c.moveTo(this.width * 0.15, this.height * 0.25);
            c.lineTo(this.width * 0.85, this.height * 0.25);
            c.stroke();
            c.fillStyle = b(this).css("background-color");
            c.fillStyle = b.ObjectPlanet.color.adjustLightness(c.fillStyle, -0.1);
            c.moveTo(this.width * 0.76, this.height * 0.2 + this.height / 8);
            c.lineTo(this.width * 0.64, this.height * 0.2 - this.height / 12);
            c.lineTo(this.width * 0.88, this.height * 0.2 - this.height / 12);
            c.lineTo(this.width * 0.76, this.height * 0.2 + this.height / 8);
            c.fill();
            c.fillStyle = "white";
            c.fillRect(this.width * 0.04, this.height * 0.4, this.width * 0.92, this.height * 0.5)
        },
        paintFields: function (c) {
            c.lineWidth = this.height / 8;
            c.lineCap = "round";
            c.moveTo(this.width * 0.1, this.height * 0.25);
            c.lineTo(this.width * 0.9, this.height * 0.25);
            c.moveTo(this.width * 0.1, this.height * 0.5);
            c.lineTo(this.width * 0.9, this.height * 0.5);
            c.moveTo(this.width * 0.1, this.height * 0.75);
            c.lineTo(this.width * 0.9, this.height * 0.75);
            c.stroke()
        },
        paintComment: function (c) {
            c.fillStyle = c.strokeStyle = "white";
            c.lineJoin = "round";
            c.lineWidth = Math.min(this.width, this.height) / 5;
            c.fillRect(this.width * 0.1, this.height * 0.1, this.width * 0.8, this.height * 0.8);
            c.moveTo(this.width * 0.15, this.height * 0.15);
            c.lineTo(this.width * 0.85, this.height * 0.15);
            c.lineTo(this.width * 0.85, this.height * 0.85);
            c.lineTo(this.width * 0.15, this.height * 0.85);
            c.lineTo(this.width * 0.15, this.height * 0.15);
            c.lineTo(this.width * 0.85, this.height * 0.15);
            c.stroke();
            c.beginPath();
            var d = 0.1;
            c.fillStyle = "#444";
            c.font = Math.min(this.width, this.height) / 3 + "px Arial";
            c.fillText(".......", this.width * d * 1.5, this.height * d * 2.5);
            c.fillText(".....", this.width * d * 1.5, this.height * d * 2.5 + Math.min(this.width, this.height) / 4);
            c.fillText("..", this.width * d * 1.5, this.height * d * 2.5 + Math.min(this.width, this.height) / 4 * 2);
            c.fillStyle = b(this).css("background-color");
            c.fillStyle = b.ObjectPlanet.color.adjustLightness(c.fillStyle, -0.1);
            c.moveTo(this.width * 0.9, this.height * 0.8 - this.height * 0.1);
            c.lineTo(this.width * 0.9, this.height * 0.8 + this.height * 0.1);
            c.lineTo(this.width * 0.7, this.height * 0.8 + this.height * 0.1);
            c.lineTo(this.width * 0.9, this.height * 0.8 - this.height * 0.1);
            c.fill()
        }
    }
})(jQuery);
(function (b) {
    b.fn.plusIcon = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function () {
            this.width = b(this).width();
            this.height = b(this).height();
            var c = this.getContext("2d");
            c.strokeStyle = "#222";
            c.lineWidth = 1;
            c.lineCap = "round";
            c.moveTo(3, this.height / 2 + 1);
            c.lineTo(this.width - 3, this.height / 2 + 1);
            c.moveTo(this.width / 2, 4);
            c.lineTo(this.width / 2, this.height - 2);
            c.stroke()
        }
    }
})(jQuery);
(function (b) {
    b.checkLabel = function (d) {
        var c = '<div class="op-check noSelect hand"';
        if (d && d.attr != null) {
            c += d.attr
        }
        c += '><span><canvas style="width: 12px; height: 12px;"></canvas></span>';
        if (d != null && d.label != null) {
            c += d.label
        }
        return c + "</div>"
    };
    b.fn.checkLabel = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            this.span = b(this).find("span").get(0);
            this.check = b(this.span).find("canvas").get(0);
            this.checked = c != null && c.checked == true;
            a.paint.apply(this);
            b(this).prop("enabled", true).bind("click keydown", function (d) {
                if (d.type == "click" || (d.type == "keydown" && (d.keyCode == b.ObjectPlanet.KEY.ENTER || d.keyCode == b.ObjectPlanet.KEY.SPACE))) {
                    a.toggle.apply(this)
                }
                if (d.keyCode == b.ObjectPlanet.KEY.SPACE) {
                    return false
                }
            })
        },
        setEnabled: function (c) {
            b(this).prop("enabled", c == true).checkLabel("paint");
            if (c == true) {
                b(this).css("cursor", "pointer")
            }
            if (c != true) {
                b(this).css("cursor", "default")
            }
        },
        toggle: function (c, d) {
            if (this.enabled != true) {
                return
            }
            if (c == true || c == false) {
                this.checked = c
            }
            if (c == undefined) {
                this.checked = this.checked != true
            }
            b(this).checkLabel("paint");
            if (d == undefined || d == true) {
                b(this).trigger("change")
            }
        },
        paint: function () {
            b(this.span).css("height", b(this.span).css("width"));
            this.check.width = this.check.height = Math.max(12, b(this.span).width());
            if (this.checked == true) {
                var c = this.check.getContext("2d");
                var d = c.createLinearGradient(0, 0, 0, this.check.height);
                d.addColorStop(0, "#222");
                d.addColorStop(1, "#888");
                c.strokeStyle = d;
                c.lineWidth = 2;
                c.moveTo(3, 4);
                c.lineTo(this.check.width / 2 - 1, this.check.height - 3);
                c.lineTo(this.check.width - 2, 2);
                c.stroke()
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.previewModule = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            var d = b(this).addClass("preview-module op-app-module noSelect").get(0);
            this.eventBus = c ? c : new b.ObjectPlanet.EventBus();
            this.form = b(b.webSurvey()).webSurvey("init", null, {
                preventResponse: true,
                previewMode: true
            }).bind("survey.submit", function (e) {
                b(d.reset).show()
            }).addClass("op-web-theme-survey op-web-theme-survey-background op-web-theme-survey-border").css({
                width: "100%",
                position: "relative"
            }).get(0);
            this.reset = b("<label>(show the form)</label>").hide().bind("click", function (e) {
                a.scroll.apply(d, [{
                    heading: true
                }])
            }).addClass("reset-label").get(0);
            this.overview = b("<div></div>").surveyOverview(c).get(0);
            this.webContainer = b('<div class="op-web-theme-page borderBox"></div>').append(this.form).append(this.reset).get(0);
            b(this).module({
                title: "Preview",
                menu: ["Preview", "Overview"],
                content: [this.webContainer, this.overview],
                eventBus: this.eventBus,
                collapse: true
            });
            b(this).find(".button").bind("click", function (e) {
                b(d.moduleTitle).text(b(e.target).text());
                if (b(e.target).text() == "Preview") {
                    b(d.form).webSurvey("adjustSectionTable").webSurvey("adjust")
                }
            });
            this.eventBus.listen("survey.loaded", function (e) {
                d.json = e;
                d.contentContainer.scrollTop = 0;
                b(d.reset).hide();
                b(d.webContainer).css("min-height", b(d.contentContainer).height() + "px")
            }).listen("survey.new user.loggedOut", function (e) {
                if (e != null) {
                    d.json = e
                }
            }).listen("survey.saved", function (e) {
                d.json = e;
                if (b(d.form.submit).is(":visible")) {
                    b(d.reset).hide()
                }
            });
            b(window).bind("resize", function (e) {
                b(d.webContainer).css("min-height", b(d.contentContainer).height() + "px")
            });
            this.eventBus.listen("module.adjusted", function (e) {
                if (e == "Preview") {
                    b(d.webContainer).css("min-height", b(d.contentContainer).height() + "px")
                }
            });
            this.eventBus.listen("survey.focus", function (e) {
                a.scroll.apply(d, [e]);
                b(d.overview).surveyOverview("setActive", e)
            })
        },
        setJSON: function (c) {
            this.json = c;
            b(this.reset).hide();
            b(this.form).webSurvey("reset", c, {
                preventResponse: true
            })
        },
        scroll: function (e) {
            if (b(this).module("getSelected") != 0) {
                return
            }
            var g = b.ObjectPlanet.SPEED / 2;
            var d = b.ObjectPlanet.SPEED * 4;
            var c = this;
            b(this.form.questions).add(this.form.submit).toggle(e == null || e.thankyou != true);
            b(this.form.introduction).toggle((e == null || e.thankyou != true) && b(this.form.introduction).text() != "");
            b(this.reset).hide();
            var f = this.form.json.sections && this.form.json.sections.section && this.form.json.sections.section.length > 0;
            if (f && e != null && e.section != null && e.section >= 0 && e.section < this.form.sections.length) {
                b(this.form).webSurvey("showSection", {
                    section: e.section
                })
            } else {
                if (e != null && e.question != null && e.question > 0 && this.form.questions != null && this.form.questions[e.question - 1] != null) {
                    if (f == true) {
                        b(this.form).webSurvey("showSection", {
                            question: e.question - 1
                        }, function () {
                            a.scrollToQuestion.apply(c, [e])
                        })
                    } else {
                        a.scrollToQuestion.apply(this, [e])
                    }
                } else {
                    if (e != null && (e.heading == true || e.start == true)) {
                        if (f == true) {
                            b(this.form).webSurvey("showSection", {
                                introduction: true
                            })
                        } else {
                            b(this.form.thankyou).hide();
                            if (this.contentContainer.scrollTop > 0) {
                                b(this.contentContainer).animate({
                                    scrollTop: 0
                                }, g, function () {
                                    b(c.form.heading).highlight(d)
                                })
                            } else {
                                b(this.form.heading).highlight(d)
                            }
                        }
                    } else {
                        if (e != null && e.introduction == true) {
                            b(this.form.thankyou).hide();
                            if (this.contentContainer.scrollTop > 0) {
                                b(this.contentContainer).animate({
                                    scrollTop: 0
                                }, g, function () {
                                    b(c.form.introduction).highlight(d);
                                    if (f == true) {
                                        b(c.form).webSurvey("showSection", {
                                            introduction: true
                                        })
                                    }
                                })
                            } else {
                                b(this.form.introduction).highlight(d);
                                if (f == true) {
                                    b(this.form).webSurvey("showSection", {
                                        introduction: true
                                    })
                                }
                            }
                        } else {
                            if (e != null && e.submit == true) {
                                if (f == true) {
                                    b(this.form).webSurvey("showSection", {
                                        section: this.form.sections.length - 2
                                    })
                                }
                                b(this.contentContainer).animate({
                                    scrollTop: b(this.webContainer).outerHeight()
                                }, g)
                            } else {
                                if (e != null && e.thankyou == true) {
                                    if (f == true) {
                                        b(this.form).webSurvey("showSection", {
                                            thankyou: true
                                        })
                                    } else {
                                        b(this.form.introduction).add(this.form.back).add(this.form.submit).hide();
                                        b(this.form.thankyouContainer).add(this.form.thankyou).show()
                                    }
                                }
                            }
                        }
                    }
                }
            }
        },
        scrollToQuestion: function (l) {
            if (l == null || typeof l.question != "number") {
                return
            }
            if (this.form.questions[l.question - 1] == null) {
                return
            }
            var i = b.ObjectPlanet.unitLess(b(this.webContainer).css("padding-top"));
            var h = this.form.questions[l.question - 1].offsetTop - this.contentContainer.scrollTop + i - 4 < 0;
            var g = b(this.contentContainer).height();
            var d = b(this.form.questions[l.question - 1]).outerHeight();
            var c = this.form.questions[l.question - 1].offsetTop + d + i;
            var f = c - this.contentContainer.scrollTop >= g;
            b(this.form.questionContainer).show();
            b(this.form.thankyou).hide();
            var k = b.ObjectPlanet.SPEED * 4;
            if (h == true || f == true) {
                var e = this.form.questions[l.question - 1];
                var j = e.offsetTop + i - 6;
                b(this.contentContainer).animate({
                    scrollTop: j
                }, b.ObjectPlanet.SPEED / 2, function () {
                    b(e).highlight(k)
                })
            } else {
                b(this.form.questions[l.question - 1]).highlight(k)
            }
        }
    }
})(jQuery);
(function () {
    $.fn.surveyOverview = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (b) {
            var c = $(this).addClass("survey-overview textSelect").get(0);
            this.eventBus = b ? b : new $.ObjectPlanet.EventBus();
            this.eventBus.listen("survey.loaded", function (d) {
                c.json = d
            })
        },
        set: function (l) {
            var m = $(this).prop("json", l).html("").get(0);
            var n = "";
            var o = l && l.surveyTexts && l.surveyTexts.surveyHeading && l.surveyTexts.surveyHeading.def != null ? $.trim(l.surveyTexts.surveyHeading.def) : "";
            var k = l && l.surveyTexts && l.surveyTexts.surveyIntro && l.surveyTexts.surveyIntro.def != null ? $.trim(l.surveyTexts.surveyIntro.def) : "";
            if (typeof k == "string" && k.length > 300) {
                k = k.substring(0, 300) + "..."
            }
            n = '<table cellpadding="0" cellspacing="0">';
            n += '<tr class="intro"><td>';
            n += '<div class="survey-heading">' + o + "</div>";
            n += '<div class="survey-intro">' + k + "</div>";
            n += "</td></tr>";
            if (l != null && l.sections != null && l.sections.section instanceof Array && l.sections.section.length > 0) {
                var p = l.sections.section;
                var f = -1;
                for (var e = 0; e < p.length; e++) {
                    if (p[e] != null && p[e].questions != null && p[e].questions.length > 0 && p[e].questions[0] != null) {
                        f = p[e].questions[0];
                        break
                    }
                }
                if (f == -1 || f > 0) {
                    for (var d = 0; d < (f == -1 ? l.questions.length : f); d++) {
                        n += "<tr><td>" + $.questionOverview(l.questions[d], (d + 1)) + "</td></tr>"
                    }
                }
                n += "</table>";
                var g = l && l.surveyTexts && l.surveyTexts.surveyHeading && l.surveyTexts.surveyHeading.includeInSections == true;
                for (var d = 0; d < p.length; d++) {
                    n += '<table cellpadding="0" cellspacing="0"><tr class="section" number="' + d + '"><td>';
                    n += a.sectionMarkup(l, d);
                    n += "</td></tr>";
                    for (var b = 0; p[d] != null && p[d].questions != null && b < p[d].questions.length; b++) {
                        var c = p[d].questions[b];
                        n += "<tr><td>" + $.questionOverview(l.questions[c], c + 1) + "</td></tr>"
                    }
                    n += "</table>"
                }
            } else {
                if (l != null && l.questions != null && l.questions.length > 0) {
                    for (var e = 0; l.questions instanceof Array && e < l.questions.length; e++) {
                        n += "<tr><td>" + $.questionOverview(l.questions[e], (e + 1)) + "</td></tr>"
                    }
                    n += "</table>"
                }
            }
            var h = l && l.surveyTexts && l.surveyTexts.thankYouNote && l.surveyTexts.thankYouNote.def != null ? $.trim(l.surveyTexts.thankYouNote.def) : "";
            if (h.length > 250) {
                h = h.substring(0, 250) + "..."
            }
            n += '<table cellpadding="0" cellspacing="0"><tr><td>';
            if (h != "") {
                n += '<div class="thankyou">' + h + "</div>"
            }
            n += "</td></tr></table>";
            $(this).html(n);
            $(this).find("> table").each(function () {
                if ($(this).text() == "") {
                    $(this).hide()
                }
            });
            this.heading = $(this).find(".survey-heading").get(0);
            this.intro = $(this).find(".survey-intro").get(0);
            this.thankyou = $(this).find(".thankyou").get(0);
            this.questions = [];
            $(this).find(".question").each(function (i) {
                m.questions[i] = this;
                m.questions[i].text = $(this).find(".text").get(0)
            });
            $(this).find(".intro").toggle(o != "" || k != "");
            $(this.thankyou).closest("table").toggle(h != "");
            $(this).find(".section").each(function () {
                $(this).toggle($(this).text() != "")
            });
            $(this).find(".delete-button").deleteButton().popdown({
                align: "left",
                standalone: true,
                offsetX: 3,
                offsetY: 1,
                items: [{
                    label: "Delete question",
                    callback: function () {
                        var i = $(this).closest(".question").find(".number").text();
                        i = i.substring(0, i.length - 1);
                        m.eventBus.trigger("question.delete", i)
                    }
                }]
            });
            $(this).find(".question").hover(function () {
                $(this).find(".number > div").addClass("active").find(".arrow").css("visibility", "visible");
                $(this).find(".delete-button").css("visibility", "visible").deleteButton("paint");
                this.hover = true;
                var i = this;
                if ($.ObjectPlanet.testMode == true) {
                    if (i.hover == true) {
                        $(i).find(".options").toggle($(i).find(".options").text() != "")
                    }
                } else {
                    setTimeout(function () {
                        if (i.hover == true) {
                            $(i).find(".options").toggle($(i).find(".options").text() != "")
                        }
                    }, 250)
                }
            }, function () {
                $(this).find(".number > div").removeClass("active").find(".arrow").css("visibility", "hidden");
                $(this).find(".delete-button").css("visibility", "hidden");
                $(this).removeProp("hover");
                if (!$(this).hasClass("current")) {
                    $(this).find(".options").hide()
                }
            });
            $(this).find(".question").bind("click", function (i) {
                m.eventBus.trigger("overview.clicked", {
                    question: $(this).attr("number") - 0
                })
            });
            $(this).find(".section").bind("click", function (j) {
                var i = {
                    section: $(this).attr("number") - 0
                };
                if ($(j.target).hasClass("section-heading")) {
                    i.heading = true
                }
                if ($(j.target).hasClass("section-intro")) {
                    i.intro = true
                }
                m.eventBus.trigger("overview.clicked", i)
            });
            $(this).find(".survey-heading").bind("click", function (i) {
                m.eventBus.trigger("overview.clicked", {
                    heading: true
                })
            });
            $(this).find(".survey-intro").bind("click", function (i) {
                m.eventBus.trigger("overview.clicked", {
                    introduction: true
                })
            });
            $(this).find(".thankyou").bind("click", function (i) {
                m.eventBus.trigger("overview.clicked", {
                    thankyou: true
                })
            })
        },
        setHeading: function (b) {
            $(this).find(".section .survey-heading").add(this.heading).html(b);
            $(this.heading).closest("tr").toggle($(this.heading).text() != "" || $(this.intro).text() != "")
        },
        setIntro: function (b) {
            $(this.intro).html(typeof b == "string" ? b.replace(/\n/g, "<br>") : "");
            $(this.intro).closest("tr").toggle($(this.heading).text() != "" || $(this.intro).text() != "")
        },
        setThankYou: function (b) {
            $(this.thankyou).html(typeof b == "string" ? b.replace(/\n/g, "<br>") : "");
            $(this.thankyou).closest("table").toggle($(this.thankyou).text() != "")
        },
        sectionMarkup: function (c, e) {
            var b = "";
            if (c && c.surveyTexts && c.surveyTexts.surveyHeading && c.surveyTexts.surveyHeading.includeInSections == true) {
                var g = c && c.surveyTexts && c.surveyTexts.surveyHeading && c.surveyTexts.surveyHeading.def != null ? $.trim(c.surveyTexts.surveyHeading.def) : "";
                if (g != "") {
                    b += '<div class="survey-heading">' + g.replace(/&lt;/g, "<") + "</div>"
                }
            }
            if (c && c.sections && c.sections.section && c.sections.section.length >= e && c.sections.section[e] != null) {
                var d = c.sections.section[e];
                if (d.heading != null || d.intro != null) {
                    var g = d.heading && d.heading.def != null ? $.trim(d.heading.def) : "";
                    var f = d.intro && d.intro.def != null ? $.trim(d.intro.def) : "";
                    if (g != "") {
                        b += '<div class="section-heading">' + g.replace(/&lt;/g, "<") + "</div>"
                    }
                    if (f != "") {
                        f = f.replace(/&lt;/g, "<");
                        if (f.length > 200) {
                            f = f.substring(0, 200) + "..."
                        }
                        b += '<div class="section-intro">' + f + "</div>"
                    }
                }
            }
            return b
        },
        updateSection: function (c) {
            if (typeof c != "number" || c < 0) {
                return
            }
            var d = $(this).find(".section").get(c);
            if (d != null) {
                $(d).find("td").html(a.sectionMarkup(this.json, c));
                var e = $(d).find("td").text();
                $(d).toggle(e != "");
                var b = $(d).closest("table").get(0);
                $(b).toggle(e != "" || $(b).find(".question").size() > 0)
            }
        },
        setActive: function (b) {
            $(this).find(".question").removeClass("current");
            $(this).find(".section").removeClass("current");
            $(this).find(".intro").removeClass("current");
            $(this).find(".thankyou").removeClass("current");
            $(this).find(".options").hide();
            var c = null;
            if (b != null && typeof b.question == "number") {
                c = $(this).find(".question").eq(b.question - 1).addClass("current").find(".options").show().end().get(0)
            } else {
                if (b != null && typeof b.section == "number") {
                    c = $(this).find(".section").eq(b.section - 1).addClass("current").get(0)
                } else {
                    if (b != null && (b.heading == true || b.introduction == true)) {
                        c = $(this).find(".intro").addClass("current").get(0)
                    } else {
                        if (b != null && b.thankyou == true) {
                            c = $(this).find(".thankyou").addClass("current").get(0)
                        }
                    }
                }
            }
            a.ensureInView.apply(this, [c])
        },
        ensureInView: function (d) {
            var c = $(d).closest(".contentContainer").get(0);
            if (d != null && c != null && $(this).is(":visible")) {
                var b = $(d).offset().top < $(c).offset().top;
                var e = $(d).offset().top > $(c).offset().top + $(c).height() - $(d).height();
                if ((b || e) && d.scrollIntoView != null) {
                    d.scrollIntoView(b == true);
                    c.scrollTop += (b ? -5 : 5)
                }
            }
        }
    }
})(jQuery);
(function () {
    $.questionOverview = function (c, d) {
        var b = "";
        if (c != null) {
            var f = c.questionText != null && c.questionText.def != null ? c.questionText.def : "";
            if (f.length > 100) {
                f = f.substring(0, 100) + "..."
            }
            b = '<table class="question" number="' + d + '"><tr>';
            b += '<td class="number">' + (d != null ? d + "." : "") + "</td>";
            b += '<td class="text">' + f + "</td>";
            var e = $.questionForm.hasValidation(c) ? "" : ' style="display: none"';
            b += '<td class="validation"' + e + ">\u2605</td>";
            b += '<td class="delete"><span class="delete-button" style="visibility: hidden;"></span></td>';
            b += "</tr>";
            b += '<tr class="options" style="display: none;"><td></td><td>';
            if (c.choice != null) {
                b += $.questionOverview.choice(c.choice)
            }
            if (c.rating != null) {
                b += $.questionOverview.rating(c.rating)
            }
            if (c.dropdown != null) {
                b += $.questionOverview.choice(c.dropdown)
            }
            if (c.fields != null) {
                b += $.questionOverview.fields(c.fields)
            }
            b += "</td></tr></table>"
        }
        return b
    };
    $.questionOverview.choice = function (c) {
        for (var b = 0, d = ""; c.options instanceof Array && b < Math.min(c.options.length, 5); b++) {
            d += c.options[b] != null && c.options[b].def != null ? c.options[b].def : "";
            d += ", "
        }
        if (d.length > 0) {
            d = d.substring(0, d.length - 2)
        }
        return d
    };
    $.questionOverview.rating = function (f) {
        var c = f.labels != null && f.labels[0] != null && f.labels[0].def != null ? f.labels[0].def : "Bad";
        c += " -";
        var e = f.minRating != null ? f.minRating : 1;
        var b = f.maxRating != null ? f.maxRating : 5;
        for (var d = e; d <= b; d++) {
            c += " " + d
        }
        c += " - ";
        c += f.labels != null && f.labels.length >= b && f.labels[b - 1] != null && f.labels[b - 1].def != null ? f.labels[b - 1].def : "Good";
        return c
    };
    $.questionOverview.fields = function (c) {
        for (var b = 0, d = ""; c instanceof Array && b < Math.min(c.length, 5); b++) {
            d += c[b] != null && c[b].label != null && c[b].label.def != null ? c[b].label.def : "";
            d += ", "
        }
        if (d.length > 0) {
            d = d.substring(0, d.length - 2)
        }
        return d
    };
    $.fn.questionOverview = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (b) {
            if (this.text == null) {
                $(this).html($.questionOverview(b));
                this.text = $(this).find(".text").get(0)
            }
            var c = b.questionText != null && b.questionText.def != null ? b.questionText.def : "";
            if (c.length > 100) {
                c = c.substring(0, 100) + "..."
            }
            $(this.text).text(c);
            var d = "";
            if (b.choice != null) {
                d = $.questionOverview.choice(b.choice)
            }
            if (b.rating != null) {
                d = $.questionOverview.rating(b.rating)
            }
            if (b.dropdown != null) {
                d = $.questionOverview.choice(b.dropdown)
            }
            if (b.fields != null) {
                d = $.questionOverview.fields(b.fields)
            }
            $(this).find("tr.options td:eq(1)").text(d)
        },
        setValidationState: function (b) {
            $(this).find("td.validation").toggle($.questionForm.hasValidation(b))
        }
    }
})(jQuery);
(function (b) {
    b.fn.publishModule = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c, e) {
            var d = b(this).addClass("publish-module op-app-module").get(0);
            this.eventBus = c ? c : new b.ObjectPlanet.EventBus();
            this.urlForm = b("<div></div>").urlForm(this.eventBus).get(0);
            this.tagEditor = b("<div></div>").tagEditor(e).hide().get(0);
            this.popupEditor = b("<div></div>").popupEditor(this.eventBus, e).bind("keyup change", function () {
                if (d.survey != null) {
                    b(d.survey.saveIcon).text("Save").removeAttr("disabled").css("cursor", "pointer")
                }
            }).hide().get(0);
            b(this).module({
                title: "Publish",
                menu: ["Dates | URL", "Tags", "Popup"],
                content: [this.urlForm, this.tagEditor, this.popupEditor]
            });
            this.menu.url = this.menu.labels[0];
            this.menu.tags = this.menu.labels[1];
            this.menu.popup = this.menu.labels[2];
            this.eventBus.listen("survey.saved", function (f) {
                d.surveyId = f._id.$oid;
                b(d.urlForm).urlForm("reset", f);
                b(d.tagEditor).tagEditor("reset", f);
                b(d.popupEditor).popupEditor("setScript", d.surveyId)
            });
            this.eventBus.listen("survey.new survey.loaded user.loggedOut", function (f) {
                d.surveyId = f != null && f._id != null ? f._id.$oid : null;
                a.reset.apply(d, [f])
            });
            this.eventBus.listen("survey.deleted", function (f) {
                if (d.surveyId == f) {
                    d.surveyId = null;
                    a.reset.apply(d)
                }
            })
        },
        reset: function (c) {
            b(this.urlForm).urlForm("reset", c);
            b(this.tagEditor).tagEditor("reset", c);
            b(this.popupEditor).popupEditor("setScript", this.surveyId);
            b(this.popupEditor).popupEditor("reset", c && c.publish && c.publish.popup ? c.publish.popup : null)
        }
    }
})(jQuery);
(function (c) {
    c.fn.urlForm = function () {
        return this.opWidget(a, arguments)
    };
    var b = "Not available yet...";
    var a = {
        init: function (d) {
            var g = c(this).addClass("urlForm").get(0);
            this.eventBus = d ? d : new c.ObjectPlanet.EventBus();
            var f = '<div class="publish-instruction noSelect">Set the start and stop dates of the survey:</div><div class="op-datepicker"></div><div class="publish-instruction noSelect">Use the below URL to access the survey directly:</div><div style="position: relative; "><textarea class="url borderBox canSelect" readonly="readonly">' + b + '</textarea><button class="test borderBox" disabled="disabled">Test</button></div><span class="help-button">?</span>';
            c(this).html(f);
            var e = 3;
            this.dates = c(this).find(".op-datepicker").datePicker({
                monthCount: e
            }, this.eventBus).get(0);
            this.url = c(this).find("textarea").get(0);
            this.urlTest = c(this).find("button:contains(Test)").get(0);
            this.helpButton = c(this).find(".help-button").helpButton().bind("click", function () {
                c.murveyHelp({
                    sections: ["publish-date", "publish-url"]
                })
            }).get(0);
            c(this).find("textarea").bind("click", function () {
                if (c(this).val() != b) {
                    c(this).trigger("select")
                }
            });
            c(this.urlTest).bind("click", function () {
                var h = window.open(c(g.url).val());
                c(h).bind("load", function (i) {
                    if (c.ObjectPlanet.session != null && this.document != null && this.document.head != null) {
                        c(this.document.head).append('<meta property="murvey:sid" content="' + c.ObjectPlanet.session.sid + '">');
                        c(this.document.head).append('<meta property="murvey:skey" content="' + c.ObjectPlanet.session.skey + '">')
                    }
                    setTimeout(function () {
                        if (h.document != null) {
                            c(h.document.body).find(".op-web-theme-submit-button").bind("click", function (j) {
                                g.eventBus.trigger("response.author")
                            })
                        }
                    }, 500)
                })
            });
            c(this.dates).bind("applydate", function (h) {
                if (g.surveyEditor != null) {
                    g.surveyEditor.json.surveySetup = {
                        start: h.eventData.start.valueOf(),
                        stop: h.eventData.stop.valueOf()
                    }
                }
                g.eventBus.trigger("survey.changed", {
                    state: true,
                    survey: g.surveyEditor.json
                }).trigger("survey.save")
            })
        },
        reset: function (d) {
            if (d && d._id && d._id.$oid != null) {
                this.surveyId = d._id.$oid;
                c(this.url).val(c.ObjectPlanet.base() + "s?" + this.surveyId);
                c(this.urlTest).add(this.popupTest).removeAttr("disabled");
                if (d.surveySetup != null) {
                    c(this.dates).datePicker("set", {
                        start: new Date(d.surveySetup.start),
                        stop: new Date(d.surveySetup.stop)
                    })
                }
            } else {
                delete this.surveyId;
                c(this.url).val(b);
                c(this.urlTest).attr("disabled", "disabled");
                c(this.dates).datePicker("clear")
            }
        }
    }
})(jQuery);
(function (c) {
    c.fn.tagEditor = function () {
        return this.opWidget(a, arguments)
    };
    var b = "Not available yet...";
    var a = {
        init: function (f) {
            var e = c(this).addClass("tagEditor").prop("theme", f).get(0);
            var d = '<div class="section"><div class="publish-instruction noSelect">Use the below tag to put a link in your web page:</div><div class="input" style="position: relative; "><textarea class="link borderBox canSelect" readonly="readonly">' + b + "</textarea>" + c.inputBox({
                label: "Link label",
                classes: "link-label",
                attributes: 'disabled="disabled"'
            }) + '</div></div><div class="section"><div class="publish-instruction noSelect">Use the below tag to put a link in your web page that opens the survey as a popup window:</div><div class="input" style="position: relative; "><textarea class="popupLink borderBox canSelect" readonly="readonly">' + b + '</textarea><button class="test borderBox" disabled="disabled">Test</button>' + c.inputBox({
                label: "Link label",
                classes: "link-label",
                attributes: 'disabled="disabled"'
            }) + '</div></div><div class="section"><div class="publish-instruction noSelect">Use the below tag to embed the entire survey in a web page:</div><div class="input" style="position: relative; "><textarea class="embedded borderBox canSelect" readonly="readonly">' + b + '</textarea></div></div><span class="help-button">?</span>';
            c(this).html(d);
            this.tag = c(this).find("textarea.link").get(0);
            this.tagLabel = c(this).find("input:eq(0)").get(0);
            this.popup = c(this).find("textarea.popupLink").get(0);
            this.popupTest = c(this).find("button").get(0);
            this.popupLabel = c(this).find("input:eq(1)").get(0);
            this.embedded = c(this).find("textarea.embedded").get(0);
            this.helpButton = c(this).find(".help-button").helpButton().bind("click", function () {
                c.murveyHelp({
                    sections: ["publish-web", "publish-embed"]
                })
            }).get(0);
            c(this).find("textarea").bind("click", function () {
                if (c(this).val() != b) {
                    c(this).trigger("select")
                }
            });
            c(this.popupTest).bind("click", function () {
                var g = {
                    preventResponse: true,
                    requestOn: false
                };
                if (e.theme != null) {
                    g.width = c(e.theme.survey.css.width).val()
                }
                c.ObjectPlanet.popupSurvey(e.surveyEditor.json, g)
            });
            c(this.tagLabel).bind("change keyup", function () {
                c(e.tag).val(a.linkTag.apply(e, [e.surveyId, c(this).val()]))
            });
            c(this.popupLabel).bind("change keyup", function () {
                c(e.popup).val(a.popupTag.apply(e, [e.surveyId, c(this).val()]))
            })
        },
        reset: function (d) {
            if (d && d._id && d._id.$oid != null) {
                this.surveyId = d._id.$oid;
                c(this.popupTest).removeAttr("disabled");
                c(this.tagLabel).add(this.popupLabel).removeAttr("disabled").val(d.surveyName != null ? d.surveyName : "");
                c(this.tag).val(a.linkTag.apply(this, [d._id.$oid, c(this.tagLabel).val()]));
                c(this.popup).val(a.popupTag.apply(this, [d._id.$oid, c(this.popupLabel).val()]));
                c(this.embedded).val(a.embeddedTag.apply(this, [d._id.$oid]))
            } else {
                delete this.surveyId;
                c(this.tag).add(this.popup).add(this.embedded).val(b);
                c(this.popupTest).attr("disabled", "disabled");
                c(this.tagLabel).add(this.popupLabel).attr("disabled", "disabled").val("")
            }
        },
        linkTag: function (e, d) {
            return '<a href="' + c.ObjectPlanet.base() + "s?" + e + '" target="_blank">' + d + "</a>"
        },
        popupTag: function (e, d) {
            return "<a href=\"javascript:void(0);\" onclick=\"javascript: var s = document.createElement('script'); s.type = 'text/javascript'; s.id = 'murveyScript'; s.link = 'true'; s.src = '" + c.ObjectPlanet.base() + "p.js?" + e + "'; document.getElementsByTagName('head')[0].appendChild(s); \">" + d + "</a>"
        },
        embeddedTag: function (d) {
            return '<iframe frameborder="0" style="height: 100%; width: 100%; " src="' + c.ObjectPlanet.base() + "s?" + d + '&fill=true"></iframe>'
        }
    }
})(jQuery);
(function (d) {
    var c = d("<label></label>").css({
        "padding-left": "8px",
        "padding-right": "8px",
        border: "1px solid transparent"
    }).get(0);
    var b = "The script is not available until you have saved the survey...";
    d.fn.popupEditor = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (e, k) {
            var g = d(this).addClass("popup-editor").prop("theme", k).get(0);
            this.eventBus = e ? e : new d.ObjectPlanet.EventBus();
            var i = d.autoSizeInput.outer("Yes", c);
            var h = d.autoSizeInput.outer("No", c);
            var j = d.autoSizeInput.outer("Later...", c);
            var f = '<div class="publish-instruction noSelect">Copy and paste the below javascript tag somewhere between the &lt;body&gt; and &lt;/body&gt; tags in your web page source code to publish the survey as a popup.</div><div class="script" style="position: relative; "><textarea class="popupScript borderBox canSelect" readonly="readonly">' + b + '</textarea><button class="test borderBox">Test</button></div><div class="publish-instruction">Open randomly every <input class="random" type="number" value="1" min="0"> visit</div><div class="publish-instruction noSelect">If you fill in the form below, the respondent will be presented with a request dialog, otherwise the survey will pop up automatically.</div><div class="dialog">' + d.inputBox({
                classes: "heading",
                label: "popup greeting heading",
                attributes: 'type="text" style="width: 100%; " placeholder="A survey greeting heading..."'
            }) + d.autoSizeTextArea({
                attributes: 'placeholder="A survey greeting introduction..." style="width: 100%; "',
                classes: "intro",
                label: "popup greeting introduction"
            }) + "<div>" + d.inputBox({
                classes: "button",
                attributes: 'type="text" placeholder="Later..." style="width: ' + j + 'px;"'
            }) + d.inputBox({
                classes: "button",
                attributes: 'type="text" value="Yes" placeholder="Yes..." style="width: ' + i + 'px;"'
            }) + d.inputBox({
                classes: "button",
                attributes: 'type="text" value="No" placeholder="No..." style="width: ' + h + 'px;"'
            }) + '<button class="save" disabled="disabled">Save</button></div></div><span class="help-button">?</span>';
            d(this).html(f);
            this.script = d(this).find("textarea").bind("click", function () {
                d(this).trigger("select")
            }).get(0);
            this.heading = d(this).find("input.heading").inputBox().get(0);
            this.introduction = d(this).find(".intro").autoSizeTextArea({
                horizontal: false
            }).get(0);
            this.later = d(this).find("input.button:eq(0)").autoSizeInput().inputBox().get(0);
            this.yes = d(this).find("input.button:eq(1)").autoSizeInput().inputBox({
                defaultText: "Yes"
            }).get(0);
            this.no = d(this).find("input.button:eq(2)").autoSizeInput().inputBox({
                defaultText: "No"
            }).get(0);
            this.save = d(this).find("button.save").bind("click", function () {
                g.eventBus.trigger("survey.save")
            }).css("cursor", "default").get(0);
            this.helpButton = d(this).find(".help-button").helpButton().bind("click", function () {
                d.murveyHelp({
                    sections: ["publish-popup"]
                })
            }).get(0);
            this.random = d(this).find("input[type=number]").bind("keydown keypress keyup", function (m) {
                var l = m.keyCode;
                return (l == 0 || (l >= 48 && l <= 57) || (l >= 96 && l <= 105) || l == 8 || l == 9 || l == 37 || l == 39 || l == 46) || (d(this).val() == "" && (l == 189 || l == 45))
            }).bind("blur", function (l) {
                d(this).val(Math.max(d(this).val() - 0, 0));
                this.current = d(this).val() - 0
            }).bind("click", function (l) {
                if (this.current != d(this).val() - 0) {
                    d(this).trigger("change")
                }
                this.current = d(this).val()
            }).get(0);
            this.random.current = d(this.random).val();
            d(this).bind("keyup change", function () {
                d(g.save).removeAttr("disabled").css("cursor", "pointer");
                if (g.surveyEditor != null) {
                    g.surveyEditor.json.publish = {
                        popup: a.getJSON.apply(g)
                    };
                    d(g.surveyEditor).surveyEditor("setChanged", true)
                }
            });
            d(this.later).add(this.yes).add(this.no).bind("blur", function () {
                if (this === g.later && d(this).val() == "") {
                    d(this).css("width", d.autoSizeInput.outer("Later...", c) + "px")
                } else {
                    d(this).autoSizeInput("adjust")
                }
            });
            var g = this;
            this.test = d(this).find("button.test").bind("click", function () {
                a.openSurvey.apply(g)
            }).get(0);
            this.eventBus.listen("survey.saved user.loggedOut", function (l) {
                d(g.save).attr("disabled", "disabled").css("cursor", "default")
            })
        },
        setScript: function (e) {
            if (e != null) {
                d(this.script).val('<script type="text/javascript">\n   (function() {\n      function a() {\n         var s = document.createElement("script");\n         s.type = "text/javascript"; s.async = true; s.id = "murveyScript";\n         s.src = "' + d.ObjectPlanet.base() + "p.js?" + e + '";\n         document.getElementsByTagName("head")[0].appendChild(s);\n      }\n      if (window.attachEvent) window.attachEvent("onload", a); else window.addEventListener("load", a);\n   })();\n<\/script>\n')
            } else {
                d(this.script).val(b)
            }
        },
        reset: function (e) {
            d(this.random).val(e && e.random && e.random >= 0 ? e.random : 1).get(0).current = d(this.random).val() - 0;
            d(this.heading).val(e && e.heading && e.heading.def ? e.heading.def : "");
            d(this.introduction).val(e && e.introduction && e.introduction.def ? e.introduction.def : "").autoSizeTextArea("adjust");
            d(this.later).val(e && e.later && e.later.def ? e.later.def : "");
            d(this.yes).val(e && e.yes && e.yes.def ? e.yes.def : "Yes").autoSizeInput("adjust");
            d(this.no).val(e && e.no && e.no.def ? e.no.def : "No").autoSizeInput("adjust");
            if (d(this.later).val() == "") {
                d(this.later).css("width", d.autoSizeInput.outer("Later...", c) + "px")
            } else {
                d(this.later).autoSizeInput("adjust")
            }
            d(this.save).attr("disabled", "disabled").css("cursor", "default")
        },
        getJSON: function () {
            return {
                random: d(this.random).val() - 0,
                heading: {
                    def: d(this.heading).val() != "" ? d(this.heading).val() : ""
                },
                introduction: {
                    def: d(this.introduction).val() != "" ? d(this.introduction).val() : ""
                },
                yes: {
                    def: d(this.yes).val() != "" ? d(this.yes).val() : "Yes"
                },
                no: {
                    def: d(this.no).val() != "" ? d(this.no).val() : "No"
                },
                later: {
                    def: d(this.later).val() != "" ? d(this.later).val() : ""
                }
            }
        },
        openSurvey: function () {
            if (this.surveyEditor != null) {
                this.json = this.surveyEditor.json
            }
            if (this.json != null) {
                this.json.publish = {
                    popup: a.getJSON.apply(this)
                };
                var e = {
                    base: d.OP_BASE,
                    preventResponse: true
                };
                if (this.theme != null) {
                    e.width = d(this.theme.survey.css.width).val()
                }
                d.ObjectPlanet.popupSurvey(this.json, e)
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.datePicker = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (l, h) {
            var k = b(this).addClass("op-datepicker borderBox noSelect").get(0);
            this.eventBus = h ? h : new b.ObjectPlanet.EventBus();
            this.RESPONSE_LIMIT_REACHED = "Response limit reached";
            var j = b('<table cellspacing="0" cellpadding="0"><tr></tr></table>').get(0);
            var g = b(j).find("tr").get(0);
            this.prev = b('<td><span class="move prev"><span class="left"></span></span></td>').appendTo(g).find("span.prev").bind("click", function (i) {
                a.previous.apply(k)
            }).get(0);
            this.months = [];
            var e = l && l.monthCount ? l.monthCount : 3;
            for (var f = 0; f < e; f++) {
                var d = new Date(new Date().getFullYear(), new Date().getMonth(), 15);
                d.setMonth(d.getMonth() + f);
                this.months[f] = b("<table></table>").datePickerMonth({
                    month: d
                }).get(0);
                b("<td></td>").html(this.months[f]).appendTo(g)
            }
            this.next = b('<td><span class="move next"><span class="right"></span></span></td>').appendTo(g).find("span.next").bind("click", function (i) {
                a.next.apply(k)
            }).get(0);
            var c = b("<td></td>").get(0);
            b('<div class="surveyDate"><label>Start:</label><span class="start"></span></div>').appendTo(c);
            b('<div class="surveyDate"><label>Stop:</label><span class="stop"></span></div>').appendTo(c);
            this.start = b(c).find(".surveyDate").get(0);
            this.stop = b(c).find(".surveyDate").get(1);
            this.startDate = b(this.start).find("span.start").dateField().get(0);
            this.stopDate = b(this.stop).find("span.stop").dateField().get(0);
            this.status = b('<label class="status notset borderBox">Not set</label>').appendTo(c).get(0);
            b('<div style="text-align: right;"><button disabled="disabled">Save</button><button disabled="disabled">Cancel</button>').appendTo(c);
            this.save = b(c).find("button:contains(Save)").get(0);
            this.cancel = b(c).find("button:contains(Cancel)").get(0);
            b(c).appendTo(g);
            b(this.startDate.time).add(this.stopDate.time).bind("keyup", function (n) {
                b(k.save).add(k.cancel).removeAttr("disabled");
                var m = b(this.hh).val() - 0,
                    o = b(this.mm).val() - 0;
                if (m >= 0 && m <= 23 && o >= 0 && o <= 59) {
                    var i = k[this == k.startDate.time ? "startDate" : "stopDate"];
                    if (i.current != null) {
                        i.current.setHours(m)
                    }
                    if (i.current != null) {
                        i.current.setMinutes(m)
                    }
                    a.setRange.apply(k, [{
                        start: k.startDate.current,
                        stop: k.stopDate.current,
                        noStartTime: true,
                        noStopTime: true
                    }])
                }
            });
            b(this).bind("dateclick", function (i) {
                if (k.startDate.current == null || i.eventData < k.startDate.current) {
                    k.startDate.current = i.eventData;
                    if (k.stopDate.current == null) {
                        k.stopDate.current = i.eventData
                    }
                } else {
                    if (i.eventData >= k.startDate.current && i.eventData <= k.stopDate.current) {
                        k.startDate.current = k.stopDate.current = i.eventData
                    } else {
                        k.stopDate.current = i.eventData
                    }
                }
                a.setRange.apply(k, [{
                    start: k.startDate.current,
                    stop: k.stopDate.current,
                    noStartTime: b(k.startDate.time.hh).val() != "" || b(k.startDate.time.mm).val() != "",
                    noStopTime: b(k.stopDate.time.hh).val() != "" || b(k.stopDate.time.mm).val() != ""
                }]);
                b(k.save).text("Save now").addClass("save").add(k.cancel).removeAttr("disabled")
            });
            b(this.cancel).bind("click", function () {
                a.setRange.apply(k, [k.appliedDates]);
                b(k.save).removeClass("save").add(k.cancel).attr("disabled", "disabled");
                b(k.save).text(k.appliedDates && k.appliedDates.start ? "Saved" : "Save")
            });
            b(this.save).bind("click", function () {
                if (k.startDate.current != null && k.stopDate.current != null) {
                    k.startDate.current.setHours(b(k.startDate.time.hh).val());
                    k.startDate.current.setMinutes(b(k.startDate.time.mm).val());
                    k.stopDate.current.setHours(b(k.stopDate.time.hh).val());
                    k.stopDate.current.setMinutes(b(k.stopDate.time.mm).val());
                    k.appliedDates = {
                        start: new Date(k.startDate.current),
                        stop: new Date(k.stopDate.current)
                    };
                    b(k.save).text("Saved").removeClass("save").add(k.cancel).attr("disabled", "disabled");
                    b(k).trigger({
                        type: "applydate",
                        eventData: {
                            start: k.startDate.current,
                            stop: k.stopDate.current
                        }
                    })
                } else {
                    b(k.save).attr("disabled", "disabled")
                }
            });
            b(j).appendTo(this);
            if (!b.ObjectPlanet.testMode) {
                setInterval(function () {
                    a.refresh.apply(k)
                }, 5000)
            }
        },
        set: function (f) {
            if (f != null) {
                this.appliedDates = {
                    start: new Date(f.start),
                    stop: new Date(f.stop)
                }
            }
            a.setRange.apply(this, [f]);
            var g = new Date(this.months[0].current.getFullYear(), this.months[0].current.getMonth());
            var e = new Date(g);
            e.setMonth(e.getMonth() + 3);
            e.setDate(e.getDate() - 1);
            for (var d = 0, c = null; d < this.months.length; d++) {
                if (f.start < g && f.stop > e) {
                    c = new Date();
                    c.setDate(15);
                    c.setMonth(c.getMonth() + d)
                } else {
                    if (f.stop < g) {
                        c = new Date(f.stop);
                        c.setDate(15);
                        c.setMonth(c.getMonth() + d)
                    } else {
                        if (f.start > e) {
                            c = new Date(f.start);
                            c.setDate(15);
                            c.setMonth(c.getMonth() + (d - 2))
                        }
                    }
                }
                b(this.months[d]).datePickerMonth("set", {
                    month: c,
                    start: this.startDate.current,
                    stop: this.stopDate.current
                })
            }
        },
        setRange: function (e) {
            b(this.startDate).dateField("set", e && e.start != null ? e.start : null, e ? e.noStartTime : false).prop("current", e ? e.start : null);
            b(this.stopDate).dateField("set", e && e.stop != null ? e.stop : null, e ? e.noStopTime : false).prop("current", e ? e.stop : null);
            a.setStatus.apply(this);
            var d = e && e.month ? new Date(e.month) : null;
            for (var c = 0; c < this.months.length; c++) {
                if (e != null) {
                    b(this.months[c]).datePickerMonth("set", {
                        month: d ? new Date(d) : null,
                        start: this.startDate.current,
                        stop: this.stopDate.current
                    })
                } else {
                    b(this.months[c]).datePickerMonth("clear")
                } if (d != null) {
                    d.setMonth(d.getMonth() + 1)
                }
            }
        },
        refresh: function () {
            a.setStatus.apply(this, [b(this.status).text()]);
            for (var c = 0; c < this.months.length; c++) {
                b(this.months[c]).datePickerMonth("set", {
                    start: this.startDate.current,
                    stop: this.stopDate.current
                })
            }
        },
        setStatus: function (c) {
            if (b(this.status).text() != "Ended" && c == this.RESPONSE_LIMIT_REACHED) {
                b(this.status).text(c).removeClass("running ended notset").addClass("stopped")
            } else {
                var d = new Date();
                if (this.startDate.current && this.startDate.current > d) {
                    b(this.status).text("Pending").removeClass("running ended notset stopped").addClass("pending")
                }
                if (this.stopDate.current && this.stopDate.current < d) {
                    b(this.status).text("Ended").removeClass("running pending notset stopped").addClass("ended")
                }
                if (this.startDate.current && this.stopDate.current && this.startDate.current <= d && this.stopDate.current >= d) {
                    b(this.status).text("Running").removeClass("pending ended notset stopped").addClass("running")
                }
                if (!this.startDate.current || !this.stopDate.current) {
                    b(this.status).text("Not set").removeClass("running pending ended stopped").addClass("notset")
                }
            }
        },
        clear: function () {
            b(this.startDate).dateField("set", null).prop("current", null);
            b(this.stopDate).dateField("set", null).prop("current", null);
            b(this.status).text("Not set").removeClass("running pending ended stopped").addClass("notset");
            b(this.save).text("Saved").add(this.cancel).attr("disabled", "disabled");
            for (var d = 0; d < this.months.length; d++) {
                var c = new Date();
                c.setDate(15);
                c.setMonth(c.getMonth() + d);
                b(this.months[d]).datePickerMonth("set", {
                    month: c
                }).datePickerMonth("clear")
            }
        },
        next: function () {
            for (var c = 0; c < this.months.length; c++) {
                this.months[c].current.setMonth(this.months[c].current.getMonth() + 1);
                b(this.months[c]).datePickerMonth("set", {
                    month: this.months[c].current
                })
            }
            a.setRange.apply(this, [{
                start: this.startDate.current,
                stop: this.stopDate.current
            }])
        },
        previous: function () {
            for (var c = 0; c < this.months.length; c++) {
                this.months[c].current.setMonth(this.months[c].current.getMonth() - 1);
                b(this.months[c]).datePickerMonth("set", {
                    month: this.months[c].current
                })
            }
            a.setRange.apply(this, [{
                start: this.startDate.current,
                stop: this.stopDate.current
            }])
        }
    }
})(jQuery);
(function (b) {
    var c = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    b.fn.datePickerMonth = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (f) {
            var e = "<caption></caption>";
            e += '<tr class="days"><th>S</th><th>M</th><th>T</th><th>W</th><th>T</th><th>F</th><th>S</th></tr>';
            for (var g = 0; g < 6; g++) {
                e += '<tr class="dates"><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr>'
            }
            var d = b(this).html(e).addClass("op-datepicker-month").attr("cellspacing", "0").get(0);
            this.name = b(this).find("caption").get(0);
            b(this).find("td").bind("click", function (i) {
                if (b(this).hasClass("date")) {
                    var h = new Date(d.current.getFullYear(), d.current.getMonth(), b(this).text(), new Date().getHours(), new Date().getMinutes());
                    b(d).trigger({
                        type: "dateclick",
                        eventData: h
                    })
                }
            }).hover(function () {
                if (b(this).hasClass("date")) {
                    var h = new Date(d.current);
                    h.setDate(b(this).text());
                    if (d.start == null || h < d.start || b(this).hasClass("range")) {
                        b(this).addClass("start")
                    } else {
                        b(this).addClass("stop")
                    }
                }
            }, function () {
                b(this).removeClass("start stop")
            });
            a.set.apply(this, [f])
        },
        set: function (f) {
            this.current = f != null && f.month != null ? f.month : (this.current ? this.current : new Date());
            this.start = f != null && f.start != null ? f.start : this.start;
            this.stop = f != null && f.stop != null ? f.stop : this.stop;
            b(this.name).toggleClass("current", a.isThisMonth(this.current));
            b(this.name).text(c[this.current.getMonth()] + " " + this.current.getFullYear());
            var e = {
                start: new Date(this.current.getFullYear(), this.current.getMonth(), this.current.getDate()),
                end: new Date(this.current.getFullYear(), this.current.getMonth(), this.current.getDate(), 23, 59, 59)
            };
            e.start.setDate(1 - a.firstDay(this.current));
            e.end.setDate(1 - a.firstDay(this.current));
            var d = this;
            b(this).find("td").removeClass("date passed range pending running ended today").each(function (g) {
                b(this).text(e.start.getMonth() == d.current.getMonth() ? e.start.getDate() : "");
                b(this).addClass(a.state(d.current, e, d.start, d.stop));
                e.start.setDate(e.start.getDate() + 1);
                e.end.setDate(e.end.getDate() + 1)
            })
        },
        clear: function () {
            this.start = this.stop = null;
            b(this).find("td").removeClass("range pending running ended")
        },
        state: function (i, e, k, h) {
            var d = new Date();
            var g = e.start.getMonth() == i.getMonth();
            var j = g && k != null && h != null && e.end >= k && e.start <= h;
            var f = (g ? "date" : "") + (j ? " range" : "");
            if (j && h < d) {
                f += " ended"
            }
            if (j && k > d) {
                f += " pending"
            }
            if (j && d >= k && d <= h) {
                f += " running"
            }
            if (a.hasBeen(e.start)) {
                f += " passed"
            }
            if (g && a.isToday(e.start)) {
                f += " today"
            }
            return f
        },
        firstDay: function (d) {
            return new Date(d.getFullYear(), d.getMonth(), 1).getDay()
        },
        isToday: function (d) {
            return d.getFullYear() == new Date().getFullYear() && d.getMonth() == new Date().getMonth() && d.getDate() == new Date().getDate()
        },
        isThisMonth: function (d) {
            return d.getMonth() == new Date().getMonth() && d.getFullYear() == new Date().getFullYear()
        },
        hasBeen: function (d) {
            return new Date(d.getFullYear(), d.getMonth(), d.getDate()) < new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate())
        }
    }
})(jQuery);
(function (b) {
    b.fn.reportModule = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            var d = b(this).addClass("report-module op-app-module noSelect").get(0);
            this.eventBus = c ? c : new b.ObjectPlanet.EventBus();
            this.data = {};
            this.filter = b("<div></div>").hide().reportFilter().get(0);
            this.report = b("<div></div>").surveyReport().get(0);
            this.responses = b("<table></table>").responses(this.eventBus).get(0);
            this.exportModule = b("<div></div>").exportModule(this.eventBus, this.data).get(0);
            b(this).module({
                title: "Report",
                menu: ["Report", "Responses", "Export"],
                submenu: [
                    ["Show comments", "Show as bars", "?"],
                    ["Show compact", "?"],
                    ["?"]
                ],
                content: [this.report, this.responses, this.exportModule],
                left: this.filter
            });
            b(this).module("showSubmenu", false);
            this.toggleComments = b(this.submenu).find("label:contains(Show comments)").bind("click", function () {
                a.toggleComments.apply(d)
            }).get(0);
            this.toggleCharts = b(this.submenu).find("label:contains(Show as bars)").bind("click", function () {
                a.toggleChartType.apply(d)
            }).get(0);
            this.toggleCompact = b(this.submenu).find("label:contains(Show compact)").bind("click", function () {
                a.toggleResponseMode.apply(d)
            }).get(0);
            b(this.submenu).find("label:contains(?)").helpButton().css("padding", "1px");
            b(this.submenu).find("label:contains(?):eq(0)").bind("click", function () {
                b.murveyHelp({
                    sections: ["report"]
                })
            });
            b(this.submenu).find("label:contains(?):eq(1)").bind("click", function () {
                b.murveyHelp({
                    sections: ["responses"]
                })
            });
            b(this.submenu).find("label:contains(?):eq(2)").bind("click", function () {
                b.murveyHelp({
                    sections: ["export"]
                })
            });
            this.printIcon = b("<canvas></canvas>").css({
                width: "23px",
                height: "23px"
            }).hide().printIcon().bind("click", function (e) {
                b.ObjectPlanet.premiumFeature({
                    feature: "reportPrinting",
                    callback: function () {
                        if (b(d).module("getSelected") == 0) {
                            a.printReport.apply(d)
                        }
                        if (b(d).module("getSelected") == 1) {
                            a.printResponses.apply(d)
                        }
                    }
                })
            }).appendTo(this.icons).get(0);
            this.saveIcon = b("<canvas></canvas>").css({
                width: "23px",
                height: "23px"
            }).hide().saveIcon().bind("click", function (e) {
                b.ObjectPlanet.premiumFeature({
                    feature: "dataExport",
                    callback: function () {
                        document.location = a.getExportURL.apply(d)
                    }
                })
            }).appendTo(this.icons).get(0);
            this.refresh = b("<canvas></canvas>").css({
                width: "23px",
                height: "23px"
            }).hide().refreshButton().bind("click", function (e) {
                if (d.data.surveyId != null) {
                    a.loadResponses.apply(d, [d.data.surveyId,
                        function () {
                            a.set.apply(d, [{
                                update: true
                            }])
                        }
                    ])
                }
            }).appendTo(this.icons).get(0);
            b(this.filter).bind("change", function (e) {
                if (e.target == d.filter.allCheck) {
                    return
                }
                if (b.ObjectPlanet.testMode == true || d.data.responses == null || d.data.responses.length < 50) {
                    a.setFilter.apply(d)
                } else {
                    b(d).progressIndicator("start", {
                        plain: true
                    });
                    setTimeout(function () {
                        a.setFilter.apply(d);
                        b(d).progressIndicator("stop")
                    }, 5)
                }
            });
            b(this.contentContainer).bind("scroll", function (e) {
                if (b(d.responses).is(":visible") && b(d.responses).height() - b(this).height() - this.scrollTop <= 0 && d.responses.pageLast != 0) {
                    if (b.ObjectPlanet.testMode == true) {
                        b(d.responses).responses("addPage")
                    } else {
                        b(d).progressIndicator("start", {
                            plain: true
                        });
                        setTimeout(function () {
                            b(d.responses).responses("addPage");
                            b(d).progressIndicator("stop")
                        }, 5)
                    }
                }
            });
            this.eventBus.listen("survey.new", function (e) {
                d.data.survey = e;
                b(d.responses).hide()
            }).listen("user.loggedOut", function () {
                b(d.responses).hide()
            }).listen("survey.loaded", function (e) {
                if (b(d).module("getSelected") == 1) {
                    b(d.responses).toggle(e && e.report && e.report.responseCount > 0)
                }
            }).listen("response.deleted", function (e) {
                b(d.filter).toggle(e != null && e.responseCount > 0);
                if (b(d).module("getSelected") == 1) {
                    b(d.responses).toggle(e != null && e.responseCount > 0)
                }
            });
            this.eventBus.listen("survey.new user.loggedOut", function (e) {
                a.clear.apply(d)
            });
            this.eventBus.listen("user.loggedIn", function () {
                b(d).module("setEnabled", true)
            }).listen("user.loggedOut", function () {
                b(d).module("setEnabled", false)
            });
            this.eventBus.listen("survey.saved", function (e) {
                d.data.survey = e;
                d.data.responses = {};
                a.setIconState.apply(d)
            });
            this.eventBus.listen("survey.loaded", function (e) {
                b(d.toggleCharts).text("Show as bars");
                b(d.toggleComments).text("Show comments");
                if (e != null) {
                    d.data.survey = e;
                    if (e._id != null) {
                        d.data.surveyId = e._id.$oid
                    }
                    b(d.responses).responses("setQuestions", e.questions);
                    b(d.filter).reportFilter("setQuestions", e.questions).webSurvey("adjust");
                    d.leftContainer.scrollTop = 0;
                    if (e.report != null && e.report.responseCount != 0) {
                        a.loadResponses.apply(d, [d.data.surveyId,
                            function () {
                                if (b(d).is(":visible")) {
                                    a.set.apply(d)
                                }
                            }
                        ])
                    } else {
                        d.data.responses = null;
                        a.set.apply(d)
                    }
                }
            }).listen("survey.deleted", function (e) {
                if (d.data.surveyId == e) {
                    a.clear.apply(d)
                }
            });
            this.eventBus.listen("module.movedTo", function (e) {
                if (e.index == b.ObjectPlanet.POS_REPORT) {
                    if (b.ObjectPlanet.testMode == true) {
                        a.set.apply(d)
                    } else {
                        setTimeout(function () {
                            a.set.apply(d)
                        }, 5)
                    }
                }
            });
            this.eventBus.listen("response.deleted", function (e) {
                if (e.responseCount == 0) {
                    b(d.moduleTitle).text("Report (no responses)");
                    b(d.report).surveyReport("init");
                    a.setIconState.apply(d);
                    b(d).module("showSubmenu", false);
                    d.data.responses = null
                } else {
                    a.loadResponses.apply(d, [d.data.surveyId,
                        function () {
                            if (b(d).is(":visible")) {
                                a.set.apply(d, [{
                                    responses: false
                                }])
                            }
                        }
                    ])
                }
            });
            b(this.menu).find("label:contains(Report)").bind("click", function () {
                if (!b(d).module("isEnabled")) {
                    return
                }
                b(d.report).surveyReport("repaint");
                a.setIconState.apply(d)
            });
            b(this.menu).find("label:contains(Responses)").bind("click", function (e) {
                if (!b(d).module("isEnabled")) {
                    return
                }
                b(d.responses).toggle(d.data.survey != null && d.data.survey.report && d.data.survey.report.responseCount > 0);
                a.setIconState.apply(d)
            });
            b(this.menu).find("label:contains(Export)").bind("click", function () {
                if (!b(d).module("isEnabled")) {
                    return
                }
                b(d).module("showSubmenu", d.data.survey && d.data.survey && d.data.survey.report && d.data.survey.report.responseCount > 0);
                b(d.exportModule).exportModule("set", b(d.filter).reportFilter("getQuestionFilter"));
                a.setIconState.apply(d)
            });
            b(window).bind("resize", function (e) {
                b(d.report).surveyReport("repaint")
            })
        },
        setIconState: function () {
            var f = this.data != null ? this.data.survey : null;
            var e = f != null && f._id != null && f.report != null ? f.report.responseCount : null;
            b(this.refresh).toggle(f != null && f._id != null);
            b(this.printIcon).toggle(b(this).module("getSelected") != 2 && e != null && e > 0);
            b(this.saveIcon).toggle(b(this).module("getSelected") == 2 && e != null && e > 0);
            for (var d = 0, c = false; f && f.questions && d < f.questions.length; d++) {
                if (f.questions[d] != null && (f.questions[d].choice != null || f.questions[d].dropdown != null)) {
                    c = true;
                    break
                }
            }
            b(this.toggleCharts).toggle(c)
        },
        loadResponses: function (e, d) {
            b(this).progressIndicator("start", {
                plain: true
            });
            var c = this;
            b.serverRequest({
                get: {
                    collection: "responses",
                    select: {
                        surveyId: e
                    },
                    sort: {
                        submitted: -1
                    },
                    limit: 0
                }
            }, function (f) {
                c.data.responses = f.data != null ? f.data : null;
                if (c.data.survey && c.data.responses) {
                    c.data.survey.report = {
                        responseCount: c.data.responses.length
                    }
                }
                c.data.filtered = c.data.responses;
                a.setIconState.apply(c);
                if (d) {
                    d.apply(c)
                }
                b(c).progressIndicator("stop");
                c.eventBus.trigger("responses.loaded", {
                    surveyId: c.data.surveyId,
                    responseCount: (f.data != null ? f.data.length : 0)
                })
            })
        },
        set: function (d) {
            if (this.data.surveyId == null || this.data.surveyId == -1) {
                b(this.moduleTitle).text("Report")
            } else {
                var e = this.data.survey && this.data.survey.report && this.data.survey.report.responseCount > 0 ? this.data.survey.report.responseCount : "no";
                var c = e == 1 ? " response)" : " responses)";
                b(this.moduleTitle).text("Report (" + e + c)
            }
            b(this.filter).toggle(this.data.survey != null && this.data.survey.report != null && this.data.survey.report.responseCount > 0);
            b(this.filter).webSurvey("adjust");
            if (d == null || d.report != false) {
                a.setReport.apply(this, [d && d.update == true])
            }
            if (d == null || d.responses != false) {
                b(this.responses).responses("setResponses", this.data.responses)
            }
            if (b(this.exportModule).is(":visible")) {
                b(this.exportModule).exportModule("set", b(this.filter).reportFilter("getQuestionFilter"))
            }
            if (d && d.update == true) {
                delete this.currentResponseFilter;
                a.setFilter.apply(this)
            }
            a.setIconState.apply(this)
        },
        setReport: function (d) {
            b(this).module("showSubmenu", this.data.survey && this.data.survey && this.data.survey.report && this.data.survey.report.responseCount > 0);
            if (this.data.survey && this.data.responses && this.data.responses.length > 0) {
                var c = b.ObjectPlanet.getReport(this.data.survey.questions, this.data.filtered != null ? this.data.filtered : this.data.responses);
                if (d == true && this.report.questions.length > 0) {
                    b(this.report).surveyReport("update", c, {
                        responseCount: this.data.responses.length,
                        filteredCount: this.data.filtered.length
                    })
                } else {
                    b(this.report).surveyReport(this.data.survey, c, {
                        responseCount: this.data.responses.length
                    }).surveyReport("repaint")
                }
            } else {
                b(this.report).surveyReport("clear")
            }
        },
        toggleComments: function () {
            if (this.data.surveyId != null && this.report.questions.length > 0) {
                if (b(this.toggleComments).text() == "Show comments") {
                    b(this.report).surveyReport("setComments", this.data.responses, b(this.filter).reportFilter("getQuestionFilter"));
                    b(this.toggleComments).text("Hide comments")
                } else {
                    b(this.report).surveyReport("removeComments");
                    b(this.toggleComments).text("Show comments")
                }
            }
        },
        toggleChartType: function () {
            if (b(this.toggleCharts).text() == "Show as bars" && this.report.questions.length > 0) {
                b(this.report).surveyReport("showChart", "bar");
                b(this.toggleCharts).text("Show as pies")
            } else {
                if (this.report.questions.length > 0) {
                    b(this.report).surveyReport("showChart", "pie");
                    b(this.toggleCharts).text("Show as bars")
                }
            }
        },
        toggleResponseMode: function () {
            b(this.responses).responses("showCompact", b(this.toggleCompact).text() == "Show compact");
            b(this.toggleCompact).text(b(this.toggleCompact).text() == "Show compact" ? "Show full" : "Show compact")
        },
        setFilter: function () {
            var d = b(this.filter).reportFilter("getFilter");
            if (this.currentResponseFilter == null || this.currentResponseFilter != JSON.stringify(d.responses)) {
                this.currentResponseFilter = JSON.stringify(d.responses);
                this.data.filtered = ObjectPlanet.report.filter(this.data.responses, d.responses)
            }
            if (this.data && this.data.filtered && this.data.responses && this.data.filtered.length < this.data.responses.length) {
                b(this.moduleTitle).text("Report (" + this.data.filtered.length + "/" + this.data.responses.length + " responses)")
            } else {
                var e = this.data && this.data.responses ? this.data.responses.length : 0;
                var c = e == 1 ? " response)" : " responses)";
                b(this.moduleTitle).text("Report (" + e + c)
            }
            b(this.report).surveyReport("setFilter", d.questions, this.data.filtered, {
                responseCount: this.data && this.data.responses ? this.data.responses.length : 0,
                filteredCount: this.data && this.data.filtered ? this.data.filtered.length : 0
            });
            b(this.responses).responses("setFilter", d.questions, this.data.filtered);
            b(this.exportModule).exportModule("set", d.questions)
        },
        clear: function () {
            b(this.moduleTitle).text("Report");
            b(this.report).surveyReport("clear");
            b(this.toggleComments).text("Show comments");
            b(this.toggleCharts).text("Show as bars");
            if (this.data.survey != null) {
                delete this.data.survey._id
            }
            this.data.surveyId = -1;
            this.data.responses = null;
            a.setIconState.apply(this)
        },
        printReport: function () {
            var j = "action=survey.reportPage&print=true&surveyId=" + this.data.surveyId;
            var i = "&sid=" + b.ObjectPlanet.session.sid + "&skey=" + b.ObjectPlanet.session.skey;
            var h = location.pathname == "" ? "/" : location.pathname;
            var e = location.protocol + "//" + location.host + h + b.OP_BASE + "a?" + j + i;
            var c = window.open(e, "print", "menubar=1,resizable=1,width=825,height=550,scrollbars=1");
            var g = b(this.report).surveyReport("copy", b(this.filter).reportFilter("getQuestionFilter"));
            var f = b("<div></div>").printableReport(g).css({
                width: "210mm"
            }).get(0);
            var d = this;
            b(c).bind("load", function (k) {
                b(c.document.head).append("<title>" + d.data.survey.surveyName + "</title>");
                b(c.document.body).css("overflow", "visible").html(f);
                b(f.charts).surveyReport("repaint");
                setTimeout(function () {
                    c.print()
                }, 100)
            }).bind("resize", function (k) {
                b(f.charts).surveyReport("repaint")
            })
        },
        printResponses: function () {
            var d = this;
            var f = b(this.responses).clone().get(0);
            var e = location.protocol + "//" + location.host + "/responses.html";
            var c = window.open(e, "print", "menubar=1,resizable=1,width=825,height=550,scrollbars=1");
            b(c).bind("load", function (g) {
                b(c.document.body).append(b(d.report.header).clone());
                b(c.document.body).append(f);
                setTimeout(function () {
                    c.print()
                }, 100)
            })
        },
        getExportURL: function () {
            var d = encodeURIComponent(this.data.survey.surveyName + " " + b.ObjectPlanet.dateStr(new Date()));
            var c = "/" + d + ".csv";
            c += "?surveyId=" + this.data.surveyId + "&sid=" + b.ObjectPlanet.session.sid + "&skey=" + b.ObjectPlanet.session.skey;
            c += "&questionFilter=" + encodeURIComponent(JSON.stringify(b(this.filter).reportFilter("getQuestionFilter")));
            c += "&responseFilter=" + encodeURIComponent(JSON.stringify(b(this.filter).reportFilter("getResponseFilter")));
            return c
        }
    }
})(jQuery);
(function (b) {
    b.fn.printableReport = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            b(this).addClass("printableReport");
            b(c).surveyReport("showIcons", false);
            this.charts = b(c).appendTo(this).get(0);
            b("<br>").appendTo(this)
        }
    }
})(jQuery);
(function (b) {
    b.fn.reportFilter = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d) {
            var c = b(this).addClass("report-filter op-web-theme-survey-background op-web-survey-borderbox").get(0);
            a.setQuestions.apply(this, [d]);
            b(this).bind("click", function (e) {
                if (e.target === c.allCheck && b(c.allCheck).is(":checked")) {
                    b(c.questions).find(".op-web-survey-question-text input[type=checkbox]").attr("checked", "checked")
                } else {
                    if (e.target === c.allCheck) {
                        b(c.questions).find(".op-web-survey-question-text input[type=checkbox]").removeAttr("checked")
                    }
                } if (e.target === c.allCheck) {
                    b(c).trigger("change")
                }
            })
        },
        setQuestions: function (c) {
            b(this).html('<div class="all hand op-web-theme-font right">All questions<input class="hand" type="checkbox" checked="checked"></div>');
            b(this).append(b.webSurvey()).webSurvey({
                questions: c
            }, {
                filter: true
            });
            this.allCheck = b(this).find("div.all input").get(0);
            b(this.allCheck.parentNode).toggle(c != null && c.length > 3)
        },
        getFilter: function () {
            return {
                responses: a.getResponseFilter.apply(this),
                questions: a.getQuestionFilter.apply(this)
            }
        },
        getResponseFilter: function () {
            var e = {
                answers: []
            };
            for (var d = 0; d < this.questions.length; d++) {
                e.answers[d] = {};
                if (b(this.questions[d]).find("input.noAnswer").size() > 0) {
                    e.answers[d].noAnswer = b(this.questions[d]).find("input.noAnswer").is(":checked")
                }
                if (this.questions[d].rating != null) {
                    e.answers[d].ratings = [];
                    b(this.questions[d].rating).find(".op-web-survey-question-rating-range input").each(function (f) {
                        e.answers[d].ratings[f] = b(this).is(":checked")
                    });
                    if (this.questions[d].rating.json.showNA == true) {
                        e.answers[d].na = b(this.questions[d].rating.na).is(":checked")
                    }
                } else {
                    if (this.questions[d].choice != null) {
                        e.answers[d].choices = [];
                        b(this.questions[d].choice).find("input.option").each(function (f) {
                            e.answers[d].choices[f] = b(this).is(":checked")
                        })
                    } else {
                        if (this.questions[d].fields != null) {
                            e.answers[d].fields = [];
                            var c = this;
                            b(this.questions[d].fields).find("input[type=text]").each(function (f) {
                                e.answers[d].fields[f] = {
                                    value: b(this).val()
                                };
                                var g = c.questions[d].fields.json[f];
                                if (g != null && (g.type == "integer" || g.type == "decimal")) {
                                    e.answers[d].fields[f].type = "integer"
                                }
                            });
                            b(this.questions[d].fields).find(".not").each(function (f) {
                                if (b(this).hasClass("notActive")) {
                                    e.answers[d].fields[f].not = true
                                }
                            })
                        } else {
                            if (this.questions[d].dropdown != null) {
                                e.answers[d].options = {};
                                b(this.questions[d].dropdown).find("input.option").each(function (f) {
                                    e.answers[d].options[b(this).parent().text()] = b(this).is(":checked")
                                })
                            }
                        }
                    }
                }
            }
            return e
        },
        getQuestionFilter: function () {
            var c = [];
            var d = this;
            for (var f = 0; f < this.questions.length; f++) {
                c[f] = {
                    on: b(this.questions[f].filter).is(":checked")
                };
                if (c[f].on && this.questions[f].comment != null && b(this.questions[f].comment).find("input[type=checkbox]").size() > 0) {
                    c[f].comment = b(this.questions[f].comment).find("input[type=checkbox]").is(":checked")
                }
                if (c[f].on && this.questions[f].fields) {
                    c[f].fields = []
                }
                for (var e = 0; c[f].on && this.questions[f].fields && e < this.questions[f].fields.fields.length; e++) {
                    c[f].fields[e] = b(this.questions[f].fields.fields[e].filter).is(":checked")
                }
            }
            return c
        }
    }
})(jQuery);
(function (b) {
    b.fn.responses = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            var d = b(this).addClass("response-table fullWidth textSelect").attr("cellspacing", 0).attr("cellpadding", 0).get(0);
            this.eventBus = c ? c : new b.ObjectPlanet.EventBus();
            this.responses = [];
            this.count = 0;
            this.pageSize = 500;
            this.pageLast = 0;
            b(this).bind("mouseover", function (g) {
                var f = b(d).find("tr[responseId=" + b(g.target).closest("tr").attr("responseId") + "]");
                var e = f.eq(0).find(".delete-button").get(0);
                if (e != null) {
                    b(e).css("visibility", "visible").deleteButton("paint")
                }
            }).bind("mouseout", function (f) {
                var e = b(d).find("tr[responseId=" + b(f.target).closest("tr").attr("responseId") + "]");
                e.eq(0).find(".delete-button").css("visibility", "hidden")
            });
            b(this).bind("click", function (g) {
                var f = b(g.target).hasClass("delete-button") ? g.target : g.target.parentNode;
                var e = b(g.target).closest("tr").attr("responseId");
                if (b(f).hasClass("delete-button") && f.popdown == null) {
                    b(f).popdown({
                        align: "left",
                        standalone: true,
                        offsetX: 4,
                        offsetY: 1,
                        items: [{
                            label: "Delete response",
                            callback: function () {
                                a.deleteResponse.apply(d, [e])
                            }
                        }]
                    }).popdown("showMenu", g)
                }
            });
            if (this.eventBus) {
                this.eventBus.listen("survey.saved survey.loaded", function (e) {
                    if (e && e._id && e._id.$oid) {
                        d.surveyId = e._id.$oid
                    }
                }).listen("survey.new", function () {
                    delete d.surveyId;
                    a.setResponses.apply(d)
                }).listen("response.deleteAll", function () {
                    a.deleteAll.apply(d)
                })
            }
        },
        setQuestions: function (c) {
            this.questions = c;
            delete this.questionFilter
        },
        setResponses: function (c) {
            b(this).html("").prop("responses", []).prop("count", 0).prop("pageLast", c ? c.length - 1 : 0).responses("add", c)
        },
        setFilter: function (c, d) {
            this.questionFilter = c;
            a.setResponses.apply(this, [d])
        },
        add: function (j) {
            if (this.responses && j && this.responses.length == 0 && j.length > 0) {
                this.pageLast = j.length - 1
            }
            var h = [0];
            for (var e = 0, d = "", c = 0, g = 0; j && e < j.length; e++) {
                var f = j.length + this.count - e;
                if (c < this.pageSize) {
                    g++
                }
                if (this.compactMode && c < this.pageSize) {
                    d += a.createCompactAnswerMarkup.apply(this, [j[e], f % 2 == 0, f]);
                    c++
                } else {
                    if (c < this.pageSize) {
                        d += a.createAnswerMarkup.apply(this, [j[e], f % 2 == 0, f, h]);
                        c += h[0] + 1
                    }
                } if (c < this.pageSize && this.pageLast > 0) {
                    this.pageLast--
                }
                this.responses[this.count + e] = j[j.length - e - 1]
            }
            this.count += e;
            if (c > this.pageSize) {
                b(this).prop("pageLast", this.responses.length - g).html(d)
            } else {
                b(this).prepend(d)
            }
        },
        addPage: function () {
            if (this.pageLast == 0) {
                return
            }
            var g = [0];
            for (var e = this.pageLast - 1, d = "", c = 0; e >= 0 && c < this.pageSize; e--) {
                var f = e + 1;
                if (this.compactMode) {
                    d += a.createCompactAnswerMarkup.apply(this, [this.responses[e], f % 2 == 0, f]);
                    c++
                } else {
                    d += a.createAnswerMarkup.apply(this, [this.responses[e], f % 2 == 0, f, g]);
                    c += g[0] + 1
                }
                this.pageLast--
            }
            b(this).append(d)
        },
        showCompact: function (c) {
            this.compactMode = c;
            a.setResponses.apply(this, [this.responses.reverse()])
        },
        deleteResponse: function (d) {
            var c = this;
            b.serverRequest({
                action: "response.delete",
                responseId: d
            }, function (e) {
                if (e.resultCode == b.ObjectPlanet.ResultCode.OK && e.data) {
                    a.removeResponse.apply(c, [d]);
                    c.eventBus.trigger("response.deleted", {
                        responseCount: c.count,
                        surveyId: c.surveyId
                    })
                }
            })
        },
        removeResponse: function (d) {
            for (var c = 0; c < this.responses.length; c++) {
                if (this.responses[c]._id.$oid == d) {
                    b(this).find("tr[responseId=" + d + "]").remove();
                    this.responses.splice(c, 1);
                    a.setResponses.apply(this, [this.responses.reverse()]);
                    return
                }
            }
        },
        deleteAll: function () {
            var c = this;
            if (this.surveyId != null) {
                b.serverRequest({
                    action: "response.deleteAll",
                    surveyId: this.surveyId
                }, function (d) {
                    if (d.resultCode == b.ObjectPlanet.ResultCode.OK && d.data) {
                        a.setResponses.apply(c);
                        c.eventBus.trigger("response.deleted", {
                            responseCount: 0,
                            surveyId: c.surveyId
                        })
                    }
                })
            }
        },
        createAnswerMarkup: function (e, m, d, h) {
            var k = e._id.$oid;
            var g = m ? "table-zebra" : "";
            var n = m ? " answer-odd" : " answer";
            var c = m ? " bottom-odd" : " bottom";
            var l = '<tr class="' + g + '" responseId="' + k + '"><td class="date ' + c + '">(' + d + ") " + b.ObjectPlanet.dateStr(e.submitted) + "</td>";
            l += '<td class="' + n + c + ' right"><span class="delete-button" responseId="' + k + '" style="visibility: hidden;"></span></td></tr>';
            if (h != null && h.length == 1) {
                h[0] = 0
            }
            for (var f = 0; e && e.answers && f < e.answers.length; f++) {
                if (this.questionFilter == null || (f < this.questionFilter.length && this.questionFilter[f].on == true)) {
                    var j = f == e.answers.length - 1 ? "last" : "";
                    l += '<tr class="' + g + '" responseId="' + k + '">';
                    l += '<td class="' + j + c + ' question">' + (f + 1) + ". ";
                    l += this.questions[f] != null && this.questions[f].questionText != null ? this.questions[f].questionText.def : "";
                    l += "</td>";
                    l += '<td class="' + j + n + c + '">';
                    l += a.answerMarkup.apply(this, [f, e.answers[f]]);
                    l += "</td></tr>";
                    if (h != null && h.length == 1) {
                        h[0]++
                    }
                }
            }
            return l
        },
        createCompactAnswerMarkup: function (e, j, h) {
            var g = e._id.$oid;
            var d = j ? "odd" : "even";
            var c = '<tr class="' + d + '" responseId="' + g + '">';
            c += '<td class="nowrap">(' + h + ") " + b.ObjectPlanet.dateStr(e.submitted) + '</td><td class="fullWidth">';
            for (var f = 0; e && e.answers && f < e.answers.length; f++) {
                if (this.questionFilter == null || (f < this.questionFilter.length && this.questionFilter[f].on == true)) {
                    c += a.answerMarkup.apply(this, [f, e.answers[f]]) + ", "
                }
            }
            if (b.ObjectPlanet.stringEndsWith(c, ", ")) {
                c = c.substring(0, c.length - 2)
            }
            c += '<td><span class="delete-button" responseId="' + g + '" style="visibility: hidden;"></span></td></tr>';
            return c + "</td></tr>"
        },
        answerMarkup: function (g, l) {
            var h = "";
            var c = this.questions[g];
            if (c != null && l.rating != null && (this.questionFilter == null || this.questionFilter[g].rating == null || this.questionFilter[g].rating == true)) {
                if (l.rating.value == "na") {
                    h += c.rating && c.rating.naLabel ? c.rating.naLabel.def : "na"
                }
                if (l.rating.value > 0) {
                    var j = c.rating != null && c.rating.maxRating != null ? c.rating.maxRating : 5;
                    h += l.rating.value + "/" + j
                }
            } else {
                if (l.choice != null && (this.questionFilter == null || this.questionFilter[g].choice == null || this.questionFilter[g].choice == true)) {
                    for (var d = 0, f = ""; l.choice.options && d < l.choice.options.length; d++) {
                        if (l.choice.options[d] != null && l.choice.options[d].checked == true) {
                            if (c && c.choice && c.choice.options && d < c.choice.options.length && c.choice.options[d] != null) {
                                f += b.ObjectPlanet.decode(c.choice.options[d].def)
                            }
                            if (l.choice.options[d].value != null) {
                                var k = l.choice.options[d].value.replace(/</g, "&lt;").replace(/>/g, "&gt;");
                                f += " (" + b.ObjectPlanet.decode(k) + ")"
                            }
                            f += ", "
                        }
                    }
                    if (f.length > 0) {
                        f = f.substring(0, f.length - 2)
                    }
                    h += f
                } else {
                    if (l.fields != null) {
                        for (var d = 0, e = ""; d < l.fields.length; d++) {
                            if (this.questionFilter == null || (this.questionFilter[g] != null && this.questionFilter[g].fields != null && this.questionFilter[g].fields[d] == true)) {
                                if (l.fields[d] != null && l.fields[d].value != null && b.trim(l.fields[d].value) != "") {
                                    if (typeof l.fields[d].value == "string") {
                                        e += b.ObjectPlanet.decode(l.fields[d].value.replace(/</g, "&lt;").replace(/>/g, "&gt;")) + ", "
                                    } else {
                                        e += b.ObjectPlanet.decode(l.fields[d].value) + ", "
                                    }
                                }
                            }
                        }
                        if (e.length > 0) {
                            e = e.substring(0, e.length - 2)
                        }
                        h += e
                    } else {
                        if (l.dropdown != null && (this.questionFilter == null || this.questionFilter[g].dropdown == null || this.questionFilter[g].dropdown == true)) {
                            for (var d = 0, f = ""; l.dropdown.options instanceof Array && d < l.dropdown.options.length; d++) {
                                if (l.dropdown.options[d] != null && l.dropdown.options[d].value != null) {
                                    f += b.ObjectPlanet.decode(l.dropdown.options[d].value.replace(/</g, "&lt;").replace(/>/g, "&gt;"));
                                    f += ", "
                                }
                            }
                            if (f.length > 0) {
                                f = f.substring(0, f.length - 2)
                            }
                            h += f
                        }
                    }
                }
            } if ((this.questionFilter == null || this.questionFilter[g].comment == true) && l.comment && l.comment.value != null && b.trim(l.comment.value).length > 0) {
                if (h.length > 0) {
                    h += ", "
                }
                h += b.ObjectPlanet.decode(l.comment.value.replace(/</g, "&lt;").replace(/>/g, "&gt;"))
            }
            return h
        }
    }
})(jQuery);
(function (b) {
    b.fn.exportModule = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c, e) {
            var d = b(this).addClass("export-module").prop("data", e).get(0);
            this.eventBus = c ? c : new b.ObjectPlanet.EventBus();
            this.text = b('<textarea class="data borderBox" wrap="off"></textarea>').appendTo(this).get(0);
            this.eventBus.listen("responses.loaded", function () {
                if (b(d).is(":visible")) {
                    a.set.apply(d)
                }
            })
        },
        set: function (c) {
            if (c != null) {
                this.questionFilter = c
            }
            if (this.data && this.data.survey != null && this.data.responses != null) {
                var d = this.data.filtered != null ? this.data.filtered : this.data.responses;
                b(this.text).val(ObjectPlanet.report.exportCSV(this.data.survey.questions, d, {
                    questionFilter: this.questionFilter
                }))
            } else {
                b(this.text).val("")
            }
            b(this.text).removeAttr("disabled").removeClass("noSelect");
            if (b.ObjectPlanet.hasPremiumFeatureAccess("dataExport") == false) {
                b(this.text).attr("disabled", "disabled").addClass("noSelect")
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.surveyReport = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (h, c, f) {
            b(this).addClass("survey-report").html("");
            this.questions = [];
            this.report = c;
            this.survey = h;
            if (h == null || c == null || c.responseCount == 0) {
                return
            }
            this.header = b(a.reportHeader.apply(this, [h, f])).appendTo(this).get(0);
            this.header.questionCount = b(this.header).find("tr:eq(4) td:eq(1)").get(0);
            this.header.responseCount = b(this.header).find("tr:eq(5) td:eq(1)").get(0);
            for (var g = 0; h && c && c.answers && g < c.answers.length && h.questions && g < h.questions.length; g++) {
                c.answers[g].questionText = (g + 1) + ". " + h.questions[g].questionText.def;
                if (h.questions[g].rating) {
                    if (h.questions[g].rating.labels) {
                        c.answers[g].rating.labels = h.questions[g].rating.labels.slice()
                    }
                    for (var e = 0; e < h.questions[g].rating.maxRating; e++) {
                        if (c.answers[g].rating.labels && e < c.answers[g].rating.labels.length) {
                            var d = c.answers[g].rating.labels[e];
                            if (d != null) {
                                c.answers[g].rating.labels[e] = {
                                    def: d.def
                                }
                            }
                        }
                    }
                    c.answers[g].rating.naLabel = (h.questions[g].rating.naLabel ? h.questions[g].rating.naLabel.def : "N/A")
                }
                if (h.questions[g].choice != null && h.questions[g].choice.options != null && c.answers[g] != null && c.answers[g].choice != null) {
                    c.answers[g].choice.labels = h.questions[g].choice.options.slice()
                }
                if (h.questions[g].fields && c.answers[g].fields) {
                    for (var e = 0; e < h.questions[g].fields.length; e++) {
                        c.answers[g].fields[e].label = h.questions[g].fields[e].label.def
                    }
                }
                this.questions[g] = b("<div></div>").questionReport(c.answers[g], {
                    responseCount: c.responseCount,
                    question: h.questions[g]
                }).appendTo(this).get(0)
            }
        },
        reportHeader: function (f, c) {
            var g = f && f.surveySetup ? new Date(f.surveySetup.start).toLocaleDateString() + " at " + new Date(f.surveySetup.start).toLocaleTimeString() : "";
            var d = f && f.surveySetup ? new Date(f.surveySetup.stop).toLocaleDateString() + " at " + new Date(f.surveySetup.stop).toLocaleTimeString() : "";
            var e = c && c.responseCount != null ? c.responseCount : "";
            if (c && c.filteredCount < c.responseCount) {
                e = c.filteredCount + " of " + e
            }
            this.generated = new Date();
            return b('<table class="report-header fullWidth textSelect"><tr><td>Survey:</td><td class="name">' + (f && f.surveyName ? f.surveyName : "") + "</td></tr><tr><td>Start:</td><td>" + g + "</td></tr><tr><td>Stop:</td><td>" + d + "</td></tr><tr><td>Generated:</td><td>" + this.generated.toLocaleDateString() + " at " + this.generated.toLocaleTimeString() + "</td></tr><tr><td>Questions:</td><td>" + (f && f.questions ? f.questions.length : 0) + "</td></tr><tr><td>Responses:</td><td>" + e + "</td></tr></table>").get(0)
        },
        setComments: function (d, e) {
            this.comments = [];
            this.responses = d;
            for (var f = 0; d != null && f < d.length; f++) {
                for (var g = 0; d[f].answers != null && g < d[f].answers.length; g++) {
                    if (this.comments[g] == null) {
                        this.comments[g] = []
                    }
                    this.comments[g].push(d[f].answers[g])
                }
            }
            for (var c = 0; c < this.questions.length; c++) {
                b(this.questions[c]).questionReport("setComments", this.comments[c], e instanceof Array && c < e.length ? e[c] : undefined)
            }
        },
        removeComments: function () {
            delete this.comments;
            for (var c = 0; c < this.questions.length; c++) {
                b(this.questions[c]).questionReport("removeComments")
            }
        },
        repaint: function () {
            for (var c = 0; c < this.questions.length; c++) {
                b(this.questions[c]).questionReport("repaint")
            }
        },
        update: function (c, e) {
            if (e && (e.responseCount != null || e.filteredCount != null)) {
                var g = e.responseCount != null ? e.responseCount : "";
                if (e.filteredCount != null && e.responseCount != null && e.filteredCount < e.responseCount) {
                    g = e.filteredCount + " of " + g
                }
                if (g != "") {
                    b(this.header.responseCount).text(g)
                }
            }
            for (var f = 0; c && c.answers && f < c.answers.length && this.questions && f < this.questions.length; f++) {
                if (c.answers[f].rating && c.answers[f].rating.values) {
                    this.report.answers[f].rating.values = c.answers[f].rating.values
                }
                if (c.answers[f].rating && c.answers[f].rating.na) {
                    this.report.answers[f].rating.na = c.answers[f].rating.na
                }
                if (c.answers[f].rating && c.answers[f].rating.noAnswer != null) {
                    this.report.answers[f].rating.noAnswer = c.answers[f].rating.noAnswer
                }
                if (c.answers[f].dropdown) {
                    this.report.answers[f].dropdown = c.answers[f].dropdown
                }
                if (c.answers[f].choice) {
                    this.report.answers[f].choice.values = c.answers[f].choice.values
                }
                if (c.answers[f].choice != null && c.answers[f].choice.noAnswer && this.report.answers[f].choice != null) {
                    this.report.answers[f].choice.noAnswer = c.answers[f].choice.noAnswer
                }
                if (c.answers[f].fields) {
                    for (var d = 0; d < c.answers[f].fields.length; d++) {
                        c.answers[f].fields[d].label = this.report.answers[f].fields[d].label;
                        this.report.answers[f].fields[d] = c.answers[f].fields[d]
                    }
                }
                b(this.questions[f]).questionReport("repaint", c.answers[f], {
                    responseCount: c.responseCount,
                    question: this.questions[f]
                })
            }
        },
        showChart: function (d) {
            for (var c = 0; c < this.questions.length; c++) {
                b(this.questions[c]).questionReport("showChart", d)
            }
        },
        clear: function () {
            b(this.header).remove();
            b(this).find("div.report-question").remove();
            this.needsUpdate = false;
            this.questions = []
        },
        copy: function (d) {
            var e = b("<div></div>").get(0);
            e.report = this.report;
            e.header = b(this.header).clone().appendTo(e).get(0);
            e.questions = [];
            for (var c = 0; c < this.questions.length; c++) {
                e.questions[c] = b("<div></div>").questionReport(e.report.answers[c]).appendTo(e).get(0);
                b(e.questions[c]).css("display", b(this.questions[c]).css("display"));
                if (this.comments && this.comments[c]) {
                    b(e.questions[c]).questionReport("setComments", this.comments[c], d != null ? d[c] : undefined)
                }
                b(e.questions[c]).questionReport("showChart", this.questions[c].currentChart)
            }
            return e
        },
        showIcons: function (c) {
            for (var d = 0; d < this.questions.length; d++) {
                b(this.questions[d]).questionReport("showIcons", c === true)
            }
        },
        setFilter: function (f, h, d) {
            if (f == null) {
                b(this.questions).show().find("div").show()
            }
            for (var e = 0; f instanceof Array && e < f.length; e++) {
                b(this.questions[e]).toggle(f[e] == null || f[e].on == true);
                if (this.questions[e] != null && this.questions[e].fields != null && this.questions[e].fields.charts instanceof Array) {
                    for (var c = 0; c < this.questions[e].fields.charts.length; c++) {
                        b(this.questions[e].fields.charts[c]).toggle(f[e] && f[e].fields instanceof Array && f[e].fields[c] == true)
                    }
                }
            }
            for (var e = 0, g = 0; e < this.questions.length; e++) {
                g += f == null || f[e] == null || f[e].on == true
            }
            if (this.header != null) {
                b(this.header.questionCount).text(g < this.questions.length ? (g + " of " + this.questions.length) : this.questions.length)
            }
            if (this.header && d && d.responseCount != null && d.filteredCount != null) {
                g = d.filteredCount < d.responseCount ? (d.filteredCount + " of " + d.responseCount) : d.responseCount;
                b(this.header.responseCount).text(g)
            }
            if (h != null && this.survey != null) {
                a.update.apply(this, [b.ObjectPlanet.getReport(this.survey.questions, h)])
            }
            if (this.comments != null && h != null || this.responses != null && this.comments != null) {
                a.setComments.apply(this, [h ? h : this.responses, f])
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.questionReport = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (e, d) {
            var c = b(this).prop("question", d && d.question ? d.question : null).get(0);
            this.questionText = b(this).addClass("report-question").html('<div class="question-text">' + e.questionText + "</div>").find(".question-text").get(0);
            if (e.rating) {
                this.rating = b("<div></div>").ratingReport(e.rating).appendTo(this).get(0)
            }
            if (e.choice) {
                this.choice = b("<div></div>").choiceReport(e.choice, d).appendTo(this).get(0)
            }
            if (e.dropdown) {
                this.dropdown = b("<div></div>").dropdownReport(e.dropdown, d).appendTo(this).get(0)
            }
            if (e.fields) {
                this.fields = b("<div></div>").fieldReport(e.fields).appendTo(this).get(0)
            }
            this.currentChart = "pie";
            if (b.fn.questionReport.pieIconDataColor == null) {
                var f = b("<canvas></canvas>").css({
                    width: "17px",
                    height: "17px"
                }).pieChart({
                    legendOn: false,
                    values: [{
                        value: 1
                    }, {
                        value: 1
                    }, {
                        value: 1
                    }]
                }).pieChart("repaint").get(0);
                b.fn.questionReport.pieIconDataColor = f.getContext("2d").getImageData(0, 0, 17, 17);
                b.fn.questionReport.pieIconDataGray = f.getContext("2d").getImageData(0, 0, 17, 17);
                b.ObjectPlanet.blackWhite(b.fn.questionReport.pieIconDataGray.data)
            }
            if (b.fn.questionReport.barIconDataColor == null) {
                var g = b("<canvas></canvas>").css({
                    width: "16px",
                    height: "16px"
                }).barChart({
                    valuesOn: false,
                    barSpace: 3,
                    values: [{
                        value: 10
                    }, {
                        value: 5,
                        color: b.fn.ratingReport.NA_COLOR
                    }]
                }).barChart("repaint").get(0);
                b.fn.questionReport.barIconDataColor = g.getContext("2d").getImageData(0, 0, 16, 16);
                b.fn.questionReport.barIconDataGray = g.getContext("2d").getImageData(0, 0, 16, 16);
                b.ObjectPlanet.blackWhite(b.fn.questionReport.barIconDataGray.data)
            }
            if (e.choice != null || e.dropdown != null) {
                this.pieIcon = b("<canvas></canvas>").css({
                    width: "17px",
                    height: "17px",
                    position: "absolute",
                    bottom: "5px",
                    right: "27px",
                    cursor: "pointer"
                }).appendTo(this).bind("click", function () {
                    a.showChart.apply(c, ["pie"])
                }).get(0);
                this.pieIcon.width = this.pieIcon.height = 17;
                this.pieIcon.getContext("2d").putImageData(b.fn.questionReport.pieIconDataColor, 0, 0);
                this.barIcon = b("<canvas></canvas>").css({
                    width: "16px",
                    height: "16px",
                    position: "absolute",
                    bottom: "5px",
                    right: "4px",
                    cursor: "pointer"
                }).appendTo(this).bind("click", function () {
                    a.showChart.apply(c, ["bar"])
                }).get(0);
                this.barIcon.width = this.barIcon.height = 16;
                this.barIcon.getContext("2d").putImageData(b.fn.questionReport.barIconDataGray, 0, 0)
            }
        },
        setComments: function (p, e) {
            if (this.commentContainer == null) {
                this.commentContainer = b('<div class="commentContainer textSelect"></div>').appendTo(this).get(0)
            }
            this.commentContainer.comments = [];
            for (var h = 0, c = 0; p != null && h < p.length; h++) {
                var m = "";
                var l = (c % 2 == 0 ? ' class="table-zebra"' : "");
                if (p[h] && p[h].choice) {
                    var q = p[h].choice.options;
                    var k = q != null && q.length > 0 ? q[q.length - 1].value : "";
                    if (k != null && k != "") {
                        var o = b.ObjectPlanet.decode(k);
                        if (o) {
                            o = o.replace(/</g, "&lt;").replace(/>/g, "&gt;")
                        }
                        m += '<span style="font-weight: bold;">Choice:</span> ' + o + "<br>"
                    }
                }
                if (p[h] && p[h].fields != null) {
                    for (var g = 0; g < p[h].fields.length; g++) {
                        var n = p[h].fields[g].value;
                        if (n != null && n != "" && (e == null || e.fields == null || e.fields[g] == true)) {
                            var d = this.fields != null ? b(this.fields.charts[g].label).text() : "";
                            if (d != null && d.length > 0 && d.charAt(d.length - 1) != ":") {
                                d += ":"
                            }
                            var o = b.ObjectPlanet.decode(n);
                            if (o) {
                                o = o.replace(/</g, "&lt;").replace(/>/g, "&gt;")
                            }
                            m += '<span style="font-weight: bold;">' + d + "</span> " + o + "<br>"
                        }
                    }
                }
                if (p[h] && p[h].comment && p[h].comment.value != null && p[h].comment.value != "") {
                    if (e == null || e.comment != false) {
                        var f = "Comment:";
                        if (this.question && this.question.comment && this.question.comment.label && this.question.comment.label.def != null && this.question.comment.label.def != "") {
                            f = this.question.comment.label.def.replace(/&lt;/g, "<")
                        }
                        var o = b.ObjectPlanet.decode(p[h].comment.value);
                        if (o) {
                            o = o.replace(/</g, "&lt;").replace(/>/g, "&gt;")
                        }
                        m += '<span style="font-weight: bold;">' + f + "</span> " + o + "<br>"
                    }
                }
                if (m != "") {
                    this.commentContainer.comments.push(b("<div" + l + ">" + m + "</div>").get(0));
                    c++
                }
            }
            b(this.commentContainer).html("").append(this.commentContainer.comments)
        },
        removeComments: function () {
            b(this.commentContainer).remove();
            this.commentContainer = null
        },
        repaint: function (d, c) {
            if (this.rating) {
                b(this.rating).ratingReport("repaint", d ? d.rating : null)
            }
            if (this.choice) {
                b(this.choice).choiceReport("repaint", d ? d.choice : null, c)
            }
            if (this.dropdown) {
                b(this.dropdown).dropdownReport("repaint", d ? d.dropdown : null, c)
            }
            if (this.fields) {
                b(this.fields).fieldReport("repaint", d ? d.fields : null)
            }
        },
        showChart: function (c) {
            if (this.currentChart == c) {
                return
            }
            this.currentChart = (c ? c : "pie");
            if (this.choice) {
                b(this.choice).choiceReport("showChart", this.currentChart)
            }
            if (this.dropdown) {
                b(this.dropdown).dropdownReport("showChart", this.currentChart)
            }
            if (this.choice || this.dropdown) {
                a.setIconState.apply(this, [this.currentChart])
            }
        },
        setIconState: function (c) {
            if (this.pieIcon) {
                this.pieIcon.getContext("2d").putImageData(c == "pie" ? b.fn.questionReport.pieIconDataColor : b.fn.questionReport.pieIconDataGray, 0, 0)
            }
            if (this.barIcon) {
                this.barIcon.getContext("2d").putImageData(c == "bar" ? b.fn.questionReport.barIconDataColor : b.fn.questionReport.barIconDataGray, 0, 0)
            }
        },
        showIcons: function (c) {
            b(this.pieIcon).add(this.barIcon).toggle(c === true)
        }
    }
})(jQuery);
(function (b) {
    b.fn.ratingReport = function () {
        return this.opWidget(a, arguments)
    };
    b.fn.ratingReport.NA_COLOR = "e28956";
    b.fn.ratingReport.NO_ANSWER_COLOR = "909bad";
    var a = {
        init: function (d) {
            b(this).addClass("rating-report");
            var c = a.chartData.apply(this, [d]);
            if (b(this).height() == 0) {
                b(this).height(200)
            }
            this.chart = b("<canvas></canvas>").css({
                width: "100%",
                height: "100%"
            }).appendTo(this).barChart(c).get(0)
        },
        chartData: function (d) {
            var e = d && d.values ? d.values.length : d && d.labels ? d.labels : 0;
            this.data = this.data != null ? this.data : {
                values: []
            };
            for (var c = 0; c < e; c++) {
                if (this.data.values[c] == null) {
                    this.data.values[c] = {}
                }
                if (d.labels && c < d.labels.length && d.labels[c] != null) {
                    this.data.values[c].label = d.labels[c].def;
                    if (c == 0 && d.labels) {
                        this.data.values[c].label += " 1"
                    }
                    if (c == e - 1 && d.labels) {
                        this.data.values[c].label += " " + (c + 1)
                    }
                } else {
                    if (this.data.values[c].label == null) {
                        this.data.values[c].label = (c + 1)
                    }
                }
            }
            for (var c = 0; d && d.values && c < d.values.length; c++) {
                this.data.values[c].value = d.values[c]
            }
            if (d && d.na != null) {
                this.data.values[e] = {
                    label: d.naLabel ? b.trim(d.naLabel) : this.data.values[e] && this.data.values[e].label ? this.data.values[e].label : "N/A"
                };
                this.data.values[e].color = b.fn.ratingReport.NA_COLOR;
                this.data.values[e].noPercent = true;
                this.data.values[e++].value = d.na
            }
            if (d && d.noAnswer > 0 || this.hasNoAnswerBar) {
                this.data.values[e] = {
                    label: "No answer"
                };
                this.data.values[e].color = b.fn.ratingReport.NO_ANSWER_COLOR;
                this.data.values[e].noPercent = true;
                this.data.values[e++].value = d.noAnswer;
                this.hasNoAnswerBar = true
            }
            this.data.orientation = "vertical";
            this.data.maxBarSize = 50;
            return this.data
        },
        repaint: function (c) {
            b(this.chart).barChart("repaint", c != null ? a.chartData.apply(this, [c]) : null)
        }
    }
})(jQuery);
(function (b) {
    b.fn.choiceReport = function () {
        return this.opWidget(a, arguments)
    };
    b.fn.choiceReport.NO_ANSWER_COLOR = b.fn.ratingReport.NO_ANSWER_COLOR;
    var a = {
        init: function (d, c) {
            b(this).addClass("choice-report").css("position", "relative");
            if (c && c.responseCount != null) {
                this.responseCount = c.responseCount
            }
            if (c && c.question && c.question.choice != null && c.question.choice.multipleOn == true) {
                this.multipleOn = true
            }
            var e = a.chartData.apply(this, [d]);
            this.bar = b("<canvas></canvas>").hide().css({
                width: "100%",
                height: "100%"
            }).appendTo(this).barChart(e).get(0);
            this.pie = b("<canvas></canvas>").css({
                width: "100%",
                height: "100%"
            }).appendTo(this).pieChart(e).get(0);
            if (b(this).height() == 0) {
                b(this).height(Math.max(180, b(this.pie).pieChart("nonZero") * 18 + 10))
            }
        },
        chartData: function (e) {
            var f = e && e.values ? e.values.length : e && e.labels ? e.labels.length : 0;
            this.data = this.data != null ? this.data : {
                values: []
            };
            for (var d = 0; d < f; d++) {
                if (this.data.values[d] == null) {
                    this.data.values[d] = {}
                }
                if (e.labels && d < e.labels.length && e.labels[d] != null) {
                    this.data.values[d].label = e.labels[d].def
                } else {
                    if (this.data.values[d].label == null) {
                        this.data.values[d].label = ""
                    }
                }
            }
            for (var d = 0; e && e.values && d < e.values.length; d++) {
                this.data.values[d].value = e.values[d]
            }
            var c = {
                values: []
            };
            for (var d = 0; d < this.data.values.length; d++) {
                if (!this.data.values[d].na) {
                    c.values[d] = this.data.values[d]
                }
            }
            c.values.sort(function (h, g) {
                return h.value < g.value ? 1 : h.value > g.value ? -1 : 0
            });
            if (e && e.noAnswer) {
                this.data.values[f] = c.values[f] = {
                    label: "No answer",
                    na: true
                };
                this.data.values[f].value = c.values[f].value = e.noAnswer;
                this.data.values[f].color = b.fn.choiceReport.NO_ANSWER_COLOR
            }
            c.showZeroBars = false;
            c.maxBarSize = 30;
            if (this.multipleOn == true && typeof this.responseCount == "number") {
                c.multipleOn = true;
                c.responseCount = this.responseCount
            }
            return c
        },
        repaint: function (d, c) {
            if (c && typeof c.responseCount == "number") {
                this.responseCount = c.responseCount
            }
            var e = d != null ? a.chartData.apply(this, [d]) : null;
            b(this.bar).barChart("repaint", e);
            b(this.pie).pieChart("repaint", e)
        },
        showChart: function (c) {
            b(this.pie).toggle(c == "pie");
            b(this.bar).toggle(c == "bar");
            if (c == "pie") {
                b(this.pie).pieChart("repaint")
            }
            if (c == "bar") {
                b(this.bar).barChart("repaint")
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.dropdownReport = function () {
        return this.opWidget(a, arguments)
    };
    b.fn.dropdownReport.NO_ANSWER_COLOR = b.fn.ratingReport.NO_ANSWER_COLOR;
    var a = {
        init: function (d, c) {
            b(this).addClass("dropdown-report");
            if (c && c.responseCount != null) {
                this.responseCount = c.responseCount
            }
            if (c && c.question && c.question.dropdown != null && c.question.dropdown.multipleOn == true) {
                this.multipleOn = true
            }
            var e = a.chartData.apply(this, [d]);
            this.bar = b("<canvas></canvas>").hide().css({
                width: "100%",
                height: "100%"
            }).appendTo(this).barChart(e).get(0);
            this.pie = b("<canvas></canvas>").css({
                width: "100%",
                height: "100%"
            }).appendTo(this).pieChart(e).get(0);
            if (b(this).height() == 0) {
                b(this).height(Math.max(180, this.pie.values.length * 18 + 10))
            }
        },
        chartData: function (c) {
            var e = {
                values: []
            };
            for (prop in c.values) {
                var d = c.values[prop];
                prop = prop.replace(/&#46;/g, ".");
                e.values.push({
                    value: d,
                    label: prop
                })
            }
            e.values.sort(function (g, f) {
                return g.value < f.value ? 1 : g.value > f.value ? -1 : 0
            });
            if (c && c.noAnswer) {
                e.values.push({
                    value: c.noAnswer,
                    label: "No answer",
                    color: b.fn.dropdownReport.NO_ANSWER_COLOR
                })
            }
            e.showZeroBars = false;
            e.maxBarSize = 30;
            if (this.multipleOn == true && typeof this.responseCount == "number") {
                e.multipleOn = true;
                e.responseCount = this.responseCount
            }
            return e
        },
        repaint: function (d, c) {
            if (c && typeof c.responseCount == "number") {
                this.responseCount = c.responseCount
            }
            var e = d != null ? a.chartData.apply(this, [d]) : null;
            b(this.bar).barChart("repaint", e);
            b(this.pie).pieChart("repaint", e)
        },
        showChart: function (c) {
            b(this.pie).toggle(c == "pie");
            b(this.bar).toggle(c == "bar");
            if (c == "pie") {
                b(this.pie).pieChart("repaint")
            }
            if (c == "bar") {
                b(this.bar).barChart("repaint")
            }
        }
    }
})(jQuery);
(function (d) {
    d.fn.fieldReport = function () {
        return this.opWidget(b, arguments)
    };
    d.fn.fieldReport.NO_ANSWER_COLOR = d.fn.ratingReport.NO_ANSWER_COLOR;
    var b = {
        init: function (k) {
            d(this).addClass("field-report");
            this.charts = [];
            var e = 0;
            var f = 0;
            for (var j = 0; k && j < k.length; j++) {
                this.charts[j] = d('<div style="width: 100%; position: relative;"><canvas style="width: 100%; height: 100%; "></canvas></div>').get(0);
                this.charts[j].chart = d(this.charts[j]).find("canvas").get(0);
                if (k[j] && k[j].numeric) {
                    d(this.charts[j].chart).barChart({
                        values: c(k[j].numeric),
                        noPercent: true
                    })
                } else {
                    if (k[j] && k[j].text) {
                        d(this.charts[j].chart).barChart({
                            values: a(k[j].text),
                            noPercent: true
                        })
                    }
                }
                f += this.charts[j].chart.values.length;
                e += this.charts[j].chart.values.length * 25;
                if (k[j] && k[j].label != null) {
                    this.charts[j].label = d('<label class="field-name">' + k[j].label + "</label>").prependTo(this.charts[j]).get(0);
                    var l = this.charts[j].chart.values.length / (this.charts[j].chart.values.length + 1) * 100;
                    d(this.charts[j].chart).css("height", l + "%");
                    d(this.charts[j].label).css("height", (100 - l) + "%");
                    e += 25;
                    f++
                }
            }
            for (var j = 0; j < this.charts.length; j++) {
                var g = this.charts[j].label != null ? 1 : 0;
                d(this.charts[j]).css("height", (this.charts[j].chart.values.length + g) * 100 / f + "%")
            }
            if (d(this).height() == 0) {
                d(this).height(e)
            }
            d(this.charts).appendTo(this)
        },
        repaint: function (g) {
            for (var f = 0; f < this.charts.length; f++) {
                var e = null;
                if (g && g[f] && g[f].numeric) {
                    e = {
                        values: c(g[f].numeric)
                    }
                } else {
                    if (g && g[f] && g[f].text) {
                        e = {
                            values: a(g[f].text)
                        }
                    }
                }
                d(this.charts[f].chart).barChart("repaint", e)
            }
        }
    };
    var c = function (g) {
        var e = [];
        if (g) {
            e[0] = {
                value: g.max != null ? g.max : 0,
                label: "Max"
            };
            e[0].value = (e[0].value == Number.MIN_VALUE ? 0 : e[0].value);
            if (g.average != null) {
                e[1] = {
                    value: g.average,
                    label: "Average"
                }
            }
            if (g.min != null) {
                e[2] = {
                    value: g.min,
                    label: "Min"
                };
                e[2].value = (e[2].value == Number.MAX_VALUE ? 0 : e[2].value)
            }
            if (g.noAnswer > 0) {
                e.push({
                    value: g.noAnswer,
                    label: "No answer",
                    color: d.fn.fieldReport.NO_ANSWER_COLOR
                })
            }
            for (var f = 0; f < e.length; f++) {
                if (e[f] && e[f].value != null) {
                    e[f].value = Math.round(e[f].value * 100) / 100
                }
            }
        }
        return e
    };
    var a = function (f) {
        var e = [];
        if (f) {
            e[0] = {
                value: f.answers != null ? f.answers : 0,
                label: "Answers"
            };
            if (f.noAnswer > 0) {
                e[1] = {
                    value: f.noAnswer,
                    label: "No answer",
                    color: d.fn.fieldReport.NO_ANSWER_COLOR
                }
            }
        }
        return e
    }
})(jQuery);
(function (f) {
    f.fn.barChart = function () {
        return this.opWidget(a, arguments)
    };
    var b = ["e2cf56", "aee256", "68e256", "56e289", "56e2cf", "56aee2", "5668e2", "8a56e2", "cf56e2", "e256ae", "e25668", "e28956"];
    var c = b[5];
    var e = "12px Arial";
    var d = f.browser.webkit ? "bold 11px Arial" : e;
    var a = {
        init: function (g) {
            f(this).addClass("barChart");
            this.options = g ? g : {};
            if (this.options.valuesOn == null) {
                this.options.valuesOn = true
            }
            if (this.options.barSpace == null) {
                this.options.barSpace = 6
            }
            if (this.options.showZeroBars == null) {
                this.options.showZeroBars = true
            }
            this.values = g && g.values ? g.values : [];
            this.total = a.total.apply(this);
            this.valueLabels = [];
            this.percentLabels = []
        },
        total: function () {
            for (var g = 0, h = 0; g < this.values.length; g++) {
                if (this.values[g].value != null && this.values[g].noPercent != true) {
                    h += this.values[g].value != undefined ? this.values[g].value : 0
                }
            }
            return h
        },
        percentage: function (i) {
            var g = this.total > 0 ? (i / this.total) * 100 : 0;
            g = g.toFixed(2).replace(/0{0,2}$/, "");
            var h = g.charAt(g.length - 1);
            if (h == "." || h == ",") {
                g = g.substring(0, g.length - 1)
            }
            return g
        },
        repaint: function (h) {
            this.values = h && h.values ? h.values : this.values;
            this.width = f(this).width();
            this.height = f(this).height();
            this.pen = this.getContext("2d");
            this.pen.clearRect(0, 0, this.width, this.height);
            this.pen.font = e;
            this.total = a.total.apply(this);
            this.valueLabels = [];
            this.percentLabels = [];
            for (var g = 0; this.values != null && g < this.values.length; g++) {
                if (this.values[g] != null && typeof this.values[g].label == "string") {
                    this.values[g].label = this.values[g].label.replace(/&lt;/g, "<")
                }
            }
            if (this.options.orientation == "vertical") {
                a.paintColumns.apply(this)
            } else {
                a.paintLabels.apply(this);
                a.paintBars.apply(this)
            }
        },
        paintLabels: function () {
            this.maxLabel = 0;
            for (var l = 0; l < this.values.length; l++) {
                if ((this.options.showZeroBars == true || this.values[l].value > 0) && this.values[l] && this.values[l].label != null) {
                    this.maxLabel = Math.max(this.maxLabel, this.pen.measureText(this.values[l].label).width)
                }
            }
            var m = (this.options.showZeroBars == true ? this.values.length : a.nonZero.apply(this));
            var n = this.height / m;
            if (this.options.maxBarSize != null) {
                n = Math.min(n, this.options.maxBarSize)
            }
            var h = this.height / 2;
            var o = h - m / 2 * n + 4;
            var k = Math.min(this.maxLabel, this.width / 2 - 5);
            this.pen.fillStyle = "black";
            for (var l = 0; l < this.values.length; l++) {
                if (this.options.showZeroBars == true || this.values[l].value > 0) {
                    var j = this.values[l] != null ? this.values[l].label : "";
                    var g = Math.max(0, k - this.pen.measureText(j).width);
                    this.pen.fillText(j, g, o + n / 2);
                    o += n
                }
            }
        },
        paintBars: function () {
            for (var k = 0, l = 0, m = 0; k < this.values.length; k++) {
                var q = this.values[k].value != undefined ? this.values[k].value : 0;
                var t = a.percentage.apply(this, [q]);
                this.valueLabels[k] = q;
                if (this.options.noPercent != true) {
                    this.valueLabels[k] = q + " / " + t + "%"
                }
                if (this.values[k] != null) {
                    l = Math.max(l, this.values[k].value);
                    if (this.options.valuesOn == true) {
                        m = Math.max(m, this.pen.measureText(this.valueLabels[k]).width)
                    }
                }
            }
            l = Math.max(l, 10);
            var o = a.gradient.apply(this, [c]);
            var p = this.maxLabel > 0 ? Math.min(this.maxLabel + 5, this.width / 2) : 0;
            this.pen.clearRect(p - 5, 0, this.width - p + 5, this.height);
            var j = (this.options.showZeroBars == true ? this.values.length : a.nonZero.apply(this));
            var s = this.height / j;
            if (this.options.maxBarSize != null) {
                s = Math.min(s, this.options.maxBarSize)
            }
            var h = this.height / 2;
            var n = h - j / 2 * s + this.options.barSpace / 2;
            var g = this.width - p - m - (this.maxLabel > 0 ? 5 : 0);
            for (var k = 0; k < this.values.length; k++) {
                if (this.values[k] != null && (this.options.showZeroBars == true || this.values[k].value > 0)) {
                    var r = this.values[k].value / l;
                    this.pen.fillStyle = (this.values[k].color ? a.gradient.apply(this, [this.values[k].color]) : o);
                    this.pen.fillRect(p, n, r * g - 1, s - this.options.barSpace);
                    this.pen.beginPath();
                    this.pen.rect(p, n, r * g - 1, s - this.options.barSpace);
                    this.pen.strokeStyle = "#" + f.ObjectPlanet.color.adjust(this.values[k].color ? this.values[k].color : c, -30);
                    this.pen.closePath();
                    this.pen.stroke();
                    if (this.options.valuesOn == true) {
                        this.pen.fillStyle = "black";
                        this.pen.fillText(this.valueLabels[k], p + r * g - 1 + 5, n + s / 2 + 1)
                    }
                    n += s
                }
            }
        },
        paintColumns: function () {
            for (var B = 0, C = 0, v = 0; B < this.values.length; B++) {
                C = Math.max(C, this.values[B].value)
            }
            C = Math.max(C, 1);
            var h = a.gradient.apply(this, [c]);
            var q = 0;
            this.pen.font = d;
            for (var B = 0; B < this.values.length; B++) {
                if (this.values[B].label) {
                    q = Math.max(q, this.pen.measureText(this.values[B].label).width)
                }
            }
            var A = Math.sqrt(q * q / 2);
            var z = this.values && this.values[0] && this.values[0].label ? this.pen.measureText(this.values[0].label).width : 0;
            z = Math.sqrt(z * z / 2);
            var r = (this.width - 10) / this.values.length;
            r = this.options.maxBarSize != null ? this.options.maxBarSize : r;
            if (this.options.maxBarSize != null) {
                r = Math.min(r, this.options.maxBarSize)
            }
            var j = Math.max(0, z - r + 15);
            r = (this.width - 10 - j) / this.values.length;
            if (this.options.maxBarSize != null) {
                r = Math.min(r, this.options.maxBarSize);
                j = Math.max(j, z - r / 2)
            }
            if (!this.options.valuesOn && q == 0) {
                r = this.width / this.values.length
            }
            r = Math.min(r, (this.width - j - 3) / this.values.length);
            var t = f.ObjectPlanet.text.height("100", this);
            var D = (this.options.valuesOn || q > 0 ? this.height - t * 2 - A - 13 : this.height);
            var m = (this.options.valuesOn || q > 0 ? this.height - A - 11 : this.height);
            var n = (this.options.valuesOn || q > 0 ? 8 + j : 0);
            for (var B = 0; B < this.values.length; B++, n += r) {
                var s = this.values[B].value / C * D;
                this.pen.fillStyle = (this.values[B].color ? a.gradient.apply(this, [this.values[B].color]) : h);
                this.pen.fillRect(n, m - s, r - this.options.barSpace, s);
                this.pen.beginPath();
                this.pen.rect(n, m - s, r - this.options.barSpace, s);
                this.pen.strokeStyle = "#" + f.ObjectPlanet.color.adjust(this.values[B].color ? this.values[B].color : c, -30);
                this.pen.closePath();
                this.pen.stroke();
                if (this.options.valuesOn) {
                    var u = this.valueLabels[B] = this.values[B].value != undefined ? this.values[B].value : 0;
                    if (this.values[B].noPercent != true) {
                        this.percentLabels[B] = a.percentage.apply(this, [u]) + "%"
                    }
                    this.pen.font = e;
                    this.pen.fillStyle = "black";
                    var g = n + (r - this.options.barSpace) / 2;
                    var k = g - this.pen.measureText(this.valueLabels[B]).width / 2;
                    var l = m - s - 4 - (this.percentLabels[B] != null ? t : 0);
                    this.pen.fillText(this.valueLabels[B], k, l);
                    if (this.percentLabels[B] != null) {
                        var k = g - this.pen.measureText(this.percentLabels[B]).width / 2;
                        this.pen.fillText(this.percentLabels[B], k, m - s - 4)
                    }
                }
                if (this.values[B].label != null) {
                    this.pen.font = d;
                    var o = this.pen.measureText(this.values[B].label).width;
                    this.pen.save();
                    var p = Math.sqrt(o * o / 2);
                    this.pen.translate(g - p + t / 2, m + p + t - 2);
                    this.pen.rotate(Math.PI * -0.25);
                    this.pen.fillText(this.values[B].label, 0, 0);
                    this.pen.restore()
                }
            }
        },
        gradient: function (g) {
            var h = this.pen.createLinearGradient(0, 0, this.width, this.height);
            h.addColorStop(0, "#" + f.ObjectPlanet.color.adjust(g, -10));
            h.addColorStop(1, "#" + f.ObjectPlanet.color.adjust(g, 60));
            return h
        },
        nonZero: function () {
            for (var g = 0, h = 0; g < this.values.length; g++) {
                h += (this.values[g].value > 0 ? 1 : 0)
            }
            return h
        }
    }
})(jQuery);
(function (c) {
    c.fn.pieChart = function () {
        return this.opWidget(a, arguments)
    };
    var b = ["56e2cf", "56aee2", "5668e2", "8a56e2", "cf56e2", "e256ae", "e25668", "e28956", "e2cf56", "aee256", "68e256", "56e289"];
    var a = {
        init: function (d) {
            c(this).addClass("pieChart");
            this.options = d != null ? d : {};
            if (this.options.legendOn == null) {
                this.options.legendOn = true
            }
            this.values = d && d.values ? d.values : []
        },
        total: function () {
            for (var d = 0, e = 0; d < this.values.length; d++) {
                e += this.values[d].value != undefined ? this.values[d].value : 0
            }
            return e
        },
        nonZero: function () {
            for (var d = 0, e = 0; d < this.values.length; d++) {
                e += (this.values[d].value > 0 ? 1 : 0)
            }
            return e
        },
        repaint: function (e) {
            this.values = e && e.values ? e.values : this.values;
            this.total = a.total.apply(this);
            if (e && typeof e.responseCount == "number") {
                this.options.responseCount = e.responseCount
            }
            for (var d = 0; this.values != null && d < this.values.length; d++) {
                if (this.values[d] != null && typeof this.values[d].label == "string") {
                    this.values[d].label = this.values[d].label.replace(/&lt;/g, "<")
                }
            }
            this.width = c(this).width();
            this.height = c(this).height();
            this.pen = this.getContext("2d");
            this.pen.font = "12px Arial";
            this.radius = Math.max(0, Math.min(this.options.legendOn == true ? this.width / 4 : this.width / 2, this.height / 2));
            this.centerX = this.radius;
            this.centerY = this.height / 2;
            a.paintPie.apply(this);
            if (this.options.legendOn == true) {
                a.paintLabels.apply(this)
            }
        },
        paintPie: function () {
            if (this.total == 0) {
                this.pen.arc(this.centerX, this.centerY, this.radius, 0, Math.PI * 2);
                var g = this.pen.createRadialGradient(this.centerX, this.centerY, 0, this.centerX, this.centerY, this.radius);
                g.addColorStop(0, "#" + c.ObjectPlanet.color.adjust(b[0], 100));
                g.addColorStop(1, "#" + c.ObjectPlanet.color.adjust(b, 25));
                this.pen.fillStyle = g;
                this.pen.fill();
                return
            }
            var f = 0;
            for (var e = 0; e < this.values.length; e++) {
                var h = f + this.values[e].value / this.total * Math.PI * 2;
                this.pen.beginPath();
                this.pen.moveTo(this.centerX, this.centerY);
                this.pen.arc(this.centerX, this.centerY, this.radius, f, h);
                this.pen.lineTo(this.centerX, this.centerY);
                var d = this.values[e].color != null ? this.values[e].color : a.color.apply(this, [e]);
                var g = this.pen.createRadialGradient(this.centerX, this.centerY, 0, this.centerX, this.centerY, this.radius);
                g.addColorStop(0, "#" + c.ObjectPlanet.color.adjust(d, 60));
                g.addColorStop(1, "#" + c.ObjectPlanet.color.adjust(d, -25));
                this.pen.fillStyle = g;
                this.pen.fill();
                this.pen.strokeStyle = "white";
                this.pen.lineWidth = 0.5;
                this.pen.stroke();
                f = h
            }
        },
        paintLabels: function () {
            var d = this.centerX + this.radius + 20;
            var l = this.centerY - a.nonZero.apply(this) / 2 * 18 + 5;
            var j = this.total;
            if (this.options.multipleOn == true && this.options.responseCount > 0) {
                j = this.options.responseCount
            }
            this.labels = [];
            for (var g = 0; g < this.values.length; g++) {
                if (this.values[g] != null && this.values[g].value > 0) {
                    var f = this.values[g].color != null ? this.values[g].color : a.color.apply(this, [g]);
                    this.pen.beginPath();
                    this.pen.moveTo(d, l);
                    this.pen.fillStyle = "#" + f;
                    this.pen.fillRect(d, l, 10, 10);
                    this.pen.strokeStyle = "#" + c.ObjectPlanet.color.adjust(f, -60);
                    this.pen.rect(d, l, 10, 10);
                    this.pen.stroke();
                    var k = this.values[g].value != undefined ? this.values[g].value : 0;
                    var e = (k / j) * 100;
                    e = e.toFixed(2).replace(/0{0,2}$/, "");
                    var h = e.charAt(e.length - 1);
                    if (h == "." || h == ",") {
                        e = e.substring(0, e.length - 1)
                    }
                    this.labels[g] = "(" + k + " / " + e + "%)";
                    if (this.values[g].label != null) {
                        this.labels[g] += " " + this.values[g].label
                    }
                    this.pen.fillStyle = "black";
                    this.pen.fillText(this.labels[g], d + 20, l + 9);
                    l += 18
                }
            }
        },
        color: function (d) {
            var e = a.nonZero.apply(this);
            if (e <= b.length / 4) {
                return b[d * 4 % b.length]
            } else {
                if (e <= b.length / 3) {
                    return b[d * 3 % b.length]
                } else {
                    if (e <= b.length / 2) {
                        return b[d * 2 % b.length]
                    }
                }
            }
            return b[d % b.length]
        }
    }
})(jQuery);
(function (b) {
    b.fn.lineChart = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d) {
            var c = b(this).addClass("lineChart").get(0);
            this.options = d ? d : {};
            this.values = d && d.values ? d.values : [];
            this.heading = d && d.title ? d.title : "";
            this.total = 0;
            for (var e = 0; e < this.values.length; e++) {
                this.total += this.values[e].value
            }
            b(this).bind("mousemove", function (f) {
                a.repaint.apply(c);
                a.paintFloat.apply(c, [{
                    x: f.offsetX,
                    y: f.offsetY
                }])
            }).bind("mouseout", function (f) {
                a.repaint.apply(c)
            })
        },
        repaint: function (e) {
            this.values = e && e.values ? e.values : this.values;
            this.total = 0;
            this.max = Number.MIN_VALUE;
            for (var c = 0; c < this.values.length; c++) {
                var d = (typeof this.values[c].value == "number" ? this.values[c].value : 0);
                this.total += d;
                this.max = Math.max(this.max, d)
            }
            this.width = b(this).width();
            this.height = b(this).height();
            this.pen = this.getContext("2d");
            this.pen.clearRect(0, 0, this.width, this.height);
            a.paintChart.apply(this)
        },
        paintChart: function () {
            var o = this.heading != "" ? 15 : 0;
            if (this.heading) {
                this.pen.strokeStyle = "444444";
                this.pen.font = "14px Arial";
                var r = this.heading + (this.totalCount != null ? " (" + this.totalCount + ")" : "");
                this.pen.fillText(r, this.width / 2 - this.pen.measureText(r).width / 2, 14)
            }
            var d = 10;
            if (this.max <= 100) {
                d = 10
            } else {
                if (this.max <= 1000) {
                    d = 100
                } else {
                    if (this.max <= 10000) {
                        d = 1000
                    } else {
                        if (this.max <= 100000) {
                            d = 10000
                        } else {
                            if (this.max <= 1000000) {
                                d = 100000
                            } else {
                                if (this.max <= 10000000) {
                                    d = 1000000
                                } else {
                                    if (this.max <= 100000000) {
                                        d = 10000000
                                    }
                                }
                            }
                        }
                    }
                }
            }
            var n = Math.ceil(this.max / d) * d;
            var f = a.step(n);
            this.pen.font = "12px Arial";
            var e = this.pen.measureText(n).width + 5;
            this.pen.lineWidth = 1;
            this.pen.strokeStyle = "cccccc";
            this.pen.rect(e, o + 5, this.width - e, this.height - 10 - o);
            this.grid = {
                x: e,
                y: o + 5,
                w: this.width - e,
                h: this.height - 10 - o
            };
            this.pen.fillStyle = "black";
            var l = n / f;
            var j = (this.height - 10 - o) / l;
            for (var g = 0; l > 0 && g <= l; g++) {
                var j = this.height - 5 - (g * (this.height - 10 - o) / l);
                this.pen.moveTo(e, j);
                this.pen.lineTo(this.width, j);
                this.pen.fillText(g * f, e - this.pen.measureText(g * f).width - 5, j + 4)
            }
            this.pen.stroke();
            this.pen.strokeStyle = "6666dd";
            this.pen.lineWidth = 1.5;
            this.pen.lineCap = "butt";
            this.pen.lineJoin = "round";
            var k = (this.width - e) / (this.values.length >= 2 ? this.values.length - 1 : 1);
            var c = this.height - 10 - o;
            var p = e;
            var m = this.values && this.values.length > 0 ? this.height - 5 - this.values[0].value / n * c : this.height;
            this.pen.beginPath();
            this.pen.moveTo(p, m);
            for (var g = 0; g < this.values.length - 1; g++, p += k) {
                var q = this.height - 5 - this.values[g + 1].value / n * c;
                this.pen.lineTo(p + k, q)
            }
            this.pen.stroke();
            this.pen.closePath()
        },
        paintFloat: function (g) {
            var d = this.grid.w / (this.values.length >= 2 ? this.values.length - 1 : 1);
            var f = g && g.index != null ? g.index : null;
            if (f == null) {
                f = Math.round((g.x - this.grid.x) / d);
                if (f != this.currentIndex) {
                    this.currentIndex = f;
                    b(this).trigger({
                        type: "floatlabel",
                        currentIndex: f
                    })
                }
            }
            if (f >= 0 && f < this.values.length) {
                var c = this.grid.x + (d * f) - d / 2;
                this.pen.fillStyle = "6666dd";
                this.pen.globalAlpha = 0.2;
                this.pen.fillRect(c < this.grid.x ? this.grid.x : c, this.grid.y, c < this.grid.x ? d / 2 : d, this.grid.h);
                var i = this.values[f].value != null ? this.values[f].value : 0;
                if (g.index == null) {
                    var e = this.values[f].label
                }
                var h = {
                    w: this.pen.measureText(i).width + 10,
                    h: 20
                };
                h.y = (g && g.y != null ? g.y - 20 : this.grid.h / 2);
                if (e != null && e.length > 1) {
                    h.w = Math.max(h.w, this.pen.measureText(e).width + 10);
                    h.h = 40;
                    h.y -= 20
                }
                h.x = (g && g.x != null ? g.x : c) - h.w - 5;
                if (h.x < 0) {
                    h.x = (g && g.x != null ? g.x : c) + 5
                }
                this.pen.beginPath();
                this.pen.lineWidth = 0.25;
                this.pen.strokeStyle = "black";
                this.pen.globalAlpha = 0.9;
                this.pen.fillStyle = "ffffff";
                this.pen.fillRect(h.x, h.y, h.w, h.h);
                this.pen.rect(h.x, h.y, h.w, h.h);
                this.pen.stroke();
                this.pen.closePath();
                this.pen.fillStyle = "red";
                this.pen.fillText(i, h.x + 5, h.y + 15);
                if (e != null) {
                    this.pen.fillStyle = "black";
                    this.pen.fillText(e, h.x + 5, h.y + 35)
                }
            }
        },
        setTotal: function (c) {
            this.totalCount = c;
            a.repaint.apply(this)
        },
        step: function (d) {
            if (d <= 10) {
                return 1
            }
            if (d <= 20) {
                return 2
            }
            if (d <= 50) {
                return 5
            }
            var c = 100;
            while (true) {
                if (d <= (1 * c)) {
                    return (0.1 * c)
                }
                if (d <= (1.5 * c)) {
                    return (0.15 * c)
                }
                if (d <= (2 * c)) {
                    return (0.2 * c)
                }
                if (d <= (2.5 * c)) {
                    return (0.25 * c)
                }
                if (d <= (5 * c)) {
                    return (0.5 * c)
                }
                c *= 10;
                if (c >= 1000000000) {
                    return 100000000
                }
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.printIcon = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            b(this).addClass("op-icon");
            this.width = b(this).width();
            this.height = b(this).height();
            var d = this.getContext("2d");
            var f = d.createLinearGradient(0, 0, this.width / 2, this.height);
            f.addColorStop(0, "#" + b.ObjectPlanet.color.adjust("#41586a", 40));
            f.addColorStop(1, "#" + b.ObjectPlanet.color.adjust("#41586a", -40));
            d.strokeStyle = f;
            d.lineWidth = 1.5;
            d.lineCap = "butt";
            d.lineJoin = "round";
            var e = {
                w: 2,
                h: 4
            };
            d.rect(e.w, this.height - e.h - this.height / 3, this.width - e.w * 2, this.height / 3);
            d.moveTo(e.w + 3, this.height - e.h - this.height / 3 - 1);
            d.lineTo(e.w + 3, e.h);
            d.lineTo(this.width - e.w - 3, e.h);
            d.lineTo(this.width - e.w - 3, this.height - e.h - this.height / 3 - 1);
            d.moveTo(e.w + 5, e.h + 4);
            d.lineTo(this.width - e.w - 5, e.h + 4);
            var f = d.createLinearGradient(0, 0, this.width / 2, this.height);
            f.addColorStop(0, "#" + b.ObjectPlanet.color.adjust("#eeeeee", 25));
            f.addColorStop(1, "#" + b.ObjectPlanet.color.adjust("#eeeeee", -25));
            d.fillStyle = f;
            d.fill();
            d.stroke()
        }
    }
})(jQuery);
(function (b) {
    b.fn.saveIcon = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function () {
            b(this).addClass("op-icon").saveIcon("paint")
        },
        paint: function (c) {
            this.width = b(this).width();
            this.height = b(this).height();
            var d = this.getContext("2d");
            var f = d.createLinearGradient(0, 0, this.width / 2, this.height);
            f.addColorStop(0, "#" + b.ObjectPlanet.color.adjust("#41586a", 40));
            f.addColorStop(1, "#" + b.ObjectPlanet.color.adjust("#41586a", -40));
            d.strokeStyle = f;
            d.lineWidth = 1.5;
            d.lineCap = "butt";
            d.lineJoin = "round";
            var e = {
                w: 2,
                h: 2
            };
            d.moveTo(e.w, e.h);
            d.lineTo(this.width - e.w - 2, e.h);
            d.lineTo(this.width - e.w, e.h + 2);
            d.lineTo(this.width - e.w, this.height - e.h);
            d.lineTo(e.w, this.height - e.h);
            d.lineTo(e.w, e.h);
            delete this.background;
            if (c && c.background != null) {
                this.background = c.background
            }
            var f = d.createLinearGradient(0, 0, this.width / 2, this.height);
            f.addColorStop(0, "#" + b.ObjectPlanet.color.adjust(this.background ? this.background : "#eeeeee", 25));
            f.addColorStop(1, "#" + b.ObjectPlanet.color.adjust(this.background ? this.background : "#eeeeee", -25));
            d.fillStyle = f;
            d.fill();
            d.moveTo(e.w + 4, e.h);
            d.lineTo(e.w + 4, e.h + 8);
            d.lineTo(this.width - e.w - 4, e.h + 8);
            d.lineTo(this.width - e.w - 4, e.h);
            d.moveTo(this.width - e.w - 7, e.h + 2);
            d.lineTo(this.width - e.w - 7, e.h + 6);
            d.stroke();
            d.lineWidth = 1;
            d.moveTo(e.w + 3, this.height - e.h - 4);
            d.lineTo(this.width - e.w - 3, this.height - e.h - 4);
            d.moveTo(e.w + 3, this.height - e.h - 7);
            d.lineTo(this.width - e.w - 3, this.height - e.h - 7);
            d.stroke()
        }
    }
})(jQuery);
(function (a) {
    a.ObjectPlanet.stats = function (b) {
        var c = (b != null ? b : document.location.search);
        if (c.charAt(0) == "?") {
            c = c.substring(1)
        }
        a.serverRequest({
            action: "system.getStatsForMobile",
            pass: c
        }, function (d) {
            if (d == null || d.data == null) {
                return
            }
            var h = '<tr><th class="time">Time</th><th>Se</th><th>Lo</th><th>Us</th><th>Su</th><th>Im</th><th>Re</th></tr>';
            for (var f = d.data.length - 1; f >= 0; f--) {
                h += "<td>" + a.ObjectPlanet.dayStr(d.data[f]._id - 0) + "</td>";
                h += '<td class="count">' + (d.data[f].value.sessions ? d.data[f].value.sessions : 0) + "</td>";
                h += '<td class="count">' + (d.data[f].value.logins ? d.data[f].value.logins : 0) + "</td>";
                h += '<td class="count">' + (d.data[f].value.users ? d.data[f].value.users : 0) + "</td>";
                h += '<td class="count">' + (d.data[f].value.surveys ? d.data[f].value.surveys : 0) + "</td>";
                h += '<td class="count">' + (d.data[f].value.impressions ? d.data[f].value.impressions : 0) + "</td>";
                h += '<td class="count">' + (d.data[f].value.responses ? d.data[f].value.responses : 0) + "</td></tr>"
            }
            var g = a('<table style="width: 100%;" cellpadding="0" cellspacing="0">' + h + "</table>").css({
                "white-space": "nowrap"
            }).get(0);
            a(g).find("th").css({
                padding: "0.2em",
                "padding-bottom": "1em"
            });
            a(g).find("td").css({
                padding: "0.2em",
                "padding-bottom": "1em"
            });
            a(g).find("th").css({
                "background-color": "#333",
                color: "#eee"
            });
            a(g).find("th").css("text-align", "right");
            a(g).find("th.time").css("text-align", "left");
            a(g).find("td.count").css("text-align", "right");
            this.sessions = a("<canvas></canvas>").css("width", "100%").appendTo("body").lineChart({
                title: "Sessions"
            }).get(0);
            this.logins = a("<canvas></canvas>").css("width", "100%").appendTo("body").lineChart({
                title: "Logins"
            }).get(0);
            this.users = a("<canvas></canvas>").css("width", "100%").appendTo("body").lineChart({
                title: "Users"
            }).get(0);
            this.surveys = a("<canvas></canvas>").css("width", "100%").appendTo("body").lineChart({
                title: "Surveys"
            }).get(0);
            this.impressions = a("<canvas></canvas>").css("width", "100%").appendTo("body").lineChart({
                title: "Impressions"
            }).get(0);
            this.responses = a("<canvas></canvas>").css("width", "100%").appendTo("body").lineChart({
                title: "Responses"
            }).get(0);
            for (var f = 0, e = []; f < d.data.length; f++) {
                e[f] = {
                    value: d.data[f].value.sessions
                }
            }
            a(this.sessions).lineChart("repaint", {
                values: e
            });
            for (var f = 0, e = []; f < d.data.length; f++) {
                e[f] = {
                    value: d.data[f].value.logins
                }
            }
            a(this.logins).lineChart("repaint", {
                values: e
            });
            for (var f = 0, e = []; f < d.data.length; f++) {
                e[f] = {
                    value: d.data[f].value.users
                }
            }
            a(this.users).lineChart("repaint", {
                values: e
            });
            for (var f = 0, e = []; f < d.data.length; f++) {
                e[f] = {
                    value: d.data[f].value.surveys
                }
            }
            a(this.surveys).lineChart("repaint", {
                values: e
            });
            for (var f = 0, e = []; f < d.data.length; f++) {
                e[f] = {
                    value: d.data[f].value.impressions
                }
            }
            a(this.impressions).lineChart("repaint", {
                values: e
            });
            for (var f = 0, e = []; f < d.data.length; f++) {
                e[f] = {
                    value: d.data[f].value.responses
                }
            }
            a(this.responses).lineChart("repaint", {
                values: e
            });
            a("body").append(g)
        })
    }
})(jQuery);
(function () {
    $.ObjectPlanet.getReport = function (c, d) {
        var a = ObjectPlanet.report.createStructure({
            questions: c
        });
        for (var b = 0; d != null && d instanceof Array && b < d.length; b++) {
            ObjectPlanet.report.map(a, d[b])
        }
        return a
    }
})(jQuery);
(function (b) {
    b.fn.adminModule = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            this.statistics = b("<div></div>").statistics(c).get(0);
            this.topN = b("<div></div>").topN(c).get(0);
            this.userContainer = b('<div class="borderBox"></div>').get(0);
            this.userList = b("<table></table>").userList(c).appendTo(this.userContainer).get(0);
            this.log = b("<div></div>").log().get(0);
            this.payments = b("<div></div>").payments().get(0);
            b(this).addClass("adminModule op-app-module noSelect").module({
                title: "Administration",
                menu: ["Statistics", "Top N", "Users", "Log", "Payments"],
                submenu: [
                    ["Day", "Week"],
                    ["Responses", "Impressions", "Logins"],
                    [],
                    [],
                    []
                ],
                content: [this.statistics, this.topN, this.userContainer, this.log, this.payments]
            });
            b(this.header).add(this.moduleTitle).css("cursor", "default");
            b(this.moduleContainer).css("overflow-y", "hidden");
            var d = this;
            this.refresh = b('<span class="icon-refresh"></span>').prependTo(this.menu).bind("click", function (e) {
                a.load.apply(d)
            }).get(0);
            this.hours = b('<input class="right" size="2" type="text" value="24">').bind("change", function (e) {
                b(d.topN).topN("loadEntries", b(this).val())
            }).get(0);
            b(this.submenu).find(".container:eq(1)").prepend(this.hours);
            b(this.submenu).find(".container:eq(1) label:contains(Responses)").bind("mousedown", function () {
                b(d.topN).topN("show", "responses")
            });
            b(this.submenu).find(".container:eq(1) label:contains(Impressions)").bind("mousedown", function () {
                b(d.topN).topN("show", "impressions")
            });
            b(this.submenu).find(".container:eq(1) label:contains(Logins)").bind("mousedown", function () {
                b(d.topN).topN("show", "logins")
            });
            var d = this;
            b(window).bind("resize", function (e) {
                b(d.userContainer).add(d.log).height(b(d).height() - b(d.header).height())
            }).trigger("resize");
            b(this.submenu).find(".container:eq(0) label").bind("click", function (e) {
                b(d.statistics).statistics("loadStatistics", b(this).text())
            });
            if (b.ObjectPlanet.session && b.ObjectPlanet.session.sid != null) {
                a.load.apply(this)
            }
        },
        load: function () {
            b(this.statistics).statistics("loadStatistics");
            b(this.topN).topN("loadEntries", b(this.hours).val());
            b(this.userList).userList("loadList");
            b(this.log).log("loadList");
            b(this.payments).payments("load");
            b(this).find(".moduleContent:eq(3)").css("overflow-x", "scroll");
            b(this).find(".moduleContent").css("height", "100%")
        }
    }
})(jQuery);
(function (c) {
    c.fn.statistics = function () {
        return this.opWidget(a, arguments)
    };
    var e = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    var b = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var a = {
        init: function (f) {
            this.eventBus = f ? f : new c.ObjectPlanet.EventBus();
            var g = c(this).addClass("statistics").get(0);
            this.table = c("<table cellspacing=0 cellpadding=10><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></table>").appendTo(this).get(0);
            this.sessions = c("<canvas></canvas>").appendTo(c(this.table).find("td:eq(0)")).lineChart({
                title: "Sessions"
            }).get(0);
            this.logins = c("<canvas></canvas>").appendTo(c(this.table).find("td:eq(3)")).lineChart({
                title: "Logins"
            }).get(0);
            this.users = c("<canvas></canvas>").appendTo(c(this.table).find("td:eq(1)")).lineChart({
                title: "New users"
            }).get(0);
            this.surveys = c("<canvas></canvas>").appendTo(c(this.table).find("td:eq(4)")).lineChart({
                title: "New surveys"
            }).get(0);
            this.impressions = c("<canvas></canvas>").appendTo(c(this.table).find("td:eq(2)")).lineChart({
                title: "Survey impressions"
            }).get(0);
            this.responses = c("<canvas></canvas>").appendTo(c(this.table).find("td:eq(5)")).lineChart({
                title: "Responses"
            }).get(0);
            this.charts = [this.sessions, this.logins, this.users, this.surveys, this.impressions, this.responses];
            c(window).bind("resize", function (h) {
                a.resize.apply(g)
            });
            this.eventBus.listen("surveyManager.collapse", function () {
                a.resize.apply(g)
            });
            c(this.charts).bind("floatlabel", function (j) {
                for (var h = 0; h < g.charts.length; h++) {
                    if (g.charts[h] !== this) {
                        c(g.charts[h]).lineChart("repaint");
                        c(g.charts[h]).lineChart("paintFloat", {
                            index: j.currentIndex
                        })
                    }
                }
            }).bind("mouseout", function (h) {
                c(g.charts).lineChart("repaint")
            })
        },
        resize: function () {
            var f = c(this).outerWidth(),
                g = c(this).outerHeight();
            c(this.charts).css({
                width: (f / 3 - 20) + "px",
                height: (g / 2 - 23) + "px"
            }).lineChart("repaint")
        },
        setCharts: function (g) {
            for (var j = 0, l = []; j < g.data.length; j++) {
                if (g.period == "week") {
                    var k = new Date(g.data[j]._id - (1000 * 60 * 60 * 24 * 7));
                    var h = new Date(g.data[j]._id - 0);
                    l[j] = k.getDate() + " " + e[k.getMonth()] + " - " + h.getDate() + " " + e[h.getMonth()]
                } else {
                    var f = new Date(g.data[j]._id - 0);
                    l[j] = b[f.getDay()] + " " + f.getDate() + " " + e[f.getMonth()]
                }
            }
            a.repaintChart(this.sessions, g.data, l, "sessions");
            a.repaintChart(this.logins, g.data, l, "logins");
            a.repaintChart(this.users, g.data, l, "users");
            a.repaintChart(this.surveys, g.data, l, "surveys");
            a.repaintChart(this.impressions, g.data, l, "impressions");
            a.repaintChart(this.responses, g.data, l, "responses");
            a.resize.apply(this)
        },
        repaintChart: function (h, j, l, k) {
            for (var g = 0, f = []; g < j.length; g++) {
                f[g] = {
                    value: j[g].value[k],
                    label: l[g]
                }
            }
            c(h).lineChart("repaint", {
                values: f
            })
        },
        loadStatistics: function (f) {
            d.loadStatistics.apply(this, [f])
        }
    };
    var d = {
        loadStatistics: function (g) {
            g = g != null ? g.toLowerCase() : "day";
            this.sessions.heading = "Sessions per " + g;
            this.logins.heading = "Logins per " + g;
            this.users.heading = "New users per " + g;
            this.surveys.heading = "New surveys per " + g;
            this.impressions.heading = "Survey impressions per " + g;
            this.responses.heading = "Responses per " + g;
            var f = this;
            c.serverRequest({
                action: "system.getStatistics",
                period: g ? g : "day"
            }, function (h) {
                c(f).progressIndicator("stop");
                if (h.data != null) {
                    a.setCharts.apply(f, [{
                        data: h.data,
                        period: g
                    }]);
                    d.loadTotals.apply(f)
                }
            })
        },
        loadTotals: function () {
            var f = this;
            c.serverRequest({
                action: "system.state"
            }, function (g) {
                if (g.data && g.data.count) {
                    c(f.sessions).lineChart("setTotal", g.data.count.sessions);
                    c(f.logins).lineChart("setTotal", g.data.count.logins);
                    c(f.users).lineChart("setTotal", g.data.count.users);
                    c(f.surveys).lineChart("setTotal", g.data.count.surveys);
                    c(f.impressions).lineChart("setTotal", g.data.count.impressions);
                    c(f.responses).lineChart("setTotal", g.data.count.responses)
                }
            })
        }
    }
})(jQuery);
(function (c) {
    c.fn.topN = function () {
        return this.opWidget(a, arguments)
    };
    var b = function (g, h) {
        for (var e = 0, f = []; e < g.length; e++) {
            f[e] = g[e][h]
        }
        return f
    };
    var a = {
        init: function (e) {
            c(this).addClass("top-n").prop("eventBus", e);
            this.responses = c("<table></table>").opTable({
                header: ["Survey", "Referer", "User", "Name", "Created", "Surveys", "Responses"]
            }).appendTo(this).get(0);
            this.impressions = c("<table></table>").opTable({
                header: ["Survey", "Referer", "User", "Name", "Created", "Surveys", "Impressions"]
            }).hide().appendTo(this).get(0);
            this.logins = c("<table></table>").opTable({
                header: ["User", "Name", "Created", "Surveys", "Logins"]
            }).hide().appendTo(this).get(0)
        },
        show: function (e) {
            c(this.responses).toggle(e == "responses");
            c(this.impressions).toggle(e == "impressions");
            c(this.logins).toggle(e == "logins")
        },
        loadEntries: function (e) {
            d.loadTopN.apply(this, [e, "system.top.responses", "setResponses", "responses"]);
            d.loadTopN.apply(this, [e, "system.top.impressions", "setImpressions", "impressions"]);
            d.loadTopN.apply(this, [e, "system.top.logins", "setLogins", "logins"])
        },
        setResponses: function (e) {
            a.setData.apply(this, [e, this.responses, "responses"])
        },
        setImpressions: function (e) {
            a.setData.apply(this, [e, this.impressions, "impressions"])
        },
        setLogins: function (h) {
            c(this.logins).opTable("clear");
            for (var j = 0; h && h.logins && j < h.logins.length; j++) {
                var g = ['<a class="login" href="#">' + h.logins[j]._id + "</a>", "", "", "", h.logins[j].value.count];
                c(this.logins).opTable("addRow", g).attr("login", h.logins[j]._id)
            }
            for (var j = 0; h.users && j < h.users.length; j++) {
                var k = c(this.logins).find('tr[login="' + h.users[j].login + '"]').get(0);
                if (h.users[j].facebook) {
                    var f = '<a target="facebook" href="http://www.facebook.com/' + h.users[j].facebook.id + '">' + h.users[j].facebook.name + "</a>";
                    c(k).find("td:eq(1)").html(f)
                }
                if (h.users[j].created) {
                    c(k).find("td:eq(2)").text(c.ObjectPlanet.dateStr(h.users[j].created))
                }
                if (h.users[j].surveyCount) {
                    c(k).find("td:eq(3)").text(h.users[j].surveyCount)
                }
            }
            var e = this;
            c(this.logins).find("tr").bind("click", function (i) {
                if (i.target.nodeName == "A" && c(i.target).hasClass("login")) {
                    e.eventBus.trigger("surveyList.filter", c(i.target).text())
                }
            })
        },
        setData: function (g, j, l) {
            c(j).opTable("clear");
            for (var h = 0; g[l] && h < g[l].length; h++) {
                var f = ["", "", "", "", "", "", g[l][h].value.count];
                c(j).opTable("addRow", f).attr("surveyId", g[l][h]._id)
            }
            for (var h = 0; g.surveys && h < g.surveys.length; h++) {
                var m = c(j).find("tr[surveyId=" + g.surveys[h]._id.$oid + "]").get(0);
                c(m).attr("userId", g.surveys[h].userId);
                c(m).find("td:eq(0)").html('<a class="survey" href="#">' + g.surveys[h].surveyName + "</a>");
                if (g.surveys[h].referer) {
                    var k = g.surveys[h].referer.substring(0, 40);
                    c(m).find("td:eq(1)").html('<a target="referer" href="' + g.surveys[h].referer + '">' + k + "</a>")
                }
                c(m).find("td:eq(4)").text(c.ObjectPlanet.dateStr(g.surveys[h].created))
            }
            for (var h = 0; g.users && h < g.users.length; h++) {
                c(j).find("tr[userId=" + g.users[h]._id.$oid + "]").each(function () {
                    c(this).find("td:eq(2)").html('<a class="login" href="#">' + g.users[h].login + "</a>");
                    if (g.users[h].facebook) {
                        var i = '<a target="facebook" href="http://www.facebook.com/' + g.users[h].facebook.id + '">' + g.users[h].facebook.name + "</a>";
                        c(this).find("td:eq(3)").html(i)
                    }
                    if (g.users[h].surveyCount) {
                        c(this).find("td:eq(5)").text(g.users[h].surveyCount)
                    }
                })
            }
            var e = this;
            c(j).find("tr").bind("click", function (i) {
                if (i.target.nodeName == "A" && c(i.target).hasClass("survey")) {
                    e.eventBus.trigger("survey.load", c(this).attr("surveyId")).trigger("module.moveTo", c.ObjectPlanet.POS_REPORT)
                } else {
                    if (i.target.nodeName == "A" && c(i.target).hasClass("login")) {
                        e.eventBus.trigger("surveyList.filter", c(i.target).text())
                    }
                }
            })
        }
    };
    var d = {
        loadTopN: function (h, j, e, i) {
            var g = this;
            var f = h && h - 0 == h ? h : 24;
            c.serverRequest({
                action: j,
                hours: f,
                limit: 15
            }, function (k) {
                if (k && i == "logins") {
                    d.loadLoginInfo.apply(g, [k.data, e])
                } else {
                    if (k) {
                        d.loadUserInfo.apply(g, [k.data, i, e])
                    }
                }
            })
        },
        loadUserInfo: function (h, g, e) {
            var f = this;
            c.serverRequest({
                get: {
                    collection: "surveys",
                    select: {
                        _id: {
                            $in: b(h, "_id")
                        }
                    },
                    fields: {
                        surveyName: true,
                        userId: true,
                        created: true,
                        referer: true
                    }
                }
            }, function (i) {
                if (i.data) {
                    c.serverRequest({
                        get: {
                            collection: "users",
                            select: {
                                _id: {
                                    $in: b(i.data, "userId")
                                }
                            },
                            fields: {
                                login: true,
                                facebook: true,
                                surveyCount: true
                            }
                        }
                    }, function (k) {
                        var j = {
                            surveys: i.data,
                            users: k.data
                        };
                        j[g] = h;
                        c(f).topN(e, j)
                    })
                }
            })
        },
        loadLoginInfo: function (g, e) {
            var f = this;
            c.serverRequest({
                get: {
                    collection: "users",
                    select: {
                        login: {
                            $in: b(g, "_id")
                        }
                    },
                    fields: {
                        login: true,
                        created: true,
                        surveyCount: true,
                        facebook: true
                    }
                }
            }, function (h) {
                if (h.data) {
                    c(f).topN(e, {
                        logins: g,
                        users: h.data
                    })
                }
            })
        }
    }
})(jQuery);
(function (c) {
    c.fn.userList = function () {
        return this.opWidget(a, arguments)
    };
    var b = {
        CREATED: 0,
        LOGIN: 1,
        NAME: 2,
        SURVEYS: 3,
        PLAN: 4,
        LIMIT: 5,
        CURRENT: 6,
        EXPIRES: 7,
        STATE: 8
    };
    var a = {
        init: function (d) {
            var e = c(this).prop("eventBus", d).get(0);
            c(this).html("").addClass("textSelect").opTable({
                header: ["Created", "Login", "Name", "Surveys", "Plan", "Limit", "Current", "Expires", "State"]
            }).find("th:eq(2)").css("width", "100%");
            c(this).find("tr:eq(0) th").each(function (f) {
                c(this).addClass("hand").prop("index", f)
            }).bind("click", function () {
                a.sort.apply(e, [this.index])
            })
        },
        loadList: function () {
            var d = this;
            c.serverRequest({
                get: {
                    collection: "users",
                    sort: {
                        created: -1
                    },
                    limit: 0,
                    fields: {
                        login: true,
                        created: true,
                        facebook: true,
                        surveyCount: true,
                        account: true,
                        disabled: true
                    }
                }
            }, function (e) {
                if (e.data != null) {
                    a.setJSON.apply(d, [e.data])
                }
            })
        },
        setJSON: function (f) {
            this.users = f;
            a.init.apply(this);
            for (var e = 0; f && f.length && e < f.length; e++) {
                a.addEntry.apply(this, [f[e]])
            }
            var d = this;
            c(this).find("tr").not(".header").bind("click", function (g) {
                if (g.target.nodeName == "A" && c(g.target.nodeName).hasClass("login")) {
                    d.eventBus.trigger("surveyList.filter", c(g.target).text())
                }
            })
        },
        addEntry: function (o) {
            var e = new Date();
            var k = e.getFullYear() + (e.getMonth() < 9 ? "0" + (e.getMonth() + 1) : e.getMonth() + 1);
            var g = o.created ? c.ObjectPlanet.dateStr(o.created, false) : "";
            var m = '<a class="login" href="#">' + o.login + "</a>";
            var d = o.facebook ? '<a target="facebook" href="http://www.facebook.com/' + o.facebook.id + '">' + o.facebook.name + "</a>" : "";
            var l = o.account && o.account.plan ? o.account.plan : "free";
            var h = o.account && o.account.qrLimit != null ? o.account.qrLimit : "1000";
            if (h == -1) {
                h = "Unlimited"
            }
            var j = o.account && o.account.qr && o.account.qr[k] && o.account.qr[k].value != null ? o.account.qr[k].value : 0;
            var f = o.account && o.account.expires != null ? c.ObjectPlanet.dateStr(o.account.expires, false) : "Never";
            var i = !o.disabled ? '<span class="hand">enabled</span>' : '<span class="hand op-web-message-error-color">disabled</span>';
            var q = [g, m, d, o.surveyCount ? o.surveyCount : 0, l, h, j, f, i];
            var r = c(this).opTable("addRow", q).find("td").addClass("nowrap").end();
            var p = this;
            var n = c(r).find("td:last span").get(0);
            c(n).popdown({
                align: "left",
                items: [{
                    label: !o.disabled ? "Disable" : "Enable",
                    callback: function () {
                        a.setUserState.apply(p, [o.login, n, this.popdown])
                    }
                }]
            })
        },
        sort: function (d) {
            var e = this.sorted == true ? -1 : 1;
            this.users.sort(function (g, f) {
                if (d == b.CREATED) {
                    return g.created < f.created ? e : -e
                }
                if (d == b.LOGIN && !g.login) {
                    return 1
                }
                if (d == b.LOGIN && !f.login) {
                    return -1
                }
                if (d == b.LOGIN && g.login != null && f.login != null) {
                    return g.login.toLowerCase() < f.login.toLowerCase() ? -e : e
                }
                if (d == b.NAME && (!g.facebook || !g.facebook.name)) {
                    return 1
                }
                if (d == b.NAME && (!f.facebook || !f.facebook.name)) {
                    return -1
                }
                if (d == b.NAME && g.facebook.name != null && f.facebook.name != null) {
                    return g.facebook.name.toLowerCase() < f.facebook.name.toLowerCase() ? -e : e
                }
                if (d == b.SURVEYS && g.surveyCount == null) {
                    return 1
                }
                if (d == b.SURVEYS && f.surveyCount == null) {
                    return -1
                }
                if (d == b.SURVEYS) {
                    return g.surveyCount < f.surveyCount ? e : -e
                }
                if (d == b.LIMIT && g.account == null) {
                    return 1
                }
                if (d == b.LIMIT && f.account == null) {
                    return -1
                }
                if (d == b.LIMIT) {
                    return g.account.qrLimit < f.account.qrLimit ? e : -e
                }
                if (d == b.EXPIRES && g.account == null) {
                    return 1
                }
                if (d == b.EXPIRES && f.account == null) {
                    return -1
                }
                if (d == b.EXPIRES) {
                    return g.account.expires < f.account.expires ? e : -e
                }
                return 0
            });
            this.sorted = !this.sorted;
            a.setJSON.apply(this, [this.users])
        },
        setUserState: function (d, e, g) {
            var f = c(e).text();
            c.serverRequest({
                action: "user.setState",
                login: d,
                disabled: f == "enabled" ? true : false
            }, function (h) {
                if (h.resultCode == c.ObjectPlanet.ResultCode.OK) {
                    c(e).text(f == "enabled" ? "disabled" : "enabled");
                    c(e).toggleClass("op-web-message-error-color", f == "enabled");
                    c(g).find("label:eq(0)").text(f == "enabled" ? "Enable" : "Disable")
                }
            })
        }
    }
})(jQuery);
(function (b) {
    b.fn.log = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function () {
            var c = b(this).html('<div class="log-controls"><label class="log-disaster"><input type="checkbox" value="DISASTER" checked="true">Disaster</label><label class="log-critical"><input type="checkbox" value="CRITICAL" checked="true">Critical</label><label class="log-error"><input type="checkbox" value="ERROR" checked="true">Error</label><label class="log-warning"><input type="checkbox" value="WARNING">Warning</label><label class="log-info"><input type="checkbox" value="INFO">Info</label><label class="log-debug"><input type="checkbox" value="DEBUG">Debug</label></div>').get(0);
            this.controls = b(this).find("div.log-controls").get(0);
            this.disaster = b(this.controls).find("input:eq(0)").get(0);
            this.critical = b(this.controls).find("input:eq(1)").get(0);
            this.error = b(this.controls).find("input:eq(2)").get(0);
            this.warning = b(this.controls).find("input:eq(3)").get(0);
            this.info = b(this.controls).find("input:eq(4)").get(0);
            this.debug = b(this.controls).find("input:eq(5)").get(0);
            this.list = b('<table class="fullWidth"></table>').logList().appendTo(this).get(0);
            b(this.controls).bind("change", function (d) {
                a.loadList.apply(c)
            })
        },
        loadList: function (c) {
            var e = [];
            if (b(this.disaster).is(":checked")) {
                e.push("DISASTER")
            }
            if (b(this.critical).is(":checked")) {
                e.push("CRITICAL")
            }
            if (b(this.error).is(":checked")) {
                e.push("ERROR")
            }
            if (b(this.warning).is(":checked")) {
                e.push("WARNING")
            }
            if (b(this.info).is(":checked")) {
                e.push("INFO")
            }
            if (b(this.debug).is(":checked")) {
                e.push("DEBUG")
            }
            var d = this;
            b(d).progressIndicator("start", {
                plain: true
            });
            b.serverRequest({
                get: {
                    collection: "log",
                    sort: {
                        $natural: -1
                    },
                    limit: (c - 0 == c ? c - 0 : 50),
                    select: (e.length > 0 ? {
                        severity: {
                            $in: e
                        }
                    } : null)
                }
            }, function (f) {
                b(d).progressIndicator("stop");
                if (f.data != null) {
                    b(d.list).logList("setJSON", f.data)
                }
            })
        }
    }
})(jQuery);
(function (b) {
    b.fn.logList = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            b(this).addClass("log-list").html("").opTable({
                header: ["Time", "User", "Severity", "Message"]
            })
        },
        setJSON: function (d) {
            a.init.apply(this);
            this.logData = d;
            for (var c = 0; d && d.length && c < d.length; c++) {
                a.addEntry.apply(this, [d[c]])
            }
            b(this).find("tr.log-warning").add("tr.log-error").add("tr.log-critical").bind("click", function (e) {
                if (this.log.data && this.dataAdded) {
                    b(this).next().remove().end().get(0).dataAdded = false
                } else {
                    if (this.log.data) {
                        var g = this.log.data.replace(/%7B/g, "{").replace(/%7D/g, "}").replace(/%22/g, '"');
                        var f = this.log.userAgent != null ? this.log.userAgent : "[no user agent]";
                        g = f + "<br>" + g.replace(/%3A/g, ":").replace(/%2C/g, ",");
                        if (this.log.stack) {
                            g += ("<br>" + this.log.stack.replace(/\n/g, "<br>"))
                        }
                        b(this).after(b('<tr><td colspan="4">' + g + "</td></tr>").addClass(b(this).attr("class"))).get(0).dataAdded = true
                    }
                }
            })
        },
        addEntry: function (e) {
            var d = [b.ObjectPlanet.dateStr(new Date(e.time)), e.login ? e.login : "", e.severity, e.message];
            var c = e.severity != null ? e.severity.toLowerCase() : e.severity;
            b(this).opTable("addRow", d).addClass("log-" + c).prop("log", e).find("td").addClass("nowrap")
        }
    }
})(jQuery);
(function (b) {
    b.fn.payments = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function () {
            this.table = b('<table class="fullWidth"></table>').opTable({
                header: ["Date", "User", "Plan", "Amount", "Expires"]
            }).appendTo(this).get(0)
        },
        setPayments: function (h) {
            b(this.table).opTable("clear");
            for (var g = 0; h && g < h.length; g++) {
                var k = b.ObjectPlanet.dateStr(h[g].created, false);
                var d = h[g].user.login;
                var j = h[g].account.plan;
                var f = "$" + (h[g].account.amount.value - 0).toFixed(2);
                var c = new Date(h[g].account.expires).toDateString();
                var e = [k, d, j, f, c];
                b(this.table).opTable("addRow", e)
            }
        },
        load: function () {
            var c = this;
            b.serverRequest({
                get: {
                    collection: "payments",
                    select: {
                        status: "approved"
                    },
                    sort: {
                        created: -1
                    },
                    limit: 50,
                    fields: {
                        created: true,
                        user: true,
                        account: true,
                        status: true
                    }
                }
            }, function (d) {
                a.setPayments.apply(c, [d.data])
            })
        }
    }
})(jQuery);
(function (b) {
    b.fn.supportModule = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            var d = b(this).addClass("support-module op-app-module").get(0);
            this.eventBus = c ? c : new b.ObjectPlanet.EventBus();
            this.forum = b("<div></div>").forum().get(0);
            b(this).module({
                title: "Forum",
                submenu: [
                    ["?"]
                ],
                content: [this.forum]
            }).module("setEnabled", false);
            this.refresh = b("<canvas></canvas>").css({
                width: "23px",
                height: "23px"
            }).refreshButton().bind("click", function (e) {
                b(d.forum).forum("refresh")
            }).get(0);
            b(this).find(".header td:eq(1)").css("text-align", "right").append(this.refresh);
            b(this.submenu).find("label:contains(?)").helpButton().css("padding", "1px");
            b(this.submenu).find("label:contains(?):eq(0)").bind("click", function () {
                b.murveyHelp({
                    sections: ["forum"]
                })
            });
            this.crumbs = b('<span class="crumbs"><label>Categories</label></span>').prependTo(this.submenu).get(0);
            b(this.forum).bind("showTopics", function (e) {
                b(d.crumbs).html('<a href="#">Categories</a> â€º <label>' + e.category + "</label>");
                b(d.crumbs).find("a:contains(Categories)").bind("click", function () {
                    b(d.forum.topics).hide();
                    b(d.forum.categories).show();
                    b(d.crumbs).html("<label>Categories</label>");
                    b(d.forum).forum("loadCategories")
                })
            });
            this.eventBus.listen("module.movedTo", function (e) {
                if (d.movedInto == true) {
                    return
                }
                d.movedInto = true;
                if (e.index == b.ObjectPlanet.POS_SUPPORT && b.ObjectPlanet.testMode == true) {
                    if (b.ObjectPlanet.session && b.ObjectPlanet.session.sid) {
                        b(d.forum).forum("loadTopics", "all", "All")
                    }
                } else {
                    if (e.index == b.ObjectPlanet.POS_SUPPORT) {
                        setTimeout(function () {
                            if (b.ObjectPlanet.session && b.ObjectPlanet.session.sid) {
                                b(d.forum).forum("loadTopics", "all", "All")
                            }
                        }, 5)
                    }
                }
            });
            this.eventBus.listen("user.loggedIn", function (e) {
                a.setEnabled.apply(d, [true]);
                b(d.forum).forum("loadTopics", "all", "All")
            }).listen("user.loggedOut", function () {
                a.setEnabled.apply(d, [false])
            });
            a.setEnabled.apply(this, [false])
        },
        setEnabled: function (c) {
            b(this).module("setEnabled", c == true);
            b(this.forum).forum("setEnabled", c == true)
        }
    }
})(jQuery);
(function (d) {
    d.fn.forum = function () {
        return this.opWidget(b, arguments)
    };
    var b = {
        init: function (h) {
            var g = d(this).addClass("op-forum").get(0);
            this.categories = d('<table cellpadding="0" cellspacing="0" class="fullWidth"><tr class="header"><th class="left">Forum</th><th class="right">Topics</th><th class="right">Posts</th><th class="right nowrap">Last post</th></tr></table>').hide().appendTo(this).get(0);
            this.categories.header = d(this.categories).find("tr").get(0);
            this.topics = d('<table cellpadding="0" cellspacing="0" class="fullWidth textSelect"><tr class="header"><th class="left fullWidth">Topic <button>New</button></th><th class="left" style="display: none;">Category</th><th class="left">User</th><th class="left nowrap">Last post</th><th class="right">Replies</th><th></th></tr><tr class="forum-new" style="display: none;"><td class="content">' + d.inputBox({
                label: "subject",
                classes: "forum-topic-subject fullWidth",
                attributes: 'type="text" encoded="true"'
            }) + '<select class="fullWidth" style="display: none;"></select>' + d.autoSizeTextArea({
                label: "content",
                classes: "body fullWidth",
                attributes: 'encoded="true"'
            }) + '<div><button disabled="disabled" style="cursor: default;">Submit</button><button>Cancel</button><label class="hand email"><input type="checkbox" class="hand">Email me replies</label></div></td><td colspan="5"></td></tr></table>').appendTo(this).get(0);
            this.topics.header = d(this.topics).find("tr.header").get(0);
            this.newTopicButton = d(this.topics).find("tr:eq(0) button:contains(New)").bind("click", e.openNewTopicForm).prop("self", this).get(0);
            this.newTopicForm = d(this.topics).find("tr.forum-new").get(0);
            this.newTopicForm.subject = d(this.newTopicForm).find("input[type=text]").get(0);
            this.newTopicForm.select = d(this.newTopicForm).find("select").get(0);
            this.newTopicForm.body = d(this.newTopicForm).find("textarea").parent().autoSizeTextArea({
                horizontal: false,
                disabled: false
            }).get(0);
            this.newTopicForm.email = d(this.newTopicForm).find("label.email").get(0);
            this.newTopicForm.email.check = d(this.newTopicForm.email).find("input").get(0);
            d(this.newTopicForm.subject).add(this.newTopicForm.body.input).bind("keyup change", e.setSubmitState);
            this.newTopicForm.subject.forum = this.newTopicForm.body.input.forum = this;
            this.newTopicForm.submit = d(this.newTopicForm).find("button:contains(Submit)").bind("click", e.storeNewTopic).prop("self", this).get(0);
            this.newTopicForm.cancel = d(this.newTopicForm).find("button:contains(Cancel)").bind("click", e.cancelNewTopic).prop("self", this).get(0);
            d(this).bind("click", function (k) {
                var i = d(k.target).hasClass("delete-button") ? k.target : k.target.parentNode;
                var j = d(k.target).closest("tr.topic").attr("topicId");
                if (d(i).hasClass("delete-button") && i.popdown == null) {
                    d(i).popdown({
                        align: "left",
                        standalone: true,
                        offsetX: 3,
                        offsetY: 2,
                        items: [{
                            label: "Delete topic",
                            callback: function () {
                                f.deleteTopic.apply(g, [j])
                            }
                        }]
                    }).popdown("showMenu", k)
                }
            })
        },
        setEnabled: function (g) {
            d(this.topics).add(this.newTopicForm).hide();
            d(this.newTopicForm.subject).add(this.newTopicForm.body.input).val("")
        },
        setCategories: function (l) {
            for (var k = 0, n = 0, m = 0, j = 0; l && k < l.length; k++) {
                n += l[k].topics ? l[k].topics : 0;
                m += l[k].posts ? l[k].posts : 0;
                j = Math.max(l[k].lastPost ? l[k].lastPost : 0, j)
            }
            var h = a("all", "All", "All categories", n, m, j);
            for (var k = 0; l && k < l.length; k++) {
                h += a(l[k]._id.$oid, l[k].category, l[k].info, l[k].topics, l[k].posts, l[k].lastPost, l[k].adminOnly)
            }
            var g = this;
            d(this.topics).hide();
            d(this.categories).find("tr.category").remove();
            d(this.categories).append(h).find(".forum-category-name").bind("click", function (i) {
                d(g.newTopicButton).toggle(d(this).attr("adminOnly") != "true" || (d.ObjectPlanet.session && d.ObjectPlanet.session.login == "admin"));
                b.loadTopics.apply(g, [d(this).attr("category"), d(this).text()])
            }).end().show()
        },
        setTopics: function (j, k, g) {
            this.topics.categoryName = g;
            this.newTopicForm.category = k;
            for (var h = 0, l = []; j && h < j.length; h++) {
                l[h] = c.apply(this, [j[h], k == "all"])
            }
            d(this.categories).add(this.newTopicForm).hide();
            d(this.topics).find("tr.topic").remove();
            d(this.topics).find("tr.forum-content").remove();
            d(this.topics).find("tr.header th:eq(1)").toggle(k == "all");
            d(this.topics).append(l).show();
            d(this.topics).find("tr.topic td.forum-topic-subject").bind("click", e.toggleTopic);
            b.toggleTopic.apply(this, [d(this.topics).find("tr.topic:eq(0)").get(0)]);
            d(this).trigger({
                type: "showTopics",
                category: (g != null ? g : k)
            })
        },
        getNewTopicJSON: function () {
            var g = {
                subject: encodeURIComponent(d(this.newTopicForm.subject).val()),
                body: encodeURIComponent(d(this.newTopicForm.body.input).val()),
                category: this.newTopicForm.category ? this.newTopicForm.category : "generic"
            };
            if (g.category == "all") {
                g.category = d(this.newTopicForm.select).val()
            }
            if (d(this.newTopicForm.email.check).is(":checked")) {
                g.emailReplies = true
            }
            return g
        },
        toggleTopic: function (i) {
            if (i == null) {
                return
            }
            if (!i.displayed) {
                var h = d(i).find("td.replies").width() + d(i).find("td:last").width() + 2;
                var j = d('<tr class="forum-content"><td class="thread" colspan="6"></td></tr>').get(0);
                var g = d("<div></div>").forumThread(i.json).get(0);
                d(g).find("td.info").css("padding-right", h + "px");
                d(i).after(d(j).find("td").html(g).end())
            } else {
                d(i).next().remove()
            }
            i.displayed = !i.displayed
        },
        removeTopicEntry: function (g) {
            var h = d(this.topics).find("tr.topic[topicId=" + g + "]").get(0);
            if (d(h).next().hasClass("forum-content")) {
                d(h).next().remove()
            }
            d(h).remove()
        },
        refresh: function () {
            if (d(this.topics).is(":visible")) {
                f.loadTopics.apply(this, [this.newTopicForm.category, this.topics.categoryName])
            } else {
                f.loadCategories.apply(this)
            }
        },
        loadCategories: function () {
            f.loadCategories.apply(this)
        },
        loadTopics: function (h, g) {
            f.loadTopics.apply(this, [h, g])
        }
    };
    var f = {
        loadCategories: function () {
            if (d.ObjectPlanet.session.login == null) {
                return
            }
            var g = this;
            if (d.ObjectPlanet.session && d.ObjectPlanet.session.login != null) {
                d.serverRequest({
                    get: {
                        collection: "forum.categories",
                        sort: {
                            sorting: 1
                        }
                    }
                }, function (h) {
                    if (h.data) {
                        b.setCategories.apply(g, [h.data])
                    }
                })
            }
        },
        loadTopics: function (j, h) {
            if (d.ObjectPlanet.session.login == null) {
                return
            }
            if (this.parentNode) {
                d(this.parentNode.parentNode).progressIndicator("start", {
                    plain: true
                })
            }
            var g = this;
            var i = {
                get: {
                    collection: "forum",
                    sort: {
                        lastPost: -1
                    }
                }
            };
            if (j != "all") {
                i.get.select = {
                    category: j
                }
            }
            d.serverRequest(i, function (k) {
                b.setTopics.apply(g, [k.data, j, h]);
                if (g.parentNode) {
                    d(g.parentNode.parentNode).progressIndicator("stop")
                }
            });
            if (d(this.newTopicForm.select).val() == null) {
                f.loadCategorySelector.apply(this)
            }
        },
        loadCategorySelector: function () {
            var g = this;
            if (d.ObjectPlanet.session && d.ObjectPlanet.session.login != null) {
                d.serverRequest({
                    get: {
                        collection: "forum.categories",
                        sort: {
                            sorting: 1
                        }
                    }
                }, function (j) {
                    for (var k = 0, h = ""; j.data && k < j.data.length; k++) {
                        if (!j.data[k].adminOnly) {
                            h += '<option value="' + j.data[k]._id.$oid + '">' + j.data[k].category + "</option>"
                        }
                    }
                    d(g.newTopicForm.select).html(h)
                })
            }
        },
        deleteTopic: function (h) {
            var g = this;
            d.serverRequest({
                action: "forum.delete",
                topicId: h
            }, function (i) {
                if (i.resultCode == d.ObjectPlanet.ResultCode.OK) {
                    b.removeTopicEntry.apply(g, [h])
                }
            })
        },
        storeNewTopic: function () {
            var g = this;
            var h = {
                action: "forum.store",
                data: JSON.stringify(b.getNewTopicJSON.apply(this))
            };
            if (d.ObjectPlanet.testMode == true) {
                h.noEmail = true
            }
            d.serverPost(h, function (j) {
                if (j.resultCode == d.ObjectPlanet.ResultCode.OK) {
                    var l = c.apply(g, [j.data, g.newTopicForm.category == "all"]);
                    d(l).find("td.forum-topic-subject").bind("click", e.toggleTopic);
                    d(g.newTopicForm).after(l).hide();
                    d(g.newTopicForm.subject).add(g.newTopicForm.body.input).val("");
                    var i = d(g.topics).find("tr.forum-content").size();
                    var k = d(g.topics).find("tr.topic:eq(1)").get(0);
                    if (i == 1 && k.displayed == true) {
                        b.toggleTopic(k)
                    }
                    b.toggleTopic(l)
                }
            })
        }
    };
    var e = {
        openNewTopicForm: function (h) {
            var g = d(this.self.newTopicForm).toggle().get(0);
            d(g.body).autoSizeTextArea("adjust");
            if (d(g.subject).val() != "") {
                d(g.submit).removeAttr("disabled").css("cursor", "pointer")
            }
            if (d(g.subject).val() == "") {
                d(g.submit).attr("disabled", "disabled").css("cursor", "default")
            }
            if (d.ObjectPlanet.session && d.ObjectPlanet.session.name != null) {
                if (d(g.subject).attr("disabled") == "disabled") {
                    d(g.subject).val("")
                }
                d(g.subject).focus().add(g.body.input).removeAttr("disabled");
                d(g.select).toggle(g.category == "all");
                d(g.submit).text("Submit as " + d.ObjectPlanet.session.name);
                d(g.email.check).removeAttr("checked");
                d(g.submit).add(g.body).add(g.accept).add(g.email).show()
            } else {
                d(g.subject).val("Sorry, you can only post new topics if logged in using your facebook account");
                d(g.subject).add(g.body.input).attr("disabled", "disabled");
                d(g.submit).add(g.body).add(g.publicBox).add(g.email).hide();
                d(g.cancel).focus()
            }
        },
        toggleTopic: function (g) {
            b.toggleTopic(d(this).parent().get(0))
        },
        hoverIn: function () {
            if (d.ObjectPlanet.session && (d.ObjectPlanet.session.login == this.json.login || d.ObjectPlanet.session.login == "admin")) {
                d(this.deleteButton).css("visibility", "visible").deleteButton("paint")
            } else {
                d(this.deleteButton).css("visibility", "hidden")
            }
        },
        hoverOut: function () {
            d(this.deleteButton).css("visibility", "hidden")
        },
        setSubmitState: function (g) {
            var h = d(this.forum.newTopicForm.subject).val();
            if (h != "") {
                d(this.forum.newTopicForm.submit).removeAttr("disabled").css("cursor", "pointer")
            } else {
                d(this.forum.newTopicForm.submit).attr("disabled", "disabled").css("cursor", "default")
            }
        },
        storeNewTopic: function (g) {
            f.storeNewTopic.apply(this.self)
        },
        cancelNewTopic: function (g) {
            d(this.self.newTopicForm.subject).add(this.self.newTopicForm.body.input).val("");
            d(this.self.newTopicForm).hide()
        }
    };
    var a = function (n, k, l, m, j, i, h) {
        var h = h === true ? " adminOnly=true" : "";
        var g = "";
        g += '<tr class="category">';
        g += '<td><div class="forum-category-name link hand"' + h + ' category="' + n + '">' + k + "</div>";
        g += "<label>" + (l != null ? l : "") + "</label></td>";
        g += '<td class="right">' + (m ? m : "0") + "</td>";
        g += '<td class="right">' + (j ? j : "0") + "</td>";
        g += '<td class="right">' + (i > 0 ? d.ObjectPlanet.dateStr(i, false) : "") + "</td>";
        g += "</tr>";
        return g
    };
    var c = function (k, n) {
        var i = k.lastPost != null ? k.lastPost : k.created;
        var l = k._id && k._id.$oid ? (' topicId="' + k._id.$oid + '"') : "";
        var j = d.ObjectPlanet.decode(k.subject).replace(/</g, "&lt;").replace(/>/g, "&gt;");
        var g = n != true ? ' style="display: none;"' : "";
        var h = '<tr class="topic"' + l + ">";
        h += '<td class="forum-topic-subject link">' + j + "</td>";
        h += "<td" + g + ">" + (k.category != null ? k.category : "") + "</td>";
        h += '<td class="nowrap">' + (k.name != null ? k.name : "") + "</td>";
        h += '<td class="nowrap">' + d.ObjectPlanet.dateStr(i, false) + "</td>";
        h += '<td class="replies right">' + (k.replies != null ? k.replies.length : "0") + "</td>";
        h += '<td><span class="delete-button" style="visibility: hidden;"></span></td>';
        h += "</tr>";
        var m = d(h).prop("json", k).hover(e.hoverIn, e.hoverOut).get(0);
        m.deleteButton = d(m).find(".delete-button").get(0);
        return m
    }
})(jQuery);
(function (c) {
    c.fn.forumThread = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (h) {
            var f = c(this).prop("json", h).addClass("forum-thread fullWidth").get(0);
            this.content = c("<table></table>").prop("index", 0).prop("self", this).forumEntry(h, {
                name: false,
                deleteItem: false
            }).hover(d.hoverIn, d.hoverOut).bind("update", d.updateContent).appendTo(this).get(0);
            this.replies = [];
            for (var g = 0; h.replies && g < h.replies.length; g++) {
                this.replies[g] = b.apply(f, [h.replies[g], g + 1])
            }
            if (this.replies.length > 0) {
                c(this).append(this.replies)
            }
            c(this.replies).bind("toggleEdit", function (i) {
                c(f.replyButton).css("visibility", i.open ? "hidden" : "visible")
            });
            this.replyButton = c("<button>Reply</button>").bind("click", d.toggleReply).get(0);
            this.replyButton.self = this;
            this.cancelButton = c("<button>Cancel</button>").bind("click", d.cancelReply).get(0);
            this.cancelButton.self = this;
            this.email = c('<label class="hand email" style="display: none;"><input type="checkbox" class="hand">Email me replies</label>').get(0);
            this.email.check = c(this.email).find("input").get(0);
            this.replyContent = c(c.autoSizeTextArea({
                label: "reply",
                classes: "reply fullWidth",
                attributes: 'encoded="true"'
            })).hide().bind("change", d.replyChange).autoSizeTextArea({
                horizontal: false
            }).get(0);
            this.replyContent.self = this;
            this.reply = c('<div class="reply"></div>').html(this.replyContent).append(this.replyButton).append(this.cancelButton).append(this.email).appendTo(this).get(0);
            c(this.cancelButton).hide()
        },
        addReply: function () {
            if (c(this.replyButton).text().indexOf("Submit") == 0) {
                var g = a.getJSON.apply(this);
                if (g != null && g.replies instanceof Array && g.replies.length > 0) {
                    if (this.replyContent.created) {
                        g.replies[g.replies.length - 1].created = this.replyContent.created
                    }
                    var h = b.apply(this, [g.replies[g.replies.length - 1], g.replies.length]);
                    c(h).find("td.info").css("padding-right", c(this.content).find("td.info").css("padding-right"));
                    var f = this;
                    c(h).bind("toggleEdit", function (i) {
                        c(f.replyButton).css("visibility", i.open ? "hidden" : "visible")
                    });
                    this.replies.push(c(h).insertBefore(this.reply).get(0));
                    c(this.replyButton).text("Reply");
                    c(this.replyContent).add(this.cancelButton).add(this.email).hide();
                    c(this.replyContent.input).val("")
                }
            }
        },
        removeReply: function (f) {
            c(this.replies.splice(f - 1, 1)).remove();
            this.content.json.replies.splice(f - 1, 1);
            for (var g = 0; g < this.replies.length; g++) {
                this.replies[g].index = g + 1
            }
        },
        getJSON: function () {
            var f = this.content.json;
            if (f.replies) {
                f.replies.length = this.replies.length
            }
            if (c(this.replyContent).is(":visible")) {
                if (f.replies == null) {
                    f.replies = []
                }
                f.replies[this.replies ? this.replies.length : 0] = {
                    userId: (c.ObjectPlanet.session && c.ObjectPlanet.session.uid ? c.ObjectPlanet.session.uid : null),
                    name: (c.ObjectPlanet.session && c.ObjectPlanet.session.name ? c.ObjectPlanet.session.name : null),
                    login: (c.ObjectPlanet.session && c.ObjectPlanet.session.login ? c.ObjectPlanet.session.login : null),
                    body: encodeURIComponent(c(this.replyContent.input).val())
                };
                if (c(this.email.check).is(":checked")) {
                    f.replies[f.replies.length - 1].emailReplies = true
                }
            }
            return f != null ? f : {}
        }
    };
    var e = {
        saveReply: function (h) {
            var f = this;
            var i = {
                body: encodeURIComponent(c(this.replyContent.input).val())
            };
            if (c(this.email.check).is(":checked")) {
                i.emailReplies = true
            }
            var g = {
                action: "forum.addReply",
                topicId: h,
                data: JSON.stringify(i)
            };
            if (c.ObjectPlanet.testMode == true) {
                g.noEmail = true
            }
            c.serverPost(g, function (j) {
                if (j.resultCode == c.ObjectPlanet.ResultCode.OK) {
                    f.replyContent.created = j.data.replies[j.data.replies.length - 1].created;
                    a.addReply.apply(f)
                }
            })
        },
        deleteReply: function (g) {
            var f = this;
            c.serverRequest({
                action: "forum.deleteReply",
                topicId: this.json._id.$oid,
                userId: g.json.userId,
                created: g.json.created
            }, function (h) {
                if (h.resultCode == c.ObjectPlanet.ResultCode.OK) {
                    a.removeReply.apply(f, [g.index])
                }
            })
        },
        updateReply: function (f) {
            if (this.json._id) {
                c.serverPost({
                    action: "forum.updateReply",
                    topicId: this.json._id.$oid,
                    userId: f.json.userId,
                    created: f.json.created,
                    body: encodeURIComponent(c(f.edit).val())
                }, function (g) {
                    if (g.resultCode == c.ObjectPlanet.ResultCode.OK) {
                        f.json.body = encodeURIComponent(c(f.edit).val());
                        var h = c(f.edit).val().replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br>");
                        c(f.body).html(h);
                        c(f.edit).add(f.edit.buttons).hide()
                    }
                })
            }
        },
        updateContent: function (f) {
            if (this.json._id) {
                c.serverPost({
                    action: "forum.updateBody",
                    topicId: this.json._id.$oid,
                    body: encodeURIComponent(c(f.edit).val())
                }, function (g) {
                    if (g.resultCode == c.ObjectPlanet.ResultCode.OK) {
                        c(f.body).html(c(f.edit).val().replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br>"));
                        c(f.edit).add(f.edit.buttons).hide()
                    }
                })
            }
        }
    };
    var d = {
        toggleReply: function (h) {
            var f = this.self;
            if (c(f.replyButton).text() == "Reply" && c.ObjectPlanet.session && c.ObjectPlanet.session.name == null) {
                c(f.replyButton).hide();
                c(f.cancelButton).add(f.replyContent).show();
                c(f.replyContent.input).attr("disabled", "disabled").val("Sorry, you can only reply if logged in using your facebook account")
            } else {
                if (c(f.replyButton).text() == "Reply") {
                    var g = c.ObjectPlanet.session ? c.ObjectPlanet.session.name : null;
                    if (c(f.replyContent.input).val() == "") {
                        c(this).attr("disabled", "disabled").css("cursor", "default")
                    }
                    if (c(f.replyContent.input).val() != "") {
                        c(this).removeAttr("disabled").css("cursor", "pointer")
                    }
                    c(f.replyContent).autoSizeTextArea("adjust");
                    c(f.cancelButton).add(f.replyContent).add(f.email).show();
                    c(f.replyButton).text("Submit" + (g != null ? (" as " + g) : ""));
                    c(f.email.check).removeAttr("checked");
                    c(f.replyContent.label).text(g != null ? g : "");
                    c(f.replyContent.input).removeAttr("disabled").focus()
                } else {
                    if (c(f.replyContent.input).val().trim() != "") {
                        c(this).removeAttr("disabled");
                        c(f.email).hide();
                        if (f.content.json._id) {
                            e.saveReply.apply(f, [f.content.json._id.$oid])
                        }
                    }
                }
            }
        },
        cancelReply: function (f) {
            c(this.self.replyButton).text("Reply").removeAttr("disabled").css("cursor", "pointer").show();
            c(this.self.cancelButton).add(this.self.replyContent).add(this.self.email).hide();
            c(this.self.replyContent.input).val("")
        },
        replyChange: function (f) {
            if (c(this.input).val() == "") {
                c(this.self.replyButton).attr("disabled", "disabled").css("cursor", "default")
            }
            if (c(this.input).val() != "") {
                c(this.self.replyButton).removeAttr("disabled").css("cursor", "pointer")
            }
        },
        hoverIn: function () {
            if (c.ObjectPlanet.session && (c.ObjectPlanet.session.login == "admin" || c(this).forumEntry("isOwner", c.ObjectPlanet.session.login))) {
                c(this).forumEntry("showMenuButton", true)
            }
        },
        hoverOut: function () {
            c(this).forumEntry("showMenuButton", false)
        },
        deleteReply: function () {
            e.deleteReply.apply(this.self, [this])
        },
        updateReply: function () {
            e.updateReply.apply(this.self, [this])
        },
        updateContent: function () {
            e.updateContent.apply(this.self, [this])
        }
    };
    var b = function (g, f) {
        return c("<table></table>").forumEntry(g).hover(d.hoverIn, d.hoverOut).bind("delete", d.deleteReply).bind("update", d.updateReply).prop("index", f).prop("self", this).get(0)
    }
})(jQuery);
(function (b) {
    b.fn.forumEntry = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (j, i) {
            var f = b(this).addClass("forum-entry fullWidth").attr("cellspacing", "0").attr("cellpadding", "0").get(0);
            this.json = j;
            var c = j && j.body != null ? j.body : "";
            c = b.ObjectPlanet.decode(c).replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "<br>");
            var h = j && j.created != null ? b.ObjectPlanet.dateStr(j.created, false) : "";
            var g = (i && i.name == false) ? "" : j && j.name != null ? j.name : "";
            var e = '<tr><td class="fullWidth top"><span class="arrow"></span>';
            e += '<div class="body">' + c + '</div></td><td class="info nowrap top right">';
            e += '<label class="name break">' + g + "</label>";
            e += "<label>" + h + '</label></td><td class="top">';
            e += '<div class="menu center invisible"><span class="down"></span></div></td></tr>';
            b(this).html(e);
            this.body = b(this).find("div.body").bind("click", function (k) {
                if (k.target == this && !b(f.menuButton).hasClass("invisible")) {
                    a.edit.apply(f)
                }
            }).get(0);
            var d = [{
                label: "Edit",
                callback: function () {
                    a.edit.apply(f)
                }
            }];
            if (!i || i.deleteItem != false) {
                d[1] = {
                    label: "Delete",
                    callback: function () {
                        b(f).trigger("delete")
                    }
                }
            }
            this.menuButton = b(this).find(".menu").popdown({
                align: "left",
                disabled: true,
                standalone: true,
                offsetX: 4,
                offsetY: 1,
                items: d
            }).css("cursor", "default").get(0)
        },
        showMenuButton: function (c) {
            b(this.menuButton).popdown("setEnabled", c === true);
            b(this.menuButton).css("cursor", c === true ? "pointer" : "default");
            b(this.menuButton).toggleClass("invisible", c != true)
        },
        isOwner: function (c) {
            return c === this.json.login
        },
        edit: function (c) {
            if (this.edit == null) {
                var d = b(this).find("td:eq(0)").get(0);
                this.edit = b('<textarea class="borderBox" encoded="true">' + b.ObjectPlanet.decode(this.json.body) + "</textarea>").prop("self", this).css({
                    width: b(d).width(),
                    height: b(d).height() + 2,
                    font: b(this.body).css("font")
                }).bind("blur", function () {
                    a.edit.apply(this.self, [false])
                }).hide().appendTo(d).get(0);
                this.edit.buttons = b('<span class="editButtons borderBox"><button class="hand">Update</button><button class="hand">Cancel</button></span>').hide().appendTo(d).get(0);
                this.edit.cancel = b(this.edit.buttons).find("button:contains(Cancel)").bind("mousedown", function (e) {
                    b(this.self.edit).val(b.ObjectPlanet.decode(this.self.json.body));
                    a.edit.apply(this.self, [false])
                }).prop("self", this).get(0);
                this.edit.submit = b(this.edit.buttons).find("button:contains(Update)").bind("mousedown", function (e) {
                    b(this.self).trigger("update")
                }).prop("self", this).get(0)
            }
            b(this.edit).add(this.edit.buttons).toggle(c != false);
            if (c != false) {
                b(this.edit).focus()
            }
            b(this).trigger({
                type: "toggleEdit",
                open: (c == true || c == undefined)
            })
        }
    }
})(jQuery);
(function (b) {
    b.fn.opinioLogin = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d, e) {
            var c = this;
            this.loginState = false;
            this.eventBus = e;
            this.login = b('<div style="position: relative;">' + b.inputBox({
                label: "email",
                large: true,
                attributes: 'type="text" style="width: 100%;" tabindex="1"'
            }) + b.inputBox({
                label: "password",
                large: true,
                attributes: 'type="password" style="width: 100%;" tabindex="2"'
            }) + '<button class="forgot" tabindex="2">Send password email</button><div class="controls"><input type="checkbox" class="hand" tabindex="3"><label class="accept">I accept the <span class="link">user agreement</span></label><span style="float: right;"><label class="hand">forgot password</label> | <label class="hand">create account</label></span><br><input type="checkbox" class="hand" tabindex="4"><label class="keep">Keep me logged in for 30 days</label></div><div class="op-login-fb"><span></span><label>Log in with Facebook</label></div><textarea class="agreement borderBox" readonly="readonly" style="display: none;"></textarea><span class="agreement-close frame-close"></span></div>').get(0);
            this.login.name = b(this.login).find("> div:eq(0)").inputBox().get(0);
            this.login.password = b(this.login).find("> div:eq(1)").inputBox().get(0);
            this.login.accept = b(this.login).find("input[type=checkbox]:eq(0)").bind("change", function (f) {
                a.setFBLoginStatus.apply(c, [b(this).is(":checked")]);
                b.ObjectPlanet.setCookie("accept", b(this).is(":checked"), 30)
            }).get(0);
            this.login.keep = b(this.login).find("input[type=checkbox]:eq(1)").get(0);
            this.login.agreement = b(c.login).find(".agreement").get(0);
            this.login.agreement.link = b(this.login).find(".accept .link").bind("click", function () {
                b(c.login.agreement).add(c.login.agreement.close).show()
            }).get(0);
            this.login.agreement.close = b(this.login).find(".agreement-close").bind("click", function () {
                b(this).add(c.login.agreement).hide()
            }).hide().get(0);
            this.login.fb = b(this.login).find(".op-login-fb").bind("click", function () {
                if (b(c.login.accept).is(":checked")) {
                    b.facebookLogin()
                }
            }).css("opacity", "0.3").get(0);
            this.login.forgot = b(this.login).find("label:contains(forgot password)").bind("click", function () {
                b(this).text(b(this).text() == "forgot password" ? "login" : "forgot password");
                var f = b(c.login.password);
                var h = b(c.login.forgotButton);
                var g = b.ObjectPlanet.unitLess(h.css("margin-bottom"));
                h.height(f.height() - g).toggle(b(this).text() == "login");
                f.toggle(b(this).text() == "forgot password");
                b(c.ok).attr("disabled", b(this).text() == "login")
            }).get(0);
            this.login.forgotButton = b(this.login).find("button").hide().bind("click", function () {
                if (!b.ObjectPlanet.isValidEmail(b(c.login.name.input).removeClass("error").val())) {
                    b(c.login.name.input).addClass("error").trigger("focus")
                } else {
                    b(this).text("Sending email...").attr("disabled", true);
                    b.serverRequest({
                        action: "user.forgotPassword",
                        email: b(c.login.name.input).val()
                    }, function (f) {
                        b(c.login.forgotButton).attr("disabled", false).text("Send password email");
                        if (f.resultCode == b.ObjectPlanet.ResultCode.OK) {
                            b(c.message).text("Password email sent, check your email");
                            b(c.login.forgot).trigger("click");
                            b(c.login.password.input).trigger("focus")
                        } else {
                            b(c.message).text(f.error ? f.error : "Error: Could not send password email")
                        }
                    }, function () {
                        b(c.login.forgotButton).text("Send password email").attr("disabled", false);
                        b(c.message).text("Error: Could not send password email")
                    })
                }
            }).get(0);
            this.createAccount = b('<div class="create" style="position: relative; ">' + b.inputBox({
                label: "email",
                large: true,
                classes: "error",
                attributes: 'type="text" value="[your@email.address]" tabindex="1"'
            }) + b.inputBox({
                label: "password",
                large: true,
                classes: "error",
                attributes: 'type="password" tabindex="2"'
            }) + b.inputBox({
                label: "retype password",
                large: true,
                classes: "error",
                attributes: 'type="password" tabindex="3"'
            }) + b.inputBox({
                start: "<textarea",
                end: "</textarea>",
                classes: "license borderBox",
                attributes: 'tabindex="4" readonly="true"'
            }) + '<label class="accept-label"><input type="checkbox" tabindex="5">I accept the license agreement</label><label class="back">back to login</label></div>').hide().get(0);
            this.createAccount.name = b(this.createAccount).find("> div:eq(0)").inputBox().get(0);
            this.createAccount.password = b(this.createAccount).find("> div:eq(1)").inputBox().get(0);
            this.createAccount.password2 = b(this.createAccount).find("> div:eq(2)").inputBox().get(0);
            this.createAccount.license = b(this.createAccount).find("textarea").inputBox({
                reset: false,
                disabled: false
            }).get(0);
            this.licenseAcceptLabel = b(this.createAccount).find(".accept-label").get(0);
            this.licenseCheck = b(this.licenseAcceptLabel).find("input").bind("change", function () {
                a.setOKState.apply(c)
            }).get(0);
            this.message = b('<label class="message"></label>').get(0);
            b(this).addClass("op-login").append(this.login).append(this.createAccount).append(this.message);
            b(this).dialogBox({
                title: "Sign in",
                autoOpen: false,
                ok: {
                    label: "OK",
                    callback: function () {
                        if (b(c.login).is(":visible")) {
                            a.login.apply(c, [{
                                login: b(c.login.name.input).val(),
                                password: b(c.login.password.input).val(),
                                sid: b.ObjectPlanet.session != null ? b.ObjectPlanet.session.sid : "",
                                skey: b.ObjectPlanet.session != null ? b.ObjectPlanet.session.skey : "",
                                cookie: true,
                                keepLoggedIn: b(c.login.keep).is(":checked"),
                                save: c.autoSave
                            }]);
                            return false
                        } else {
                            var f = b(c.licenseCheck).prop("checked");
                            if (!b(c.createAccount).find("input").hasClass("error") && f == true) {
                                b(c).progressIndicator("start", {
                                    plain: true
                                });
                                a.createAccount.apply(c, [{
                                    email: b(c.createAccount.name.input).val(),
                                    password: b(c.createAccount.password.input).val()
                                }])
                            } else {
                                b(c.createAccount).find("input.error").blink()
                            }
                            return false
                        }
                    }
                },
                cancel: {
                    label: "Cancel",
                    callback: function () {
                        b(c).dialogBox("hide");
                        b(c.message).text("")
                    }
                }
            });
            b(this.ok).attr("tabindex", 6);
            b(this.cancel).attr("tabindex", 7);
            d = b.extend({
                sendemail: true,
                licenseFile: "license.txt"
            }, d || {});
            this.options = b.extend(this.options, d);
            this.createAccountLabel = b(this.login).find("label:contains(create account)").bind("click", function (f) {
                b(c.login).add(c.createAccount).toggle();
                b(c.message).text("");
                b(c).dialogBox("setTitle", "Create account");
                b(c.createAccount.name.input).trigger("focus");
                a.setOKState.apply(c)
            }).get(0);
            this.backToLogin = b(this.createAccount).find(".back").bind("click", function () {
                b(c.login).add(c.createAccount).toggle();
                b(c).dialogBox("setTitle", "Sign in");
                b(c.ok).text("OK").removeAttr("disabled").css("cursor", "pointer");
                b(c.login.name.input).trigger("focus")
            }).get(0);
            b(this.login.name.input).add(this.login.password.input).bind("focus", function (f) {
                b(this).trigger("select")
            }).bind("keyup", function (f) {
                if (f.keyCode == 13 && b(c.login.accept).is(":checked")) {
                    a.login.apply(c, [{
                        login: b(c.login.name.input).val(),
                        password: b(c.login.password.input).val(),
                        sid: b.ObjectPlanet.session.sid,
                        skey: b.ObjectPlanet.session.skey,
                        cookie: true,
                        keepLoggedIn: b(c.login.keep).is(":checked"),
                        save: c.autoSsave
                    }])
                }
            });
            b(this.createAccount.name.input).bind("change", function (f) {
                if (!b.ObjectPlanet.isValidEmail(b(this).removeClass("error").val())) {
                    b(this).addClass("error")
                }
                a.setOKState.apply(c)
            });
            b(this.createAccount.password.input).add(this.createAccount.password2.input).bind("change", function (f) {
                b(c.createAccount.password.input).add(c.createAccount.password2.input).addClass("error");
                if (b.trim(b(c.createAccount.password.input).val()).length > 0) {
                    b(c.createAccount.password.input).removeClass("error");
                    if (b(c.createAccount.password.input).val() == b(c.createAccount.password2.input).val()) {
                        b(c.createAccount.password2.input).removeClass("error")
                    }
                }
                a.setOKState.apply(c)
            });
            b.get(this.options.licenseFile, function (f) {
                b(c.createAccount.license).add(c.login.agreement).val(f)
            })
        },
        setFBLoginStatus: function (c) {
            b(this.login.fb).css("opacity", c ? "1" : "0.3");
            if (c) {
                b(this.login.fb).attr("tabindex", 4)
            }
            if (!c) {
                b(this.login.fb).removeAttr("tabindex")
            }
            b(this.login.fb).add(b(this.login.fb).find("label")).css("cursor", c ? "pointer" : "default")
        },
        setOKState: function () {
            if (b(this.login).is(":visible")) {
                b(this.ok).text("OK").removeAttr("disabled").css("cursor", "pointer")
            } else {
                b(this.ok).text("Email activation link");
                var c = b.trim(b(this.createAccount.name.input).val()) != "";
                c &= b.trim(b(this.createAccount.password.input).val()) != "";
                c &= b(this.createAccount.password.input).val() == b(this.createAccount.password2.input).val();
                c &= b(this.licenseCheck).is(":checked");
                if (c != true) {
                    b(this.ok).attr("disabled", "disabled").css("cursor", "default")
                }
                if (c == true) {
                    b(this.ok).removeAttr("disabled").css("cursor", "pointer")
                }
            }
        },
        open: function (d) {
            var c = this;
            if (this.loginState == false) {
                d = b.extend({
                    save: false
                }, d || {});
                this.autoSave = d.save ? d.save : false;
                b(this.message).text("");
                b(this.createAccount).hide();
                b(this.login).show();
                b(this.ok).text("OK").removeAttr("disabled").css("cursor", "pointer");
                b(this.login.name.input).val(d.login ? d.login : b.ObjectPlanet.getCookie("login") != null ? b.ObjectPlanet.getCookie("login") : "");
                b(this.login.password.input).val(d.password ? d.password : "");
                a.setFBLoginStatus.apply(this, [b.ObjectPlanet.getCookie("accept") == "true"]);
                if (b.ObjectPlanet.getCookie("accept") == "true") {
                    b(this.login.accept).attr("checked", "checked")
                } else {
                    b(this.login.accept).removeAttr("checked")
                }
                b(this).dialogBox("setTitle", "Sign in").dialogBox("show");
                var c = this;
                if (b.ObjectPlanet.getCookie("accept") != "true") {
                    b(this.ok).attr("disabled", "disabled").css("cursor", "default")
                }
                b(this.login.accept).bind("change", function (e) {
                    if (b(this).is(":checked")) {
                        b(c.ok).removeAttr("disabled")
                    }
                    if (!b(this).is(":checked")) {
                        b(c.ok).attr("disabled", "disabled")
                    }
                    b(c.ok).css("cursor", b(this).is(":checked") ? "pointer" : "default")
                });
                if (b(this.login.name.input).val() != "") {
                    b(this.login.password.input).trigger("focus")
                } else {
                    b(this.login.name.input).trigger("focus")
                }
            }
        },
        openMini: function (d, e) {
            var c = this;
            if (this.mini != null) {
                return this.mini
            }
            this.mini = b.ObjectPlanet.miniDialog({
                event: d && d.event ? d.event : undefined,
                content: ('<div class="op-login-mini"><label class="break">Timed out - enter password:</label><input type="password" class="borderBox fullWidth"><div class="op-login-fb" style="display: block; font-size: 11px;"><span class="hand"></span><label style="cursor: pointer;">Or login with Facebook</label></div></div>')
            });
            b(this.mini.back).bind("click", function (f) {
                if (d && d.cancel) {
                    d.cancel()
                }
            });
            b(this.mini).find("input").bind("keyup", function (f) {
                if (f.keyCode == 27) {
                    if (c.mini != null) {
                        b(c.mini.back).remove();
                        delete c.mini
                    }
                    if (d && d.cancel) {
                        d.cancel()
                    }
                } else {
                    if (f.keyCode == 13 && b.trim(b(this).val()) == "") {
                        b.ObjectPlanet.wobble(c.mini, 2)
                    } else {
                        if (f.keyCode == 13) {
                            b.serverRequest({
                                action: "user.login",
                                login: b.ObjectPlanet.session.login,
                                sid: b.ObjectPlanet.session.sid,
                                skey: b.ObjectPlanet.session.skey,
                                password: b(this).val()
                            }, function (g) {
                                if (g.resultCode == b.ObjectPlanet.ResultCode.OK) {
                                    b.ObjectPlanet.session.sid = g.data.sid;
                                    b.ObjectPlanet.session.skey = g.data.skey;
                                    b.ObjectPlanet.setCookie("sid", g.data.sid + "&" + g.data.skey);
                                    if (c.mini != null) {
                                        b(c.mini.back).remove();
                                        delete c.mini
                                    }
                                    b(b.ObjectPlanet.statusLabel).text("")
                                } else {
                                    b.ObjectPlanet.wobble(c.mini, 2)
                                } if (e) {
                                    e(g)
                                }
                            })
                        }
                    }
                }
            }).focus();
            b(this.mini).find(".op-login-fb").bind("click", function () {
                b.facebookLogin()
            });
            this.miniOpen = true;
            return this.mini
        },
        login: function (d) {
            if (this.loginState == true) {
                return
            }
            var e = {
                action: "user.login"
            };
            if (d.login) {
                e.login = d.login
            }
            if (d.password) {
                e.password = d.password
            }
            if (d.sid) {
                e.sid = d.sid
            }
            if (d.skey) {
                e.skey = d.skey
            }
            if (d.adminsid) {
                e.adminsid = d.adminsid
            }
            if (d.adminskey) {
                e.adminskey = d.adminskey
            }
            if (d.keepLoggedIn) {
                e.keepLoggedIn = 30
            }
            if (d.facebook) {
                e.facebook = d.facebook
            }
            if (d.access_token) {
                e.access_token = d.access_token
            }
            var c = this;
            b.opAjax({
                data: {
                    query: JSON.stringify(e)
                },
                success: function (f) {
                    if (f.resultCode == b.ObjectPlanet.ResultCode.OK) {
                        var h = b.ObjectPlanet.session;
                        if (window.opener != null) {
                            try {
                                h = b(window.opener.document).find("#murveySession").get(0);
                                b(window.opener.document).find(".op-dialog-mini").parent().remove()
                            } catch (g) {}
                        }
                        if (f.data != null) {
                            if (h != null) {
                                b(h).attr("sid", f.data.sid);
                                h.sid = f.data.sid;
                                h.skey = f.data.skey;
                                h.login = f.data.login;
                                h.uid = f.data.uid;
                                h.passwordSet = f.data.passwordSet
                            }
                            c.loginState = f.data.login ? true : false;
                            c.loginName = f.data.login;
                            if (f.data.name && h != null) {
                                h.name = f.data.name
                            }
                        }
                        if (b.ObjectPlanet.loginDialog && b.ObjectPlanet.loginDialog.mini) {
                            b(b.ObjectPlanet.loginDialog.mini.back).remove()
                        }
                        if (d && d.cookie == true && f.data != null) {
                            b.ObjectPlanet.setCookie("sid", f.data.sid + "&" + f.data.skey, 30);
                            b.ObjectPlanet.setCookie("login", f.data.login, 30)
                        }
                        b(c).dialogBox("hide");
                        if (f.data && f.data.login != null) {
                            c.eventBus.trigger("user.loggedIn", {
                                uid: f.data.uid,
                                loginName: c.loginName,
                                currentSurvey: f.data.currentSurvey,
                                save: c.autoSave
                            })
                        }
                        if (d.success) {
                            d.success(f)
                        }
                    } else {
                        if (f.resultCode == b.ObjectPlanet.ResultCode.INVALID_LOGIN) {
                            b(c.message).addClass("op-web-message-error-color").text("Invalid login");
                            if (d.fail) {
                                d.fail(f)
                            }
                        } else {
                            if (d.fail) {
                                d.fail(f)
                            }
                        }
                    }
                }
            })
        },
        logout: function () {
            var c = this;
            b.serverRequest({
                action: "user.logout",
                sid: b.ObjectPlanet.session.sid,
                skey: b.ObjectPlanet.session.skey
            }, function (d) {
                delete b.ObjectPlanet.session.login;
                delete b.ObjectPlanet.session.name;
                b.ObjectPlanet.deleteCookie("sid");
                c.loginState = false;
                c.loginName = "";
                b(c).dialogBox("hide");
                c.eventBus.trigger("user.loggedOut")
            })
        },
        createAccount: function (d) {
            var c = this;
            b.serverRequest({
                action: "user.create",
                email: d.email,
                password: d.password,
                sendemail: this.options.sendemail
            }, function (e) {
                b(c).progressIndicator("stop");
                if (e.resultCode == b.ObjectPlanet.ResultCode.OK) {
                    b(c).dialogBox("hide");
                    b.autoLogin.apply(c)
                } else {
                    if (e.resultCode == b.ObjectPlanet.ResultCode.INVALID_INPUT) {
                        b(c.message).addClass("op-web-message-error-color").html(e.error ? e.error : "Invalid input")
                    } else {
                        if (e.resultCode == b.ObjectPlanet.ResultCode.APPLICATION_ERROR) {
                            b(c.message).addClass("op-web-message-error-color").html("Internal error: " + e.message)
                        }
                    }
                }
            })
        }
    }
})(jQuery);
(function (a) {
    a.facebookLogin = function (c) {
        var d = location.protocol + "//" + location.host + location.pathname + "facebook.html";
        if (c && c.getName == true) {
            d += "?getName=true"
        }
        var b = "https://www.facebook.com/dialog/oauth?client_id=265506903473589&redirect_uri=" + d + "&response_type=token&scope=email&display=popup";
        window.open(b, "facebook", "width=500, height=350")
    };
    a.facebookAutorizedLogin = function () {
        var b = a.ObjectPlanet.facebookAccess(location.hash);
        if (document.location.search && document.location.search == "?getName=true") {
            a(window.document).find("body").text("Trying to access the facebook name...");
            if (b && b.access_token != null && window.opener != null) {
                var c = a(window.opener.document).find("#murveySession").get(0);
                a(window.opener.document).find("body > .op-murvey").murvey("getFacebookName", {
                    sid: c.sid,
                    skey: c.skey,
                    login: c.login,
                    access_token: b.access_token,
                    success: function (d) {
                        a(window.document).find("body").text("Name was set successfully");
                        window.close()
                    },
                    fail: function (d) {
                        a(window.document).find("body").text("Sorry, getting the name failed :(")
                    }
                })
            } else {
                a(window.document).find("body").text("Sorry, getting the name failed :(")
            }
        } else {
            a(window.document).find("body").text("Trying to log in...");
            if (b && b.access_token != null && window.opener != null) {
                var c = a(window.opener.document).find("#murveySession").get(0);
                a(window.opener.document).find("body > .op-murvey").murvey("login", {
                    sid: a(c).attr("sid"),
                    cookie: true,
                    access_token: b.access_token,
                    success: function (d) {
                        window.close()
                    },
                    fail: function (d) {
                        a(window.document).find("body").text("Sorry, login failed :(")
                    }
                })
            } else {
                a(window.document).find("body").text("Sorry, login failed :(")
            }
        }
    }
})(jQuery);
(function (b) {
    b.autoLogin = function () {
        var f = b('<div class="op-auto-login"><h1>Thank You!</h1><h2>Please check your inbox for the account activation link</h2><p class="message">(will try auto-login in 15 seconds)</div>').framed().framed("show").get(0);
        var e = b(f).find("p").get(0);
        if (b.ObjectPlanet.testMode == true) {
            return
        }
        var c = this;
        var d = 14;
        var g = setInterval(function () {
            b(e).text("(will try auto-login in " + d + " second" + (d > 1 ? "s)" : ")"));
            if (--d <= 0) {
                clearInterval(g);
                b(e).text("(trying to log in - waiting for account activation)");
                a.apply(c, [f])
            }
        }, 1000);
        b(f.closeButton).bind("click", function (h) {
            clearInterval(g)
        })
    };
    var a = function (d) {
        var c = this;
        var e = setInterval(function () {
            b(b.ObjectPlanet.loginDialog).opinioLogin("login", {
                sid: b.ObjectPlanet.session.sid,
                skey: b.ObjectPlanet.session.skey,
                success: function (f) {
                    clearInterval(e);
                    b(d).framed("close")
                }
            })
        }, 2000);
        b(d.closeButton).bind("click", function (f) {
            clearInterval(e)
        })
    }
})(jQuery);
if (!jQuery.ObjectPlanet) {
    jQuery.ObjectPlanet = {}
}
jQuery.ObjectPlanet.VERSION = "0.9.9.4";
jQuery.ObjectPlanet.REVISION = "9926";
jQuery.ObjectPlanet.REVISION_DATE = "2013-12-17 15:16 CET";
(function (b) {
    b.ObjectPlanet.accountModule = function (c) {
        if (b.ObjectPlanet.accountModule.module == null) {
            b.ObjectPlanet.accountModule.module = b("<div></div>").accountModule(c).framed().get(0);
            b(b.ObjectPlanet.accountModule.module.frameBorder).addClass("account-module-frame");
            setTimeout(function () {
                b(window).bind("resize", function (e) {
                    b(b.ObjectPlanet.accountModule.module).module("adjust")
                })
            }, 500)
        }
        var d = b.ObjectPlanet.accountModule.module;
        b(d).accountModule("loadPlans", function () {
            if (c != null && c.user != null) {
                b(d).accountModule("set", c.user)
            }
            if (c != null && c.show != null) {
                b(d.menu).find("label:contains(" + c.show + ")").trigger("click");
                b(d.plans).accountPlans("enable", c.plan)
            }
            b(d).framed("show").module("adjust")
        });
        return d
    };
    b.fn.accountModule = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d) {
            var c = b(this).addClass("account-module").get(0);
            this.eventBus = d && d.eventBus ? d.eventBus : new b.ObjectPlanet.EventBus();
            this.state = b("<div></div>").accountState(d).get(0);
            this.plans = b("<div></div>").accountPlans(d).get(0);
            this.password = b("<div></div>").accountPassword(d).get(0);
            b.serverRequest({
                action: "payment.chargeOn"
            }, function (e) {
                if (d && d.chargeOn == true || e && e.data == true) {
                    b(c).module({
                        title: "Account",
                        menu: ["State", "Plans", "Password"],
                        content: [c.state, c.plans, c.password]
                    })
                } else {
                    b(c).module({
                        title: "Account",
                        menu: ["Password"],
                        content: [c.password]
                    })
                }
            });
            this.eventBus.listen("paypal.done paypal.cancel", function (e) {
                a.reloadUser.apply(c)
            });
            b(this.state).bind("show.plans", function (e) {
                b(c).module("select", 1);
                var f = b(c.plans.table).find(".account-plan").filter(".active").find(".head").get(0);
                if (b(f).hasClass("free")) {
                    return
                }
                if (e.action == "extend") {
                    f = b(c.plans.table).find(".account-plan").filter(".active").get(0);
                    if (f != null) {
                        b(f.button).popdown("showMenu")
                    }
                } else {
                    if (e.action == "upgrade") {
                        var f = b(c.plans.table).find(".pro").closest(".account-plan").get(0);
                        if (f != null) {
                            b(f.button).popdown("showMenu")
                        }
                    }
                }
            })
        },
        set: function (c) {
            b.ObjectPlanet.me = c;
            b(this.state).accountState("set", c);
            b(this.plans).accountPlans("setUser", c);
            b(this.password).accountPassword("set", c)
        },
        loadPlans: function (d) {
            var c = this;
            b(this.plans).accountPlans("loadPlans", function (e) {
                if (e != null) {
                    b(c.state).prop("plans", e).accountState("set")
                }
                if (d != null) {
                    d.apply(c)
                }
            })
        },
        reloadUser: function () {
            var c = this;
            b.serverRequest({
                action: "user.me"
            }, function (d) {
                if (d && d.resultCode == b.ObjectPlanet.ResultCode.OK && d.data != null) {
                    a.set.apply(c, [d.data])
                }
            })
        },
        getFacebookName: function (d) {
            var c = this;
            b.serverRequest({
                action: "user.setName",
                login: d.login,
                sid: d.sid,
                skey: d.skey,
                adminsid: d.adminsid,
                adminskey: d.adminskey,
                access_token: d.access_token,
                facebook: d.facebook
            }, function (e) {
                if (e && e.resultCode == b.ObjectPlanet.ResultCode.OK) {
                    var g = b.ObjectPlanet.session;
                    if (window.opener != null) {
                        try {
                            g = b(window.opener.document).find("#murveySession").get(0)
                        } catch (f) {}
                    }
                    g.name = e.data.name;
                    b(c.password.name).val(e.data.name).show();
                    b(c.password.setName).hide()
                }
                if (d.success) {
                    d.success(e)
                }
            })
        }
    }
})(jQuery);
(function (b) {
    b.fn.accountState = function () {
        return this.opWidget(a, arguments)
    };
    var d = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
    var c = {
        free: "Free plan",
        basic: "Basic plan",
        pro: "Pro plan"
    };
    var a = {
        init: function (e) {
            b(this).addClass("account-state").prop("user", e && e.user != null ? e.user : null);
            this.info = b('<table cellspacing="0" cellpadding="0" class="state op-control-box borderBox"><tr><td class="right label">Current account plan:</td><td class="plan"></td></tr><tr><td class="right label">Monthly question responses:</td><td class="limit"></td></tr><tr><td class="right label expiresLabel">Expires on:</td><td class="expires"><span class="date"></span><span class="extend"> - <span class="link hand">extend</span></span></td></tr></table>').appendTo(this).get(0);
            this.info.plan = b(this.info).find("td.plan").get(0);
            this.info.limit = b(this.info).find("td.limit").get(0);
            this.info.expires = b(this.info).find("td.expires .date").get(0);
            this.info.extend = b(this.info).find("td.expires .extend").hide().get(0);
            this.info.expiresLabel = b(this.info).find("td.expiresLabel").get(0);
            this.qr = b('<table cellspacing="0" cellpadding="0" class="qr borderBox"><tr><th>Month</th><th>Question response count</th></tr></table>').appendTo(this).get(0);
            if (e && e.user != null) {
                a.set.apply(this, [e.user])
            }
        },
        planName: function (f) {
            for (var e = 0; this.plans instanceof Array && e < this.plans.length; e++) {
                if (this.plans[e].code == f && this.plans[e].name && this.plans[e].name.def != null) {
                    return this.plans[e].name.def
                }
            }
            return "Unknown plan"
        },
        planCost: function (f) {
            for (var e = 0; this.plans instanceof Array && e < this.plans.length; e++) {
                if (this.plans[e].code == f && this.plans[e].price && this.plans[e].price.amount != null) {
                    return this.plans[e].price.amount
                }
            }
            return 0
        },
        set: function (k) {
            k = k != null ? k : this.user;
            var o = k ? k.account : null;
            var q = "Free plan";
            var h = 0;
            if (o && o.plan != null) {
                q = a.planName.apply(this, [o.plan]);
                h = a.planCost.apply(this, [o.plan])
            }
            if (h > 0) {
                q += " ($" + h + " per month)"
            }
            var s = this;
            if (o == null || o.plan == null || o.plan == "free" || o.plan == "basic") {
                b(this.info.plan).html(q + ' - <span class="link hand">upgrade</span>');
                b(this.info.plan).find("span").bind("click", function (i) {
                    b(s).trigger({
                        type: "show.plans",
                        action: "upgrade"
                    });
                    return false
                })
            } else {
                b(this.info.plan).html(q)
            }
            var j = 1000 + " QR";
            if (o && o.qrLimit == -1) {
                j = "Unlimited QR"
            }
            if (o && typeof o.qrLimit == "number" && o.qrLimit > 0) {
                j = o.qrLimit + " QR"
            }
            if (o && o.expires != null && o.expires < new Date().valueOf()) {
                b(this.info.limit).html(j + ' <span class="op-web-message-error-color">(current limit is 1000)</span>');
                b(this.info.expiresLabel).text("Expired on:");
                b(this.info.expires).addClass("op-web-message-error-color")
            } else {
                b(this.info.limit).text(j);
                b(this.info.expiresLabel).text("Expires on:");
                b(this.info.expires).removeClass("op-web-message-error-color")
            }
            var f = o && typeof o.expires == "number" ? b.ObjectPlanet.dayStr(o.expires) : "Does not expire";
            if (o && o.expires != null && (o.plan == "basic" || o.plan == "pro")) {
                b(this.info.extend).show()
            }
            b(this.info.expires).html(f);
            b(this.info.extend).bind("click", function (i) {
                b(s).trigger({
                    type: "show.plans",
                    action: "extend"
                });
                return false
            });
            b(this.qr).find("tr:not(:first)").remove();
            if (o && typeof o.qr == "object") {
                var e = [],
                    l = 0;
                for (var p in o.qr) {
                    e[l++] = a.date(p)
                }
                e.sort(function (t, i) {
                    return i - t
                });
                var r = "";
                for (var l = 0; l < e.length; l++) {
                    if (typeof e[l] == "number") {
                        var g = new Date(e[l]);
                        var m = l % 2 == 0 ? ' class="table-zebra"' : "";
                        var p = o.qr[a.monthLabel(g)];
                        var n = p != null && p.value != null ? p.value : 0;
                        var j = "";
                        if (p.limitEmailSent == true) {
                            j = ' class="op-web-message-error-color"'
                        } else {
                            if (p.nearLimitEmailSent == true) {
                                j = ' class="op-web-message-warning-color"'
                            }
                        }
                        r += "<tr" + m + "><td>" + g.getFullYear() + " " + d[g.getMonth()] + "</td>";
                        r += "<td" + j + ">" + n + "</td></tr>"
                    }
                }
                b(this.qr).append(r)
            }
        },
        date: function (e) {
            if (e == null || e.length != 6) {
                return
            }
            var f = e.substring(0, 4);
            var g = e.substring(4, 6);
            return new Date(f, g - 1, 15).valueOf()
        },
        monthLabel: function (e) {
            return e.getFullYear() + (e.getMonth() < 9 ? "0" + (e.getMonth() + 1) : "" + (e.getMonth() + 1))
        }
    }
})(jQuery);
(function (b) {
    b.fn.accountPlans = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (c) {
            b(this).addClass("account-plans");
            this.table = b('<table cellspacing="0" cellpadding="0"><tr></tr></table>').appendTo(this).get(0);
            if (c && c.plans != null) {
                a.setPlans.apply(this, [c.plans])
            }
        },
        loadPlans: function (d) {
            var c = this;
            b.serverRequest({
                action: "payment.loadPlans"
            }, function (e) {
                if (e && e.resultCode == b.ObjectPlanet.ResultCode.OK) {
                    a.setPlans.apply(c, [e.data])
                }
                if (d != null) {
                    d(e != null ? e.data : null)
                }
            })
        },
        setPlans: function (e) {
            this.json = e;
            this.column = [];
            this.planMap = {};
            b(this.table).find("td").remove();
            for (var d = 0; e instanceof Array && d < e.length; d++) {
                this.column[d] = b("<div></div>").murveyPlan(e[d]).get(0);
                b("<td></td>").html(this.column[d]).appendTo(this.table);
                this.planMap[e[d].code] = e[d]
            }
            var c = this;
            b(this.column).bind("plan.purchase", function (f) {
                a.purchasePlan.apply(c, [f.plan, this])
            });
            a.setActive.apply(this, [this.user])
        },
        purchasePlan: function (i, f) {
            var d = this;
            b(f.message).text("Contacting paypal...");
            var c = this.expires != null ? new Date(this.expires) : new Date();
            if (c.valueOf() < new Date().valueOf()) {
                c = new Date()
            }
            c = b.ObjectPlanet.addMonths(c, i.duration.value);
            var h = this.planMap[i.code];
            var e = h != null && h.name != null && h.name.def != null ? h.name.def : i.code;
            var g = {
                quantity: "1",
                name: "Murvey " + e + " until " + new Date(c).toDateString(),
                price: i.cost.amount + "",
                currency: "USD"
            };
            b.serverRequest({
                action: "payment.pay",
                account: {
                    plan: i.code,
                    expires: c.valueOf(),
                    amount: {
                        value: i.cost.amount - 0
                    },
                    item: g
                }
            }, function (j) {
                if (j.resultCode == b.ObjectPlanet.ResultCode.OK && j.data) {
                    b(f.message).text("Accessing paypal...");
                    b.ObjectPlanet.openPaypal(j.data, d.noCall)
                } else {
                    b(f.message).text("Paypal... FAILED!");
                    b.ObjectPlanet.globalErrorHandler({
                        error: JSON.stringify(j),
                        url: "objectplanet.opinio.account.js",
                        line: 325,
                        file: "account.js"
                    })
                }
            })
        },
        setUser: function (e) {
            this.user = e;
            if (e == null || e.account == null || e.account.plan == null) {
                b(this.table).find(".account-plan .message").text("")
            } else {
                var h = b(this.table).find("." + e.account.plan).closest(".account-plan").get(0);
                if (h != null && e.account.expires != null) {
                    var g = b.ObjectPlanet.dayStr(e.account.expires);
                    if (e.account.expires < new Date().valueOf()) {
                        b(h.message).text("Expired on: " + g + " !!!").addClass("expired")
                    } else {
                        b(h.message).text("Expires on: " + g).removeClass("expired")
                    }
                    b(h.button).text("Extend \u00bb");
                    this.expires = e.account.expires
                } else {
                    if (h != null) {
                        b(h.button).text("Extend \u00bb");
                        if (this.expires != null) {
                            delete this.expires
                        }
                    } else {
                        if (this.expires != null) {
                            delete this.expires
                        }
                    }
                }
            } if (e && e.account && e.account.plan == "basic" && this.expires != null) {
                var c = new Date(new Date(this.expires).getFullYear(), new Date(this.expires).getMonth(), new Date(this.expires).getDate());
                var f = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate());
                var i = (c.valueOf() - f.valueOf()) / 1000 / 60 / 60 / 24;
                var h = b(this.table).find(".pro").closest(".account-plan").get(0);
                b(h).murveyPlan("setPopdown", {
                    expires: this.expires,
                    diff: Math.round((this.planMap.pro.price.amount - this.planMap.basic.price.amount) * 12 / 365 * i)
                })
            }
            if (e && e.account && e.account.plan == "pro") {
                var d = b(this.table).find(".basic").closest(".account-plan").get(0);
                var f = new Date().valueOf();
                if (d != null && e.account.expires != null && e.account.expires < f) {
                    b(d.button).text("Extend \u00bb").css("visibility", "visible");
                    b(d.message).text("")
                } else {
                    if (d != null) {
                        b(d.button).text("Upgrade \u00bb").css("visibility", "hidden");
                        b(d.message).text("")
                    }
                }
                b(this.table).find(".pro").closest(".account-plan").murveyPlan("resetPopdown")
            }
            a.setActive.apply(this, [e])
        },
        setActive: function (c) {
            b(this.table).find(".account-plan").removeClass("active");
            if (c && c.account != null && c.account.plan != null) {
                b(this.table).find("." + c.account.plan).closest(".account-plan").addClass("active")
            } else {
                b(this.table).find(".free").closest(".account-plan").addClass("active")
            }
        },
        enable: function (d) {
            var c = b(this.table).find(".basic").closest(".account-plan").get(0);
            if (d == "pro" && c != null) {
                b(c.button).attr("disabled", "disabled").css("cursor", "default")
            }
            if (d != "pro" && c != null) {
                b(c.button).removeAttr("disabled").css("cursor", "pointer")
            }
            if (d == "pro") {
                var e = b(this.table).find(".pro").closest(".account-plan").get(0);
                if (e != null) {
                    b(e.button).popdown("showMenu")
                }
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.murveyPlan = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (f) {
            var d = b(this).prop("json", f).addClass("account-plan").get(0);
            var c = '<div class="head ' + (f && f.code != null ? f.code : "") + '">';
            c += '<label class="name">' + (f && f.name && f.name.def != null ? f.name.def : "") + "</label>";
            var g = f && f.price && f.price.amount > 0 ? "" : ' style="visibility: hidden;"';
            c += '<label class="price"' + g + ">$" + (f && f.price && f.price.amount > 0 ? f.price.amount : 0) + " per month</label>";
            c += "<button" + g + ">Upgrade \u00bb</button>";
            c += '<label class="message"></label>';
            c += "</div>";
            for (var e = 0; f && f.features && e < f.features.length; e++) {
                if (f.features[e] && f.features[e].def != null) {
                    c += '<label class="feature">' + f.features[e].def + "</label>"
                }
            }
            b(this).html(c);
            this.button = b(this).find("button").prop("widget", this).get(0);
            this.message = b(this).find(".message").get(0);
            if (f && f.price && f.price.amount > 0) {
                b(this.button).popdown({
                    items: [{
                        label: "1 month ($" + f.price.amount + ")",
                        callback: function () {
                            a.purchase.apply(this, [{
                                duration: 1,
                                price: f.price.amount
                            }])
                        }
                    }, {
                        label: "3 months ($" + f.price.amount * 3 + ")",
                        callback: function () {
                            a.purchase.apply(this, [{
                                duration: 3,
                                price: f.price.amount * 3
                            }])
                        }
                    }, {
                        label: "6 months ($" + f.price.amount * 6 + ")",
                        callback: function () {
                            a.purchase.apply(this, [{
                                duration: 6,
                                price: f.price.amount * 6
                            }])
                        }
                    }, {
                        label: "12 months ($" + f.price.amount * 12 + ")",
                        callback: function () {
                            a.purchase.apply(this, [{
                                duration: 12,
                                price: f.price.amount * 12
                            }])
                        }
                    }]
                })
            }
        },
        purchase: function (c) {
            b(this.widget).trigger({
                type: "plan.purchase",
                plan: {
                    code: this.widget.json.code,
                    duration: {
                        value: c.duration
                    },
                    cost: {
                        amount: c.price
                    }
                }
            })
        },
        setPopdown: function (c) {
            var d = this.json.price.amount;
            b(this.button).popdown("reset", [{
                label: "Until " + b.ObjectPlanet.dayStr(c.expires) + " ($" + c.diff + ")",
                callback: function () {
                    a.purchase.apply(this, [{
                        duration: 0,
                        price: c.diff
                    }])
                }
            }, {
                label: "+3 months ($" + (c.diff + this.json.price.amount * 3) + ")",
                callback: function () {
                    a.purchase.apply(this, [{
                        duration: 3,
                        price: c.diff + d * 3
                    }])
                }
            }, {
                label: "+6 months ($" + (c.diff + this.json.price.amount * 6) + ")",
                callback: function () {
                    a.purchase.apply(this, [{
                        duration: 6,
                        price: c.diff + d * 6
                    }])
                }
            }, {
                label: "+12 months ($" + (c.diff + this.json.price.amount * 12) + ")",
                callback: function () {
                    a.purchase.apply(this, [{
                        duration: 12,
                        price: c.diff + d * 12
                    }])
                }
            }])
        },
        resetPopdown: function () {
            var c = this.json;
            b(this.button).popdown("reset", [{
                label: "1 month ($" + c.price.amount + ")",
                callback: function () {
                    a.purchase.apply(this, [{
                        duration: 1,
                        price: c.price.amount
                    }])
                }
            }, {
                label: "3 months ($" + c.price.amount * 3 + ")",
                callback: function () {
                    a.purchase.apply(this, [{
                        duration: 3,
                        price: c.price.amount * 3
                    }])
                }
            }, {
                label: "6 months ($" + c.price.amount * 6 + ")",
                callback: function () {
                    a.purchase.apply(this, [{
                        duration: 6,
                        price: c.price.amount * 6
                    }])
                }
            }, {
                label: "12 months ($" + c.price.amount * 12 + ")",
                callback: function () {
                    a.purchase.apply(this, [{
                        duration: 12,
                        price: c.price.amount * 12
                    }])
                }
            }])
        }
    }
})(jQuery);
(function (a) {
    a.ObjectPlanet.openPaypal = function (d, f) {
        if (f != true) {
            var b = window.open(d.approvalUrl);
            var c = setInterval(function () {
                if (b.closed == true) {
                    clearInterval(c);
                    if (b.paypal == null) {
                        a.ObjectPlanet.eventBus.trigger("paypal.cancel")
                    }
                }
            }, 500);
            var e = function (g) {
                b.paypal = g.data;
                if (g.data == "paypalDone") {
                    a.ObjectPlanet.eventBus.trigger("paypal.done")
                }
                if (g.data == "paypalCancel") {
                    a.ObjectPlanet.eventBus.trigger("paypal.cancel")
                }
            };
            if (window.attachEvent) {
                window.attachEvent("onmessage", e)
            } else {
                window.addEventListener("message", e, false)
            }
        }
    }
})(jQuery);
(function (b) {
    b.ObjectPlanet.paypalDone = function (e, d) {
        e = e != null ? e : document.location.search;
        var c = d != null && d.w != null ? d.w : window;
        if (e.indexOf("cancel=true") > 0) {
            a(c, "paypalCancel", "Paypal payment - cancelled", "Payment cancelled")
        } else {
            if (e.indexOf("id=") > 0) {
                a(c, null, "Paypal payment - executing", "Executing payment!<br>Please wait...", true);
                b.serverRequest({
                    action: "payment.execute",
                    id: b.ObjectPlanet.url.param("id", e),
                    payerId: b.ObjectPlanet.url.param("PayerID")
                }, function (f) {
                    if (f.resultCode == b.ObjectPlanet.ResultCode.OK) {
                        a(c, "paypalDone", "Paypal payment - success", "Payment completed, thankyou")
                    } else {
                        a(c, "paypalFailed", "Paypal payment - failed", "Payment failed!<br>" + f.error);
                        if (d == null) {
                            b.ObjectPlanet.globalErrorHandler({
                                error: JSON.stringify(f),
                                url: "objectplanet.opinio.account.js",
                                line: 564,
                                file: "account.js.paypalDone()"
                            })
                        }
                    }
                })
            }
        }
    };
    var a = function (c, e, g, d, f) {
        if (c.opener && c.opener.postMessage != null && e != null) {
            c.opener.postMessage(e, "*")
        }
        b(c.document).find("head title").remove();
        b(c.document).find("head").append("<title>" + g + "</title>");
        var h = b('<div class="paypal-done borderBox"></div>').get(0);
        b(h).html(d + "<br><br>");
        if (f != true) {
            b(h).append('[<span class="link hand">close window</span>]');
            b(h).find(".link").bind("click", function () {
                c.close()
            })
        }
        b(c.document).find("body").html(h)
    }
})(jQuery);
(function (c) {
    c.fn.accountPassword = function () {
        return this.opWidget(a, arguments)
    };
    var b = "Email me password";
    var a = {
        init: function (f) {
            var e = f != null ? f.user : null;
            var d = c(this).addClass("account-password").html('<div class="borderBox op-control-box"><label class="label right">Login email:</label><label class="login">' + (e && e.login != null ? e.login : "") + '</label></div><div class="borderBox op-control-box"><label class="label right">Name:</label><button class="setName borderBox hand">Set name</button><input class="name" type="text" readonly="readonly"></div><div class="borderBox op-control-box"><div class="current password"><label class="label right">Current password:</label><button class="setPassword hand">Change password</button><button class="setPasswordCancel hand" style="display: none;">Cancel</button><input class="current" type="password" style="display: none;"></div><div class="new password" style="display: none;"><label class="label right">New password:</label><input class="new" type="password"></div><div class="repeat password" style="display: none;"><label class="label right">Repeat password:</label><input class="repeat" type="password"></div><div class="submit" style="display: none;"><label class="label"></label><button class="hand">Set</button><button class="hand">Cancel</button></div><div style="display: none;" class="message op-web-message-error-color"></div></div>').get(0);
            this.passwordSet = e && e.password != null;
            this.nameSet = e && e.facebook != null;
            this.login = c(this).find("label.login").val(e && e.login ? e.login : "").get(0);
            this.name = c(this).find("input.name").get(0);
            this.setName = c(this).find("button:contains(Set name)").get(0);
            this.currentPassword = c(this).find("input.current").get(0);
            this.setPassword = c(this).find("button.setPassword").text(e && e.password ? "Change password" : "Set password").get(0);
            this.setPasswordCancel = c(this).find("button.setPasswordCancel").get(0);
            this.newPassword = c(this).find("input.new").get(0);
            this.repeatPassword = c(this).find("input.repeat").get(0);
            this.submit = c(this).find(".submit button:contains(Set)").get(0);
            this.cancel = c(this).find(".submit button:contains(Cancel)").get(0);
            this.message = c(this).find("div.message").get(0);
            c(this.name).toggle(e != null && e.facebook != null).val(e && e.facebook ? e.facebook.name : "");
            c(this.setName).toggle(e != null && e.facebook == null);
            c(this.setPassword).bind("click", function (g) {
                c(d.message).hide();
                if (c(this).text() == b) {
                    c(this).attr("disabled", "disabled");
                    a.setPassword.apply(d)
                } else {
                    if (d.passwordSet) {
                        c(d.currentPassword).show().focus();
                        c(d.newPassword).parent().show();
                        c(d.repeatPassword).parent().show();
                        c(d.submit).parent().show();
                        c(d.setPassword).hide()
                    } else {
                        c(d.setPassword).text(b).focus();
                        c(d.setPasswordCancel).show()
                    }
                }
            });
            c(this.cancel).bind("click", function (g) {
                c(d.newPassword).blur().val("").parent().hide();
                c(d.repeatPassword).blur().val("").parent().hide();
                c(d.submit).text("Set").blur().parent().hide();
                c(d.currentPassword).val("").blur().hide();
                c(d.setPassword).show();
                c(d.message).hide()
            });
            c(this.setPasswordCancel).bind("click", function () {
                c(d.setPassword).text("Set password");
                c(this).hide()
            });
            c(this.setName).bind("click", function (g) {
                c.facebookLogin({
                    getName: true
                })
            });
            c(this.submit).bind("click", function (g) {
                if (d.nameSet && c(d.currentPassword).val() != "" && c(d.newPassword).val() == "" && c(d.repeatPassword).val() == "") {
                    a.changePassword.apply(d)
                } else {
                    if (c.trim(c(d.newPassword).val()) == "") {
                        c(d.newPassword).focus()
                    } else {
                        if (c(d.newPassword).val() != c(d.repeatPassword).val()) {
                            c(d.repeatPassword).focus();
                            c(d.message).text(c(d.repeatPassword).val() == "" ? "Please repeat the password" : "Invalid repeat password").show()
                        } else {
                            if (c.trim(c(d.currentPassword).val()) == "") {
                                c(d.currentPassword).focus();
                                c(d.message).text("Supply the current password").show()
                            } else {
                                a.changePassword.apply(d)
                            }
                        }
                    }
                }
            });
            c(this.currentPassword).add(this.newPassword).add(this.repeatPassword).bind("keyup", function (g) {
                if (g.keyCode == 13) {
                    c(d.submit).trigger("click")
                }
            })
        },
        set: function (d) {
            c(this.message).add(this.setPasswordCancel).hide();
            c(this.currentPassword).add(this.newPassword).add(this.repeatPassword).val("");
            c(this.login).text(d && d.login != null ? d.login : "");
            c(this.setName).toggle(d == null || d.facebook == null || d.facebook.name == null);
            c(this.name).toggle(d != null && d.facebook != null && d.facebook.name != null);
            c(this.name).val(d != null && d.facebook != null && d.facebook.name != null ? d.facebook.name : "");
            c(this.setPassword).text(d && typeof d.password == "string" ? "Change password" : "Set password");
            this.passwordSet = c(this.setPassword).text() == "Change password";
            this.nameSet = d && d.facebook != null
        },
        changePassword: function () {
            var d = this;
            c.serverRequest({
                action: "user.setPassword",
                oldPass: c(this.currentPassword).val(),
                newPass: c(this.newPassword).val()
            }, function (e) {
                if (e.resultCode == c.ObjectPlanet.ResultCode.OK && c(d.newPassword).val() == "") {
                    delete c.ObjectPlanet.session.passwordSet;
                    delete d.passwordSet;
                    c(d.message).text("Your password was cleared, login using facebook").show();
                    c(d.currentPassword).val("").hide();
                    c(d.setPassword).text("Set password").show();
                    c(d.newPassword).parent().hide();
                    c(d.repeatPassword).parent().hide();
                    c(d.submit).parent().hide()
                } else {
                    if (e.resultCode == c.ObjectPlanet.ResultCode.OK) {
                        c(d.message).text("The password was changed").show();
                        c(d.currentPassword).hide();
                        c(d.newPassword).parent().hide();
                        c(d.repeatPassword).parent().hide();
                        c(d.submit).parent().hide();
                        c(d.setPassword).show()
                    } else {
                        if (e.resultCode == c.ObjectPlanet.ResultCode.INVALID_INPUT) {
                            c(d.currentPassword).focus();
                            c(d.message).text("Invalid password").show()
                        } else {
                            c(d.message).text("Application error: " + e.error).show()
                        }
                    }
                }
            })
        },
        setPassword: function () {
            var d = this;
            c.serverRequest({
                action: "user.setPassword",
                noemail: c.ObjectPlanet.testMode
            }, function (e) {
                c(d.setPassword).removeAttr("disabled");
                if (e && e.resultCode == c.ObjectPlanet.ResultCode.OK) {
                    c(d.setPassword).text("Change password");
                    c(d.setPasswordCancel).hide();
                    d.passwordSet = c.ObjectPlanet.session.passwordSet = true;
                    c(d.message).text("Your password is sent to your email").show()
                }
            })
        }
    }
})(jQuery);
(function (c) {
    c.ObjectPlanet.premiumFeature = function (e) {
        if (e == null || typeof e.feature != "string" || e.callback == null) {
            return null
        }
        var f = c.ObjectPlanet.premiumFeatures != null ? c.ObjectPlanet.premiumFeatures[e.feature] : null;
        if (f == null || b(f.plan) == true || c.ObjectPlanet.chargeOn != true) {
            e.callback()
        } else {
            var h = ('<div class="premium-feature"><label class="op-web-message-color">Premium Feature!</label><p>You do not have access to this feature and need to upgrade to the <span class="op-web-message-color">' + a(f.plan) + '</span> to use it.</p><div><button class="hand">Upgrade</button></div></div>');
            if (d(f.plan)) {
                h = ('<div class="premium-feature"><label class="op-web-message-color">Premium Feature!</label><p>Your <span class="op-web-message-color">' + a(c.ObjectPlanet.me.account.plan) + '</span> has expired and you do not have access to this feature. Extend or upgrade your plan to use it.</p><div><button class="hand">Extend</button></div></div>')
            }
            var g = c.ObjectPlanet.miniDialog({
                close: true,
                content: h
            });
            c(g).find("button").bind("click", function () {
                c(g.back).remove();
                c.ObjectPlanet.accountModule({
                    eventBus: c.ObjectPlanet.eventBus,
                    user: c.ObjectPlanet.me,
                    show: "Plans",
                    plan: f.plan
                })
            });
            return g
        }
    };
    c.ObjectPlanet.hasPremiumFeatureAccess = function (f) {
        if (c.ObjectPlanet.chargeOn != true) {
            return true
        }
        var e = c.ObjectPlanet.premiumFeatures != null ? c.ObjectPlanet.premiumFeatures[f] : null;
        return e == null || b(e.plan) == true
    };
    var b = function (f) {
        if (c.ObjectPlanet.me == null || c.ObjectPlanet.me.account == null) {
            return false
        }
        var e = c.ObjectPlanet.me.account;
        if (e.expires < new Date().valueOf()) {
            return false
        }
        if (f == "basic" && (e.plan == "basic" || e.plan == "pro")) {
            return true
        }
        if (f == "pro" && e.plan == "pro") {
            return true
        }
        return false
    };
    var d = function (f) {
        if (c.ObjectPlanet.me && c.ObjectPlanet.me.account && c.ObjectPlanet.me.account.plan != null && c.ObjectPlanet.me.account.expires != null) {
            var e = c.ObjectPlanet.me.account;
            if (e.expires < new Date().valueOf()) {
                if (f == "basic" && (e.plan == "basic" || e.plan == "pro")) {
                    return true
                }
                if (f == "pro" && e.plan == "pro") {
                    return true
                }
            }
            return false
        }
        return false
    };
    var a = function (f) {
        for (var e = 0; c.ObjectPlanet.plans instanceof Array && e < c.ObjectPlanet.plans.length; e++) {
            if (c.ObjectPlanet.plans[e].code == f && c.ObjectPlanet.plans[e].name != null && c.ObjectPlanet.plans[e].name.def != null) {
                return c.ObjectPlanet.plans[e].name.def
            }
        }
        return f + " plan"
    }
})(jQuery);
(function (c) {
    if (!c.ObjectPlanet) {
        c.ObjectPlanet = {}
    }
    c.ObjectPlanet.UNDO_DELAY = 15;
    c.ObjectPlanet.SAVE_NOW = "#ffc044";
    c.ObjectPlanet.SAVED = "#eeeeee";
    c.ObjectPlanet.AUTOSAVED = "#ffa522";
    c.ObjectPlanet.POS_SURVEY = 0;
    c.ObjectPlanet.POS_PUBLISH = 1;
    c.ObjectPlanet.POS_REPORT = 2;
    c.ObjectPlanet.POS_SUPPORT = 3;
    c.ObjectPlanet.POS_ADMIN = 4;
    c.ObjectPlanet.ResultCode = {
        APPLICATION_ERROR: -1,
        OK: 0,
        INVALID_INPUT: 1,
        NOT_LOGGED_IN: 2,
        INVALID_LOGIN: 3,
        INVALID_ACCESS: 4,
        SURVEY_CLOSED: 5
    };
    var b = 1000,
        a = b * 60;
    HOUR = a * 60, DAY = HOUR * 24;
    c.ObjectPlanet.FacebookLength = 1000 * 60 * 3;
    c.ObjectPlanet.SessionLength = 1000 * 60 * 15;
    c.ObjectPlanet.LoginLength = DAY * 30;
    if (!c.ObjectPlanet.SPEED) {
        c.ObjectPlanet.SPEED = 100
    }
    c.ajaxSetup({
        cache: false
    });
    c.ObjectPlanet.runningOnTestSite = (false || window.document.location.host == "localhost" || window.document.location.host == "moneytrap.murvey.com")
})(jQuery);
(function (b) {
    b.fn.murvey = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (e) {
            var d = b(this).addClass("op-murvey").get(0);
            this.body = b("body").css({
                "overflow-y": "hidden"
            }).get(0);
            if (b.browser.webkit) {
                b(this).addClass("noSelect")
            }
            if (b.browser.msie == true) {
                var c = b.browser.version.substring(0, b.browser.version.indexOf(".")) - 0;
                if (c <= 8) {
                    b("<center><div>This browser is not supported.<br>Supported browsers are:<br>Chrome, Safari, Firefox, Opera, and IE9+</div></center>").css({
                        color: "white",
                        "margin-top": "100px",
                        "line-height": "1.5em"
                    }).appendTo(this);
                    return false
                }
            }
            this.eventBus = b.ObjectPlanet.eventBus = new b.ObjectPlanet.EventBus();
            b.ObjectPlanet.session = b('<div style="display: none;" id="murveySession"></div>').appendTo(this).get(0);
            this.menu = b('<div class="op-menu noSelect borderBox"><a class="login"><label class="name">Sign in</label><label class="qr" style="display: none;"></label><span class="arrow"></span></a><span class="tabs"><a class="survey active">Survey</a><a class="publish">Publish</a><a class="report">Report</a><a class="support">Forum</a></span><div class="fb-like facebook-like" style="position: absolute;" data-href="https://www.facebook.com/murveycom" data-send="false" data-layout="button_count" data-width="450" data-show-faces="true"></div><a class="info borderBox">?</a></div>').get(0);
            this.loginLink = b(this.menu).find("a:eq(0)").get(0);
            this.menu.tabs = b(this.menu).find(".tabs").get(0);
            this.menu.tabs.survey = b(this.menu.tabs).find("a.survey").get(0);
            this.menu.tabs.publish = b(this.menu.tabs).find("a.publish").get(0);
            this.menu.tabs.report = b(this.menu.tabs).find("a.report").get(0);
            this.menu.tabs.support = b(this.menu.tabs).find("a.support").get(0);
            this.menu.info = b(this.menu).find("a.info").get(0);
            b(this.menu.info).bind("click", function () {
                b.murveyHelp()
            });
            this.manager = b("<div></div>").hide().surveyManager(this.eventBus).get(0);
            this.surveyContainer = b('<div class="surveyContainer"></div>').moduleContainer().get(0);
            this.survey = b("<div></div>").surveyModule(this.eventBus).appendTo(this.surveyContainer).get(0);
            this.preview = b("<div></div>").previewModule(this.eventBus).previewModule("setJSON", this.survey.editor.json).appendTo(this.surveyContainer).get(0);
            this.publishContainer = b('<div class="publishContainer"></div>').hide().moduleContainer().get(0);
            this.publish = b("<div></div>").publishModule(this.eventBus, this.survey.theme).appendTo(this.publishContainer).get(0);
            this.publish.survey = this.survey;
            this.publish.urlForm.surveyEditor = this.publish.popupEditor.surveyEditor = this.publish.tagEditor.surveyEditor = this.survey.editor;
            this.reportContainer = b("<div></div>").hide().moduleContainer().get(0);
            this.reports = b('<div class="op-module-disabled"></div>').reportModule(this.eventBus).appendTo(this.reportContainer).get(0);
            this.supportContainer = b("<div></div>").hide().moduleContainer().get(0);
            this.support = b("<div></div>").supportModule(this.eventBus).appendTo(this.supportContainer).get(0);
            var i = b('<div class="adminContainer"></div>').hide().moduleContainer().get(0);
            var f = new Date().getFullYear();
            this.bottomBar = b('<div class="op-bottom-bar"><label class="product noSelect">Murvey ' + b.ObjectPlanet.VERSION + '<label class="op-web-message-color"> BETA</label></label><label class="status noSelect op-web-message-color"></label><label class="copyright noSelect">&copy; 2011-' + f + " by ObjectPlanet, Inc | all rights reserved (Build " + b.ObjectPlanet.REVISION + " " + b.ObjectPlanet.REVISION_DATE + ")</label></div>").get(0);
            this.bottomBar.product = b(this.bottomBar).find(".product").get(0);
            this.bottomBar.copyright = b(this.bottomBar).find(".copyright").get(0);
            b.ObjectPlanet.statusLabel = b(this.bottomBar).find(".status").get(0);
            b(this.menu.tabs).navigator({
                modules: [this.surveyContainer, this.publishContainer, this.reportContainer, this.supportContainer],
                eventBus: this.eventBus
            });
            b(this).append(this.menu).append(this.manager).append(this.surveyContainer).append(this.publishContainer).append(this.reportContainer).append(this.supportContainer).append(i).append(this.bottomBar);
            b(this.survey.editor).surveyEditor("addPreview", {
                web: this.preview.form
            });
            b(this.survey.editor).surveyEditor("addOverview", this.preview.overview);
            var h = {
                selectOn: false,
                offsetX: -10,
                items: [{
                    label: "Sign out",
                    callback: function () {
                        if (b(d.survey.editor).surveyEditor("hasChanged")) {
                            d.unsaved = b('<div class="op-login-unsaved">You have unsaved changes!<br>Do you really want to sign out?</div>').dialogBox({
                                title: "Unsaved changes!",
                                cancel: {
                                    label: "No"
                                },
                                removeOnClose: true,
                                ok: {
                                    label: "Yes",
                                    callback: function () {
                                        b(d.login).opinioLogin("logout");
                                        return true
                                    }
                                }
                            }).dialogBox("show").get(0)
                        } else {
                            b(d.login).opinioLogin("logout")
                        }
                    }
                }, {
                    label: "Account",
                    callback: function () {
                        b.serverRequest({
                            action: "user.me"
                        }, function (j) {
                            if (j && j.resultCode == b.ObjectPlanet.ResultCode.OK) {
                                d.accountModule = b.ObjectPlanet.accountModule({
                                    eventBus: d.eventBus,
                                    user: j.data
                                })
                            }
                        })
                    }
                }]
            };
            this.login = b.ObjectPlanet.loginDialog = b("<div></div>").opinioLogin(e, this.eventBus).get(0);
            b(this.loginLink).bind("mousedown", function () {
                b(this).popdown("setEnabled", d.login.loginState)
            }).bind("click", function () {
                if (!d.login.loginState) {
                    b(d.login).opinioLogin("open")
                }
            }).popdown(h).bind("click", function () {
                this.logout = b(this.popdown).find("label:eq(0)").get(0)
            }).get(0);
            b(window).bind("resize", function (j) {
                a.adjust.apply(d)
            });
            this.eventBus.listen("surveyManager.collapse user.loggedIn user.loggedOut", function () {
                a.adjust.apply(d)
            });
            b(this.preview).bind("module.collapsed", function () {
                a.adjust.apply(d)
            });
            b.serverRequest({
                action: "payment.premiumFeatures"
            }, function (j) {
                b.ObjectPlanet.premiumFeatures = j.data
            });
            this.eventBus.listen("user.loggedIn", function (j) {
                a.loggedIn.apply(d, [j])
            }).listen("user.loggedOut", function () {
                a.loggedOut.apply(d)
            }).listen("user.login", function (j) {
                b(d.login).opinioLogin("open", {
                    save: j.save == true
                })
            });
            this.eventBus.listen("survey.new", function (j) {
                d.preview.json = d.survey.editor.json
            }).listen("survey.deleted", function (j) {
                if (d.preview.json && d.preview.json._id && d.preview.json._id.$oid == j) {
                    b(d.preview).previewModule("setJSON", d.survey.editor.json);
                    b(d.survey.editor).surveyEditor("addPreview", {
                        web: d.preview.form
                    })
                }
            });
            this.eventBus.listen("module.moveTo", function (j) {
                b(d.menu.tabs).navigator("moveTo", j)
            });
            if (document.location.search != null && document.location.search.indexOf("theme=") >= 0) {
                var g = b.ObjectPlanet.url.param("theme", document.location.search);
                b(document).find("#murveyTheme").attr("href", g)
            }
            a.processLogin.apply(this, [e && e.search ? e.search : null]);
            a.adjust.apply(this);
            b(this.survey.editor.surveyName).trigger("focus");
            window.onerror = function (l, k, j) {
                b.ObjectPlanet.globalErrorHandler({
                    error: l,
                    url: k,
                    line: j,
                    json: d.survey.editor.json,
                    file: "murvey.js"
                })
            };
            window.onbeforeunload = function (k) {
                if (b.ObjectPlanet.testMode != true && b(d.survey.editor).surveyEditor("hasChanged")) {
                    var k = k || window.event;
                    var j = "You have unsaved changes!";
                    if (k) {
                        k.returnValue = j
                    }
                    return j
                }
            };
            setTimeout(function () {
                b(d).find(".op-app-module").module("adjust");
                b(d).find(".type-icon").typeIcon("paint")
            }, 50);
            this.eventBus.trigger("murvey.loaded")
        },
        setSurvey: function (c) {
            b(this.survey.saveIcon).removeAttr("disabled").css("cursor", "pointer");
            b(this.survey.editor.surveyName).val(c.surveyName);
            b(this.survey.editor).surveyEditor("reset", c, true).prop("changed", true)
        },
        processLogin: function (g) {
            var e = this;
            if (b.ObjectPlanet.url.param("login", g) != null || b.ObjectPlanet.url.param("password", g) != null) {
                var d = b.ObjectPlanet.url.param("login", g);
                var f = b.ObjectPlanet.url.param("password", g);
                var c = b.ObjectPlanet.getCookie("sid");
                if (d && f) {
                    b(e.login).opinioLogin("login", {
                        login: d,
                        password: f,
                        sid: c != null && c.indexOf("&") > 0 ? c.substring(0, c.indexOf("&")) : c,
                        skey: c != null && c.indexOf("&") > 0 ? c.substring(c.indexOf("&") + 1) : null,
                        cookie: true,
                        success: function (h) {
                            if (h && h.data && h.data.survey && h.data.login == d) {
                                a.setSurvey.apply(e, [h.data.survey])
                            }
                        }
                    })
                } else {
                    if (d) {
                        b(e.login).opinioLogin("open", {
                            login: d,
                            password: ""
                        })
                    }
                }
            } else {
                if (b.ObjectPlanet.getCookie("sid") != null) {
                    var c = b.ObjectPlanet.getCookie("sid");
                    b(e.login).opinioLogin("login", {
                        sid: c.indexOf("&") > 0 ? c.substring(0, c.indexOf("&")) : c,
                        skey: c.indexOf("&") > 0 ? c.substring(c.indexOf("&") + 1) : null,
                        cookie: true,
                        success: function (h) {
                            if (h && h.data && h.data.survey && (!h.data.login || h.data.login == b.ObjectPlanet.session.login)) {
                                a.setSurvey.apply(e, [h.data.survey])
                            }
                        },
                        fail: function (h) {
                            if (h && h.resultCode == b.ObjectPlanet.ResultCode.NOT_LOGGED_IN && h.data != null) {
                                if (h.data.survey) {
                                    a.setSurvey.apply(e, [h.data.survey])
                                }
                                b(b.ObjectPlanet.session).attr("sid", h.data.sid).prop("sid", h.data.sid);
                                b.ObjectPlanet.session.skey = h.data.skey
                            } else {
                                b.serverRequest({
                                    action: "user.guest"
                                }, function (i) {
                                    if (i.resultCode == b.ObjectPlanet.ResultCode.OK) {
                                        b.ObjectPlanet.setCookie("sid", i.data.sid + "&" + i.data.skey);
                                        b(b.ObjectPlanet.session).attr("sid", i.data.sid).prop("sid", i.data.sid);
                                        b.ObjectPlanet.session.skey = i.data.skey
                                    }
                                })
                            }
                        }
                    })
                } else {
                    b.serverRequest({
                        action: "user.guest"
                    }, function (i) {
                        if (i.resultCode == b.ObjectPlanet.ResultCode.OK) {
                            b(b.ObjectPlanet.session).attr("sid", i.data.sid);
                            b.ObjectPlanet.session.sid = i.data.sid;
                            b.ObjectPlanet.session.skey = i.data.skey;
                            b.ObjectPlanet.setCookie("sid", i.data.sid + "&" + i.data.skey, 30);
                            if (!b.ObjectPlanet.testMode) {
                                var h = b.ObjectPlanet.getCookie("welcomeScreenShown");
                                if (h != "true") {
                                    e.welcome = b.welcomeScreen();
                                    b(e.welcome.closeButton).bind("click", function () {
                                        b(e.survey.editor.surveyName).trigger("focus")
                                    });
                                    b.ObjectPlanet.setCookie("welcomeScreenShown", "true", 30)
                                }
                            }
                        }
                    })
                }
            }
            this.heartbeatId = setInterval(function () {
                if (b.ObjectPlanet.session.sid && b.ObjectPlanet.session.login != null && b.ObjectPlanet.testMode != true) {
                    a.heartBeat.apply(e)
                }
            }, 30000)
        },
        heartBeat: function () {
            var c = this;
            b.serverRequest({
                action: "session.heartbeat"
            }, function (d) {
                b(b.ObjectPlanet.statusLabel).text("");
                if (d != null && (d.resultCode == b.ObjectPlanet.ResultCode.NOT_LOGGED_IN || d.resultCode == b.ObjectPlanet.ResultCode.INVALID_LOGIN)) {
                    b(b.ObjectPlanet.statusLabel).text("Signed out...");
                    clearInterval(c.heartbeatId);
                    delete c.heartbeatId
                }
            }, function () {
                b(b.ObjectPlanet.statusLabel).text("Connection lost...")
            })
        },
        adjust: function () {
            var f = b(this.manager).is(":visible") ? b(this.manager).outerHeight() : 0;
            var c = b(this).height() - b(this.menu).outerHeight() - f - b(this.bottomBar).outerHeight();
            b(this).find("> .op-module-container").add(this.adminContainer).css("height", c + "px").moduleContainer("adjust");
            var d = b(this.loginLink).position().left + b(this.loginLink).width() + 5;
            var e = Math.max(d, (b(window).width() / 2 - b(this.menu.tabs).width() / 2));
            b(this.menu.tabs).css("left", e + "px");
            b(this.survey.editor).surveyEditor("adjust").surveyEditor("align");
            b(this.preview.form).webSurvey("adjustSectionTable");
            b(this.reports.filter).webSurvey("adjust")
        },
        login: function (c) {
            b(this.login).opinioLogin("login", c)
        },
        getFacebookName: function (c) {
            b(this.accountModule).accountModule("getFacebookName", c)
        },
        loggedIn: function (d) {
            var c = this;
            if (d.loginName == "admin") {
                this.adminContainer = b(this).find("div.adminContainer").hide().moduleContainer().get(0);
                b(this.menu.tabs).navigator("addModule", {
                    label: "Admin",
                    module: this.adminContainer
                });
                this.adminLink = this.menu.tabs.labels[this.menu.tabs.labels.length - 1];
                this.eventBus.listen("module.movedTo", function (e) {
                    if (e && e.index == b.ObjectPlanet.POS_ADMIN && c.adminModule == null) {
                        c.adminModule = b("<div></div>").adminModule(c.eventBus).appendTo(c.adminContainer).get(0);
                        b(c.adminContainer).moduleContainer("adjust")
                    }
                })
            }
            b.serverRequest({
                action: "user.me"
            }, function (e) {
                b.ObjectPlanet.me = e && e.resultCode == b.ObjectPlanet.ResultCode.OK && e.data != null ? e.data : null;
                b.serverRequest({
                    action: "payment.chargeOn"
                }, function (f) {
                    b.ObjectPlanet.chargeOn = f && f.data == true;
                    a.setLoginLabel.apply(c, [b.ObjectPlanet.me])
                })
            });
            b.serverRequest({
                action: "payment.loadPlans"
            }, function (e) {
                b.ObjectPlanet.plans = e && e.resultCode == b.ObjectPlanet.ResultCode.OK && e.data != null ? e.data : null
            })
        },
        setLoginLabel: function (d) {
            if (d == null) {
                b(this.loginLink).find(".name").text("Sign in");
                b(this.loginLink).find(".qr").text("").hide()
            } else {
                b(this.loginLink).find(".name").text(d.login);
                b(this.loginLink).find(".qr").text("").hide();
                if (b.ObjectPlanet.chargeOn == true && d && d.account && d.account.qr != null) {
                    var e = new Date();
                    var f = e.getFullYear() + (e.getMonth() < 9 ? "0" + (e.getMonth() + 1) : "" + (e.getMonth() + 1));
                    var c = d.account.qr[f];
                    if (c != null && c.value != null) {
                        b(this.loginLink).find(".qr").show().text(" (" + c.value + " QR)").removeClass("op-web-message-color op-web-message-error-color");
                        if (c.limitEmailSent == true) {
                            b(this.loginLink).find(".qr").addClass("op-web-message-error-color")
                        } else {
                            if (c.nearLimitEmailSent == true) {
                                b(this.loginLink).find(".qr").addClass("op-web-message-color")
                            }
                        }
                    }
                }
            }
        },
        loggedOut: function () {
            a.setLoginLabel.apply(this);
            if (this.adminLink != null) {
                b(this.adminLink).add(this.adminModule).remove();
                b(this.adminContainer).hide();
                this.menu.tabs.labels.pop();
                this.menu.tabs.modules.pop();
                delete this.adminLink;
                delete this.adminModule
            }
            b(this.menu.tabs).navigator("moveTo", 0);
            if (b.ObjectPlanet.me != null) {
                delete b.ObjectPlanet.me
            }
        }
    }
})(jQuery);
(function (b) {
    b.fn.navigator = function () {
        return this.opWidget(a, arguments)
    };
    var a = {
        init: function (d) {
            var c = this;
            this.currentIndex = 0;
            this.modules = d.modules;
            this.eventBus = d.eventBus;
            this.labels = [];
            b(this).find("a").addClass("borderBox").each(function (e) {
                c.labels[e] = b(this).prop("index", e).get(0);
                a.addHandler.apply(c, [c.labels[e]])
            })
        },
        addModule: function (c) {
            this.modules[this.modules.length] = c.module;
            this.labels[this.labels.length] = b('<a class="borderBox">' + c.label + "</a>").prop("index", this.labels.length).appendTo(this).get(0);
            a.addHandler.apply(this, [this.labels[this.labels.length - 1]])
        },
        addHandler: function (d) {
            var c = this;
            b(d).bind("click", function (e) {
                a.moveTo.apply(c, [this.index])
            })
        },
        moveTo: function (d) {
            var c = this;
            d = Math.min(Math.max(0, d), this.labels.length - 1);
            if (d == this.currentIndex) {
                return
            }
            b(this).find("a").removeClass("active");
            b(this.labels[d]).addClass("active");
            if (d > this.currentIndex) {
                b(this.modules[this.currentIndex]).animate({
                    left: "-=100%"
                }, b.ObjectPlanet.SPEED, function () {
                    b(this).hide()
                });
                b(this.modules[d]).css("left", "100%").show().animate({
                    left: "-=100%"
                }, b.ObjectPlanet.SPEED, function () {
                    a.movedTo.apply(c, [d])
                })
            } else {
                if (d < this.currentIndex) {
                    b(this.modules[this.currentIndex]).animate({
                        left: "+=100%"
                    }, b.ObjectPlanet.SPEED, function () {
                        b(this).hide()
                    });
                    b(this.modules[d]).css("left", "-100%").show().animate({
                        left: "+=100%"
                    }, b.ObjectPlanet.SPEED, function () {
                        a.movedTo.apply(c, [d])
                    })
                }
            }
            b(this.modules[d]).moduleContainer("adjust");
            this.currentIndex = d
        },
        movedTo: function (c) {
            if (this.eventBus != null) {
                this.eventBus.trigger("module.movedTo", {
                    index: c
                })
            }
        }
    }
})(jQuery);
(function (a) {
    a.welcomeScreen = function () {
        return a('<div class="op-welcome noSelect"><div class="center">Welcome to Murvey<sup>tm</sup></div><br>Murvey is a cloud-based web service that lets you conduct and manage online surveys easier than you have ever before seen. Just start typing in the text and questions of your survey, selecting from a range of question types. A preview is available as you type.<br><br>When you are done, log in using your facebook account, save your survey, and you are ready to share the survey link with your survey audience. Creating a survey takes just a few minutes. You will never need any other survey software again.<div>').framed().framed("show").get(0)
    }
})(jQuery);
(function (a) {
    a.murveyHelp = function (c) {
        if (a.murveyHelp.help == null) {
            a.murveyHelp.help = a('<div class="op-help"><iframe src="info/index.html"></iframe></div>').framed().get(0);
            a(a.murveyHelp.help.frameBorder).addClass("op-help-frame");
            a(a.murveyHelp.help).find("iframe").bind("load", function (d) {
                a.murveyHelp.loaded = true;
                if (this.contentDocument && this.contentDocument.body != null) {
                    a(this.contentDocument.body).find("a.open").show()
                }
            });
            a.murveyHelp.keyHandler = function (d) {
                if (d.keyCode == a.ObjectPlanet.KEY.ESC) {
                    a(a.murveyHelp.help).framed("close");
                    a(window).unbind("keyup", a.murveyHelp.keyHandler)
                }
            };
            a(a.murveyHelp.help.closeButton).bind("click", function () {
                a(window).unbind("keyup", a.murveyHelp.keyHandler)
            })
        }
        a(window).bind("keyup", a.murveyHelp.keyHandler);
        if (c && c.sections != null && c.sections.length > 0) {
            a(a.murveyHelp.help).framed("show");
            a.ObjectPlanet.wait(function () {
                var d = a(a.murveyHelp.help).find("iframe").hide().get(0);
                return d && d.contentDocument && d.contentDocument.body != null && d.contentDocument.body.loaded == true
            }, function () {
                a.murveyHelp.showSections(c.sections)
            }, 100)
        } else {
            a(a.murveyHelp.help).framed("show");
            var b = a(a.murveyHelp.help).find("iframe").get(0);
            if (b && b.contentDocument && b.contentDocument.body != null) {
                b = b.contentDocument.body;
                a(b).show();
                a(b).find(".menu").show();
                a(b).find("#help .toc").show();
                a(b).find("#help section").show();
                a(b).find(".menu-info").hide();
                a(b).find(b.lastDoc != null ? b.lastDoc : "#features").show();
                a(b).find("a.open").show()
            }
        }
    };
    a.murveyHelp.showSections = function (d) {
        var b = a(a.murveyHelp.help).find("iframe").get(0);
        b = b.contentDocument.body;
        b.scrollTop = 0;
        b.lastDoc = "#features";
        if (a(b).find("#help").is(":visible")) {
            b.lastDoc = "#help"
        }
        if (a(b).find("#about").is(":visible")) {
            b.lastDoc = "#about"
        }
        a(b).find(".menu").hide();
        a(b).find(".menu-info").hide();
        a(b).find("#help .toc").hide();
        a(b).find("#help section").hide();
        for (var c = 0; c < d.length; c++) {
            a(b).find("#help section#" + d[c]).show()
        }
        a(b).find("#help").show();
        a(b).find("a.open").hide();
        a(a.murveyHelp.help).find("iframe").show()
    }
})(jQuery);
(function (a) {
    a.ObjectPlanet.lastSurvey = function () {
        a.serverRequest({
            action: "surveys.last"
        }, function (b) {
            if (b != null && b.resultCode == a.ObjectPlanet.ResultCode.OK && b.data != null) {
                window.location = "/s?" + b.data[0]._id
            }
        })
    }
})(jQuery);
if (ObjectPlanet == undefined) {
    var ObjectPlanet = {}
}
if (ObjectPlanet.report == undefined) {
    ObjectPlanet.report = {}
}
if (ObjectPlanet.payment == undefined) {
    ObjectPlanet.payment = {}
}
ObjectPlanet.report.createStructure = this.createStructure = function (e) {
    for (var c = 0, f = []; e && e.questions && c < e.questions.length; c++) {
        var h = {}, a = e.questions[c];
        if (typeof a.rating == "object" && a.rating != null) {
            for (var b = 0, k = []; b < a.rating.maxRating; b++) {
                k[b] = 0
            }
            h.rating = a.rating.showNA ? {
                noAnswer: 0,
                values: k,
                na: 0
            } : {
                noAnswer: 0,
                values: k
            }
        }
        if (typeof a.choice == "object" && a.choice != null) {
            for (var b = 0, k = []; a.choice.options && b < a.choice.options.length; b++) {
                k[b] = 0
            }
            h.choice = {
                noAnswer: 0,
                values: k
            }
        }
        if (typeof a.dropdown == "object" && a.dropdown != null) {
            h.dropdown = {
                noAnswer: 0,
                values: {}
            }
        }
        if (typeof a.fields == "object" && a.fields != null) {
            for (var b = 0, d = []; b < a.fields.length; b++) {
                var g = a.fields[b];
                if (g != null && (g.type == "integer" || g.type == "decimal")) {
                    d.push({
                        numeric: {
                            count: 0,
                            total: 0,
                            min: Number.MAX_VALUE,
                            max: Number.MIN_VALUE,
                            average: 0,
                            noAnswer: 0
                        }
                    })
                } else {
                    d.push({
                        text: {
                            answers: 0,
                            noAnswer: 0
                        }
                    })
                }
            }
            h.fields = d
        }
        f.push(h)
    }
    return {
        responseCount: 0,
        answers: f
    }
};
ObjectPlanet.report.map = this.map = function (c, d) {
    var f = c;
    try {
        f = reportStructure
    } catch (k) {}
    if (d == null) {
        f.responseCount = 1
    }
    if (d != null) {
        f.responseCount++
    }
    for (var g = 0; d == null && g < f.answers.length; g++) {
        if (f.answers[g].rating != null) {
            f.answers[g].rating.noAnswer = 0;
            if (f.answers[g].rating.na > 0) {
                f.answers[g].rating.na = 0
            }
            for (var e = 0; e < f.answers[g].rating.values.length; e++) {
                f.answers[g].rating.values[e] = 0
            }
        }
        if (f.answers[g].choice) {
            f.answers[g].choice.noAnswer = 1
        }
        if (f.answers[g].dropdown) {
            f.answers[g].dropdown.noAnswer = 1;
            f.answers[g].dropdown.values = {}
        }
        for (var e = 0; f.answers[g].fields && e < f.answers[g].fields.length; e++) {
            var b = f.answers[g].fields[e];
            if (b && b.numeric != null) {
                b.numeric.noAnswer = 0;
                b.numeric.count = 0;
                b.numeric.max = Number.MIN_VALUE;
                b.numeric.min = Number.MAX_VALUE;
                b.numeric.total = 0;
                b.numeric.average = 0
            } else {
                if (b && b.text != null) {
                    b.text.answers = b.text.noAnswer = 0
                }
            }
        }
    }
    var h = d != null ? d.answers : this.answers;
    for (var g = 0; g < h.length && g < f.answers.length; g++) {
        var n = h[g];
        if (n != null && n.rating != null && f.answers[g].rating != null) {
            if (n.rating.value == "na") {
                if (d == null) {
                    f.answers[g].rating.na = 1
                }
                if (d != null) {
                    f.answers[g].rating.na++
                }
            } else {
                if (n.rating == "" || n.rating.value == "") {
                    if (d == null) {
                        f.answers[g].rating.noAnswer = 1
                    }
                    if (d != null) {
                        f.answers[g].rating.noAnswer++
                    }
                } else {
                    if (d == null) {
                        f.answers[g].rating.values[n.rating.value - 1] = 1
                    }
                    if (d != null) {
                        f.answers[g].rating.values[n.rating.value - 1]++
                    }
                }
            }
        }
        if (n != null && f.answers[g].choice != null) {
            for (var e = 0, m = false; typeof n.choice == "object" && e < n.choice.options.length; e++) {
                if (d == null) {
                    f.answers[g].choice.values[e] = 0
                }
                if (n.choice.options[e].checked == true) {
                    m = true;
                    if (d == null) {
                        f.answers[g].choice.values[e] = 1
                    }
                    if (d != null) {
                        f.answers[g].choice.values[e]++
                    }
                    if (d == null) {
                        f.answers[g].choice.noAnswer = 0
                    }
                }
            }
            if (d != null && typeof n.choice == "object" && m == false) {
                f.answers[g].choice.noAnswer++
            }
        }
        if (n != null && f.answers[g].dropdown != null) {
            for (var e = 0, a = false; typeof n.dropdown == "object" && e < n.dropdown.options.length; e++) {
                if (n.dropdown.options[e] && n.dropdown.options[e].value != null) {
                    a = true;
                    var l = null;
                    if (n.dropdown.options[e] && n.dropdown.options[e].value != null) {
                        l = n.dropdown.options[e].value.replace(/[.]/g, "&#46;");
                        if (d == null) {
                            f.answers[g].dropdown.values[l] = 1
                        }
                        if (d != null && f.answers[g].dropdown.values[l] == null) {
                            f.answers[g].dropdown.values[l] = 0
                        }
                        if (d != null) {
                            f.answers[g].dropdown.values[l]++
                        }
                    }
                    if (d == null) {
                        f.answers[g].dropdown.noAnswer = 0
                    }
                }
            }
            if (d != null && typeof n.dropdown == "object" && a == false) {
                f.answers[g].dropdown.noAnswer++
            }
        }
        if (n != null && f.answers[g].fields != null) {
            for (var e = 0; e < f.answers[g].fields.length; e++) {
                var l = n.fields && n.fields[e] ? n.fields[e].value : "";
                var b = f.answers[g].fields[e];
                if (typeof b.numeric == "object" && l == "") {
                    if (d == null) {
                        b.numeric.noAnswer = 1
                    }
                    if (d != null) {
                        b.numeric.noAnswer++
                    }
                } else {
                    if (typeof b.numeric == "object") {
                        if (d == null) {
                            b.numeric.count = 1;
                            b.numeric.max = l;
                            b.numeric.min = l;
                            b.numeric.total = l;
                            b.numeric.average = l
                        } else {
                            b.numeric.count++;
                            b.numeric.max = Math.max(b.numeric.max, l);
                            b.numeric.min = Math.min(b.numeric.min, l);
                            b.numeric.total += l;
                            b.numeric.average = b.numeric.total / b.numeric.count
                        }
                    } else {
                        if (typeof b.text == "object" && l == "") {
                            if (d == null) {
                                b.text.noAnswer = 1
                            }
                            if (d != null) {
                                b.text.noAnswer++
                            }
                        } else {
                            if (typeof b.text == "object" && typeof l == "string") {
                                if (d == null) {
                                    b.text.answers = 1
                                }
                                if (d != null) {
                                    b.text.answers++
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    if (d == null) {
        try {
            emit(this.surveyId, f)
        } catch (k) {}
    }
};
ObjectPlanet.report.reduce = this.reduce = function (d, b, e) {
    var a = e;
    try {
        a = reportStructureReduce
    } catch (c) {}
    b.forEach(function (n) {
        a.responseCount += n.responseCount;
        for (var l = 0; n.answers && l < n.answers.length; l++) {
            try {
                if (typeof a.answers[l].rating == "object" && typeof n.answers[l].rating == "object") {
                    for (var h = 0; h < n.answers[l].rating.values.length; h++) {
                        if (n.answers[l].rating.values[h] > 0) {
                            if (a.answers[l].rating.values[h] == null) {
                                a.answers[l].rating.values[h] = 0
                            }
                            if (n.answers[l].rating.values[h] > 0) {
                                a.answers[l].rating.values[h] += n.answers[l].rating.values[h]
                            }
                        }
                    }
                    if (n.answers[l].rating.na > 0) {
                        if (a.answers[l].rating.na == null) {
                            a.answers[l].rating.na = 0
                        }
                        a.answers[l].rating.na += n.answers[l].rating.na
                    }
                    if (n.answers[l].rating.noAnswer > 0) {
                        if (a.answers[l].rating.noAnswer == null) {
                            a.answers[l].rating.noAnswer = 0
                        }
                        a.answers[l].rating.noAnswer += n.answers[l].rating.noAnswer
                    }
                }
                if (typeof a.answers[l].choice == "object" && typeof n.answers[l].choice == "object") {
                    for (var h = 0; h < n.answers[l].choice.values.length; h++) {
                        if (a.answers[l].choice.values[h] == null) {
                            a.answers[l].choice.values[h] = 0
                        }
                        if (n.answers[l].choice.values[h] != null) {
                            a.answers[l].choice.values[h] += n.answers[l].choice.values[h]
                        }
                    }
                    if (n.answers[l].choice.noAnswer > 0) {
                        if (a.answers[l].choice.noAnswer == null) {
                            a.answers[l].choice.noAnswer = 0
                        }
                        a.answers[l].choice.noAnswer += n.answers[l].choice.noAnswer
                    }
                }
                if (typeof a.answers[l].dropdown == "object" && typeof n.answers[l].dropdown == "object") {
                    for (var k in n.answers[l].dropdown.values) {
                        if (a.answers[l].dropdown.values[k] == null) {
                            a.answers[l].dropdown.values[k] = 0
                        }
                        a.answers[l].dropdown.values[k] += n.answers[l].dropdown.values[k]
                    }
                    if (n.answers[l].dropdown.noAnswer > 0) {
                        if (a.answers[l].dropdown.noAnswer == null) {
                            a.answers[l].dropdown.noAnswer = 0
                        }
                        a.answers[l].dropdown.noAnswer += n.answers[l].dropdown.noAnswer
                    }
                }
                if (a.answers[l].fields instanceof Array && n.answers[l].fields instanceof Array) {
                    for (var h = 0; h < n.answers[l].fields.length; h++) {
                        var f = n.answers[l].fields[h];
                        var m = a.answers[l].fields[h];
                        if (typeof f.text == "object") {
                            if (f.text.answers > 0) {
                                m.text.answers = (m.text.answers == null ? 0 : m.text.answers) + f.text.answers
                            }
                            if (f.text.noAnswer > 0) {
                                m.text.noAnswer = (m.text.noAnswer == null ? 0 : m.text.noAnswer) + f.text.noAnswer
                            }
                        }
                        if (typeof f.numeric == "object") {
                            m.numeric.count = (m.numeric.count == null ? 0 : m.numeric.count) + f.numeric.count;
                            m.numeric.max = Math.max(m.numeric.max == null ? Number.MIN_VALUE : m.numeric.max, f.numeric.max);
                            m.numeric.min = Math.min(m.numeric.min == null ? Number.MAX_VALUE : m.numeric.min, f.numeric.min);
                            m.numeric.total = (m.numeric.total == null ? 0 : m.numeric.total) + f.numeric.total;
                            m.numeric.average = m.numeric.count > 0 ? m.numeric.total / m.numeric.count : 0;
                            if (f.numeric.noAnswer != null) {
                                m.numeric.noAnswer = (m.numeric.noAnswer == null ? 0 : m.numeric.noAnswer) + f.numeric.noAnswer
                            }
                        }
                    }
                }
            } catch (g) {}
        }
    });
    return a
};
ObjectPlanet.report.filter = this.filter = function (e, d) {
    var b = [];
    if (typeof d == "string") {
        try {
            d = JSON.parse(d)
        } catch (a) {
            d = null
        }
    }
    for (var c = 0; e instanceof Array && c < e.length; c++) {
        if (ObjectPlanet.report.isMatch(e[c], d) == true) {
            b.push(e[c])
        }
    }
    return b
};
ObjectPlanet.report.isMatch = function (a, e) {
    if (a == null || !(a.answers instanceof Array) || e == null || !(e.answers instanceof Array)) {
        return true
    }
    var c = true;
    for (var d = 0; c && d < a.answers.length && d < e.answers.length; d++) {
        var f = a.answers[d];
        var b = e.answers[d];
        if (f && b && f.rating != null) {
            c = ObjectPlanet.report.isRatingMatch(f.rating, b)
        }
        if (f && b && f.choice != null && c == true) {
            c = ObjectPlanet.report.isChoiceMatch(f.choice, b)
        }
        if (f && b && f.fields != null && c == true) {
            c = ObjectPlanet.report.isFieldsMatch(f.fields, b)
        }
        if (f && b && f.dropdown != null && c == true) {
            c = ObjectPlanet.report.isDropdownMatch(f.dropdown, b)
        }
    }
    return c
};
ObjectPlanet.report.isRatingMatch = function (c, b) {
    if (c == null || b == null) {
        return true
    }
    var a = false;
    if ((c.value == null || c.value == "") && b.noAnswer == true) {
        a = true
    }
    if (a == false && c.value == "na" && b.na == true) {
        a = true
    }
    if (a == false && typeof c.value == "number" && b.ratings != null) {
        a = b.ratings[c.value - 1] == true
    }
    return a
};
ObjectPlanet.report.isChoiceMatch = function (a, d) {
    if (d == null) {
        return true
    }
    var b = false;
    for (var c = 0, e = false; a != null && a.options instanceof Array && !b && c < a.options.length; c++) {
        if (a.options[c] != null && a.options[c].checked) {
            e = true
        }
        if (a.options[c] != null && a.options[c].checked == true && d.choices != null && d.choices[c] == true) {
            b = true
        }
    }
    if (!b && !e && d.noAnswer == true) {
        b = true
    }
    return b
};
ObjectPlanet.report.isFieldsMatch = function (a, e) {
    if (e == null) {
        return true
    }
    var c = true;
    for (var d = 0, b = false; c && a instanceof Array && d < a.length; d++) {
        var g = e.fields instanceof Array && e.fields[d] != null && e.fields[d].value != null;
        if (a[d] != null && a[d].value != null && g) {
            if (e.fields[d].not == true) {
                var f = typeof a[d].value == "string" ? a[d].value : a[d].value + "";
                if (e.fields[d].type == "integer") {
                    if (e.fields[d].value == a[d].value) {
                        c = false
                    }
                } else {
                    if (e.fields[d].value == "" && f == "") {
                        c = false
                    } else {
                        if (e.fields[d].value != "" && f.indexOf(e.fields[d].value) >= 0) {
                            c = false
                        }
                    }
                }
            } else {
                if (e.fields[d].value != "") {
                    if (e.fields[d].type == "integer") {
                        if (e.fields[d].value != a[d].value) {
                            c = false
                        }
                    } else {
                        var f = typeof a[d].value == "string" ? a[d].value : a[d].value + "";
                        if (f.indexOf(e.fields[d].value) == -1) {
                            c = false
                        }
                    }
                }
            }
        }
    }
    return c
};
ObjectPlanet.report.isDropdownMatch = function (d, c) {
    if (d == null || c == null) {
        return true
    }
    var a = false;
    if (d.options instanceof Array && d.options.length == 1 && d.options[0] != null) {
        if (d.options[0].value == null && (c.noAnswer == null || c.noAnswer == true)) {
            a = true
        } else {
            if (c.options && c.options[d.options[0].value + ""] == true) {
                a = true
            }
        }
    } else {
        if (d.options instanceof Array && d.options.length > 1 && c.options != null) {
            for (var b = 0; b < d.options.length; b++) {
                if (d.options[b] != null && d.options[b].value != null) {
                    if (c.options[d.options[b].value + ""] == true) {
                        return true
                    }
                }
            }
        } else {
            if (c.noAnswer == true && (!(d.options instanceof Array) || d.options[0] == null)) {
                a = true
            }
        }
    }
    return a
};
var SEPARATOR = ";";
var LINE = "\r\n";
ObjectPlanet.report.exportCSV = this.exportCSV = function (f, l, n) {
    var h = n != null && n.separator != null ? n.separator : SEPARATOR;
    var c = n != null && n.questionFilter ? n.questionFilter : null;
    var e = exportCSVHeader(f, h, c);
    for (var g = 0; l != null && l instanceof Array && g < l.length; g++) {
        var b = l[g];
        e += b && b.submitted != null && typeof b.submitted == "number" ? ObjectPlanet.dateStr(b.submitted) : "";
        for (var d = 0; b != null && b.answers != null && b.answers instanceof Array && d < b.answers.length; d++) {
            if (c != null && c[d] != null && c[d].on == false) {
                continue
            }
            e += h;
            var m = b.answers[d];
            if (m && m.rating != null) {
                if (m.rating.value == "na") {
                    e += f[d].rating.naLabel != null ? ('"' + f[d].rating.naLabel.def + '"') : "na"
                } else {
                    e += (m.rating.value != null ? m.rating.value : "")
                }
            } else {
                if (m && m.choice != null && f && f[d] && f[d].choice && f[d].choice.options != null) {
                    e += exportCSVChoice(f, m.choice.options, d, h)
                } else {
                    if (m && m.fields != null) {
                        e += exportCSVFields(f, m.fields, h, c != null && c[d] != null ? c[d].fields : null)
                    } else {
                        if (m && m.dropdown != null && m.dropdown.options instanceof Array && m.dropdown.options.length > 0) {
                            e += exportCSVDropdown(m.dropdown.options, h)
                        }
                    }
                }
            } if (m && m.comment != null && (c == null || c[d] == null || c[d].comment == true)) {
                if (m.rating != null || m.choice != null || m.fields != null || m.dropdown != null) {
                    e += h
                }
                var k = ObjectPlanet.decode(m.comment.value != null ? m.comment.value : "");
                if (k != "" && typeof k == "string") {
                    k = k.replace(/"/g, '""')
                }
                if (k != "") {
                    e += '"' + k + '"'
                }
            }
        }
        if (b != null) {
            e += LINE
        }
    }
    return e
};
var exportCSVHeader = function (e, k, b) {
    var d = e != null && e instanceof Array && e.length > 0 ? '"Date"' : "";
    for (var f = 0; e != null && e instanceof Array && f < e.length; f++) {
        if (b != null && b[f] != null && b[f].on == false) {
            continue
        }
        var a = e[f];
        var g = ObjectPlanet.decode(a && a.questionText && a.questionText.def ? a.questionText.def : "Question " + (f + 1));
        if (typeof g == "string") {
            g = g.replace(/"/g, '""')
        }
        if (a != null && a.fields != null && a.fields instanceof Array && a.fields.length > 0) {
            for (var c = 0; c < a.fields.length; c++) {
                if (b != null && b[f] != null && b[f].fields != null && b[f].fields[c] == false) {
                    continue
                }
                d += k + '"' + g;
                var m = " " + ObjectPlanet.decode(a.fields[c] && a.fields[c].label && a.fields[c].label.def ? a.fields[c].label.def : "Field " + (c + 1));
                d += m.replace(/"/g, '""') + '"'
            }
        } else {
            if (a != null && a.choice != null && a.choice.options != null && a.choice.multipleOn == true) {
                for (var c = 0; c < a.choice.options.length; c++) {
                    d += k + '"' + g;
                    var h = " " + ObjectPlanet.decode(a.choice.options[c] && a.choice.options[c].def ? a.choice.options[c].def : "Option " + (c + 1));
                    d += h.replace(/"/g, '""') + '"'
                }
            } else {
                d += k + '"' + g + '"'
            }
        } if (a != null && a.comment != null && (a.rating != null || a.choice != null || a.fields != null || a.dropdown != null)) {
            if (b == null || b[f] == null || b[f].comment == true) {
                var l = ObjectPlanet.decode(a.comment.label && a.comment.label.def ? a.comment.label.def : "Comment");
                if (typeof l == "string") {
                    l = l.replace(/"/g, '""')
                }
                d += k + '"' + l + '"'
            }
        }
    }
    if (e != null && e instanceof Array && e.length > 0) {
        d += LINE
    }
    return d
};
var exportCSVChoice = function (c, j, g, f) {
    var h = c[g].choice.multipleOn == true;
    for (var d = 0, b = ""; j && j instanceof Array && d < j.length; d++) {
        var a = c[g].choice.options;
        if (h) {
            var e = "";
            if (j[d] != null && j[d].checked == true && a instanceof Array && d < a.length && a[d] != null && a[d].def != null) {
                e = ObjectPlanet.decode(a[d].def);
                if (a[d].other != null && a[d].other.on == true && j[d].value != null && j[d].value != "") {
                    e += " (" + ObjectPlanet.decode(j[d].value) + ")"
                }
                if (typeof e == "string") {
                    e = e.replace(/"/g, '""')
                }
            }
            if (e != "") {
                b += '"' + e + '"'
            }
            if (d < j.length - 1) {
                b += f
            }
        } else {
            if (j[d] != null && j[d].checked == true && a instanceof Array && d < a.length && a[d] != null && a[d].def != null) {
                var e = ObjectPlanet.decode(a[d].def);
                if (a[d].other != null && a[d].other.on == true && j[d].value != null && j[d].value != "") {
                    e += " (" + ObjectPlanet.decode(j[d].value) + ")"
                }
                if (typeof e == "string") {
                    e = e.replace(/"/g, '""')
                }
                b += '"' + e + '"'
            }
        }
    }
    return b
};
var exportCSVFields = function (c, a, g, e) {
    for (var d = 0, b = ""; a instanceof Array && d < a.length; d++) {
        if (e != null && e[d] == false) {
            continue
        }
        var f = ObjectPlanet.decode(a[d] != null && a[d].value != null ? a[d].value : "");
        if (f != "") {
            b += '"' + f.toString().replace(/"/g, '""') + '"'
        }
        if (d < a.length - 1) {
            b += g
        }
    }
    return b
};
var exportCSVDropdown = function (a, d) {
    for (var b = 0, e = ""; b < a.length; b++) {
        if (a[b] != null && a[b].value != null) {
            var c = ObjectPlanet.decode(a[b].value);
            e += (typeof c == "string" ? c.replace(/"/g, '""') : c);
            e += d
        }
    }
    if (e.length > 0 && e.charAt(e.length - 1) == d) {
        e = e.substring(0, e.length - 1)
    }
    return e.length > 0 ? '"' + e + '"' : ""
};
ObjectPlanet.decode = function (b) {
    try {
        return decodeURIComponent(b)
    } catch (a) {
        return b
    }
};
ObjectPlanet.dateStr = function (d, b) {
    d = !(typeof d instanceof Date) ? new Date(d) : d;
    var f = d.getMonth() < 9 ? "0" + (d.getMonth() + 1) : (d.getMonth() + 1);
    var c = d.getDate() < 10 ? "0" + d.getDate() : d.getDate();
    var a = d.getHours() < 10 ? "0" + d.getHours() : d.getHours();
    var e = d.getMinutes() < 10 ? "0" + d.getMinutes() : d.getMinutes();
    var g = d.getSeconds() < 10 ? "0" + d.getSeconds() : d.getSeconds();
    return d.getFullYear() + "-" + f + "-" + c + " " + a + ":" + e + (b != false ? (":" + g) : "")
};
ObjectPlanet.monthDiff = this.monthDiff = function (b, a) {
    var f = b.getFullYear();
    var e = a.getFullYear();
    var d = b.getMonth();
    var c = a.getMonth();
    if (d === 0) {
        d++;
        c++
    }
    return (e - f) * 12 + (c - d)
};
ObjectPlanet.getSurveyId = this.getSurveyId = function (b) {
    var c = b;
    var a = /[^0123456789abcdefABCDEF]/.exec(c);
    if (a != null && a.index != null && a.index > 0) {
        c = c.substring(0, a.index)
    }
    return c
};